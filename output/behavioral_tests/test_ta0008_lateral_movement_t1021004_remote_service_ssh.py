import unittest

from internal.logtest import LogtestStatus, send_multiple_logs  # type: ignore


class TestTa0008LateralMovementT1021004RemoteServiceSsh(unittest.TestCase):

    def test_id4_openssh_server_listening(self) -> None:
        # Logs extracted from EVTX file
        logs = [
            r'''{"win": {"system": {"providerName": "OpenSSH", "providerGuid": "{c4b57d35-0636-4bc3-a262-370f249f9802}", "eventID": "4", "version": "0", "level": "4", "task": "0", "opcode": "0", "keywords": "0x4000000000000000", "systemTime": "2021-04-22T10:10:37.0417973Z", "eventRecordID": "1", "processID": "3912", "threadID": "400", "channel": "OpenSSH/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "sshd: Server listening on :: port 22."}, "eventdata": {"process": "sshd", "payload": "Server listening on :: port 22."}}}''',
            r'''{"win": {"system": {"providerName": "OpenSSH", "providerGuid": "{c4b57d35-0636-4bc3-a262-370f249f9802}", "eventID": "4", "version": "0", "level": "4", "task": "0", "opcode": "0", "keywords": "0x4000000000000000", "systemTime": "2021-04-22T10:10:37.0418938Z", "eventRecordID": "2", "processID": "3912", "threadID": "400", "channel": "OpenSSH/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "sshd: Server listening on 0.0.0.0 port 22."}, "eventdata": {"process": "sshd", "payload": "Server listening on 0.0.0.0 port 22."}}}''',
            r'''{"win": {"system": {"providerName": "OpenSSH", "providerGuid": "{c4b57d35-0636-4bc3-a262-370f249f9802}", "eventID": "4", "version": "0", "level": "4", "task": "0", "opcode": "0", "keywords": "0x4000000000000000", "systemTime": "2021-04-22T10:19:29.7928953Z", "eventRecordID": "3", "processID": "6892", "threadID": "2532", "channel": "OpenSSH/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "sshd: Server listening on :: port 22."}, "eventdata": {"process": "sshd", "payload": "Server listening on :: port 22."}}}''',
            r'''{"win": {"system": {"providerName": "OpenSSH", "providerGuid": "{c4b57d35-0636-4bc3-a262-370f249f9802}", "eventID": "4", "version": "0", "level": "4", "task": "0", "opcode": "0", "keywords": "0x4000000000000000", "systemTime": "2021-04-22T10:19:29.7930041Z", "eventRecordID": "4", "processID": "6892", "threadID": "2532", "channel": "OpenSSH/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "sshd: Server listening on 0.0.0.0 port 22."}, "eventdata": {"process": "sshd", "payload": "Server listening on 0.0.0.0 port 22."}}}''',
            r'''{"win": {"system": {"providerName": "OpenSSH", "providerGuid": "{c4b57d35-0636-4bc3-a262-370f249f9802}", "eventID": "4", "version": "0", "level": "4", "task": "0", "opcode": "0", "keywords": "0x4000000000000000", "systemTime": "2021-04-27T10:40:45.2847566Z", "eventRecordID": "5", "processID": "2084", "threadID": "3216", "channel": "OpenSSH/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "sshd: Server listening on :: port 22."}, "eventdata": {"process": "sshd", "payload": "Server listening on :: port 22."}}}''',
            r'''{"win": {"system": {"providerName": "OpenSSH", "providerGuid": "{c4b57d35-0636-4bc3-a262-370f249f9802}", "eventID": "4", "version": "0", "level": "4", "task": "0", "opcode": "0", "keywords": "0x4000000000000000", "systemTime": "2021-04-27T10:40:45.2848393Z", "eventRecordID": "6", "processID": "2084", "threadID": "3216", "channel": "OpenSSH/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "sshd: Server listening on 0.0.0.0 port 22."}, "eventdata": {"process": "sshd", "payload": "Server listening on 0.0.0.0 port 22."}}}'''
        ]

        responses = send_multiple_logs(logs, location="stdin", log_format="json")

        # Ensure we receive a response for each log sent
        self.assertEqual(len(responses), len(logs))

        for _, response in enumerate(responses):
            self.assertEqual(response.status, LogtestStatus.RuleMatch)
            self.assertEqual(response.decoder, 'json')

            # Example: Set expected Wazuh rule ID and level when analyzing logs
            # expected_rule_id = None  # Replace with actual rule ID
            # expected_rule_level = None  # Replace with actual rule level

            # self.assertEqual(response.rule_id, expected_rule_id)
            # self.assertEqual(response.rule_level, expected_rule_level)

        # TODO: Write the expected result as test cases when the logs are analyzed by Wazuh.
        self.fail("Test not implemented yet. Define expected results.")

    def test_id4103_4104_openssh_server_activation_and_config(self) -> None:
        # Logs extracted from EVTX file
        logs = [
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:29.4765312Z", "eventRecordID": "160", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(PSConsoleHostReadLine): \"PSConsoleHostReadLine\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 22\n        Command Name = PSConsoleHostReadLine\n        Command Type = Function\n        Script Name = \n        Command Path = \n        Sequence Number = 90\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 22\n        Command Name = PSConsoleHostReadLine\n        Command Type = Function\n        Script Name = \n        Command Path = \n        Sequence Number = 90\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(PSConsoleHostReadLine): \"PSConsoleHostReadLine\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "5", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:29.4793192Z", "eventRecordID": "161", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "VERBOSE", "message": "Creating Scriptblock text (1 of 1):\nStart-Service sshd\n\nScriptBlock ID: 5cc7cdc9-cad8-44e2-9161-f03661b8dcdb\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "1", "scriptBlockText": "Start-Service sshd", "scriptBlockId": "5cc7cdc9-cad8-44e2-9161-f03661b8dcdb"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:30.0357020Z", "eventRecordID": "162", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Start-Service): \"Start-Service\"\nParameterBinding(Start-Service): name=\"Name\"; value=\"sshd\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 23\n        Command Name = Start-Service\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 92\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 23\n        Command Name = Start-Service\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 92\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Start-Service): \"Start-Service\"\nParameterBinding(Start-Service): name=\"Name\"; value=\"sshd\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:30.0360367Z", "eventRecordID": "163", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Out-Default): \"Out-Default\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 23\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 94\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 23\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 94\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Out-Default): \"Out-Default\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "5", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:30.0396184Z", "eventRecordID": "164", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "VERBOSE", "message": "Creating Scriptblock text (1 of 1):\nprompt\n\nScriptBlock ID: a8e5ec5f-0dde-440b-88e7-fba686f005fb\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "1", "scriptBlockText": "prompt", "scriptBlockId": "a8e5ec5f-0dde-440b-88e7-fba686f005fb"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:30.0416033Z", "eventRecordID": "165", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 25\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = C:\\Program Files\\WindowsPowerShell\\Modules\\PSReadline\\2.0.0\\PSReadLine.psm1\n        Command Path = \n        Sequence Number = 96\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 25\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = C:\\Program Files\\WindowsPowerShell\\Modules\\PSReadline\\2.0.0\\PSReadLine.psm1\n        Command Path = \n        Sequence Number = 96\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:32.5486600Z", "eventRecordID": "166", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(PSConsoleHostReadLine): \"PSConsoleHostReadLine\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 25\n        Command Name = PSConsoleHostReadLine\n        Command Type = Function\n        Script Name = \n        Command Path = \n        Sequence Number = 98\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 25\n        Command Name = PSConsoleHostReadLine\n        Command Type = Function\n        Script Name = \n        Command Path = \n        Sequence Number = 98\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(PSConsoleHostReadLine): \"PSConsoleHostReadLine\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "5", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:32.5590161Z", "eventRecordID": "167", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "VERBOSE", "message": "Creating Scriptblock text (1 of 1):\nSet-Service -Name sshd -StartupType 'Automatic'\n\nScriptBlock ID: 0956626f-29cb-43b5-bbd9-6f2850fd0971\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "1", "scriptBlockText": "Set-Service -Name sshd -StartupType 'Automatic'", "scriptBlockId": "0956626f-29cb-43b5-bbd9-6f2850fd0971"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:32.5907329Z", "eventRecordID": "168", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-Service): \"Set-Service\"\nParameterBinding(Set-Service): name=\"Name\"; value=\"sshd\"\nParameterBinding(Set-Service): name=\"StartupType\"; value=\"Automatic\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 26\n        Command Name = Set-Service\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 100\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 26\n        Command Name = Set-Service\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 100\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-Service): \"Set-Service\"\nParameterBinding(Set-Service): name=\"Name\"; value=\"sshd\"\nParameterBinding(Set-Service): name=\"StartupType\"; value=\"Automatic\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:32.5909626Z", "eventRecordID": "169", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Out-Default): \"Out-Default\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 26\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 102\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 26\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 102\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Out-Default): \"Out-Default\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "5", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:32.5937420Z", "eventRecordID": "170", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "VERBOSE", "message": "Creating Scriptblock text (1 of 1):\nprompt\n\nScriptBlock ID: af0addb1-46cf-4c3c-9e55-b7da49e2cff6\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "1", "scriptBlockText": "prompt", "scriptBlockId": "af0addb1-46cf-4c3c-9e55-b7da49e2cff6"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:32.5952361Z", "eventRecordID": "171", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 28\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = C:\\Program Files\\WindowsPowerShell\\Modules\\PSReadline\\2.0.0\\PSReadLine.psm1\n        Command Path = \n        Sequence Number = 104\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 28\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = C:\\Program Files\\WindowsPowerShell\\Modules\\PSReadline\\2.0.0\\PSReadLine.psm1\n        Command Path = \n        Sequence Number = 104\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:36.1723943Z", "eventRecordID": "172", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(PSConsoleHostReadLine): \"PSConsoleHostReadLine\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 28\n        Command Name = PSConsoleHostReadLine\n        Command Type = Function\n        Script Name = \n        Command Path = \n        Sequence Number = 106\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 28\n        Command Name = PSConsoleHostReadLine\n        Command Type = Function\n        Script Name = \n        Command Path = \n        Sequence Number = 106\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(PSConsoleHostReadLine): \"PSConsoleHostReadLine\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "5", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:36.1832044Z", "eventRecordID": "173", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "VERBOSE", "message": "Creating Scriptblock text (1 of 1):\nGet-NetFirewallRule -Name *ssh*\n\nScriptBlock ID: 95a86ae8-8bb1-47c6-abe9-28d98c6b149e\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "1", "scriptBlockText": "Get-NetFirewallRule -Name *ssh*", "scriptBlockId": "95a86ae8-8bb1-47c6-abe9-28d98c6b149e"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9046138Z", "eventRecordID": "174", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (1 of 23):\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetFirewallRule'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetFirewallRule\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    \n    param(\n    \n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('ID')]\n    [string]\n    ${Name},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [string]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Description},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Group},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]\n    ${Profile},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${Platform},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction]\n    ${Direction},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]\n    ${Action},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal]\n    ${EdgeTraversalPolicy},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('LSM')]\n    [bool]\n    ${LooseSourceMapping},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [bool]\n    ${LocalOnlyMapping},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Owner},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${LocalAddress},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${RemoteAddress},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${LocalPort},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${RemotePort},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${IcmpType},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('DynamicTransport')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport]\n    ${DynamicTarget},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Program},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Package},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Service},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [WildcardPattern[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]\n    ${InterfaceType},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${LocalUser},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${RemoteUser},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${RemoteMachine},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication]\n    ${Authentication},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption]\n    ${Encryption},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [bool]\n    ${OverrideBlockRules},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('GPOSession')) {\n          [object]$__cmdletization_value = ${GPOSession}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Name')) {\n          [object]$__cmdletization_value = ${Name}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DisplayName')) {\n          [object]$__cmdletization_value = ${DisplayName}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings \n\nScriptBlock ID: 66ea90b5-c136-486d-985d-cc2ad76dd8e1\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "23", "scriptBlockText": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetFirewallRule'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetFirewallRule\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    \n    param(\n    \n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('ID')]\n    [string]\n    ${Name},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [string]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Description},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Group},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]\n    ${Profile},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${Platform},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction]\n    ${Direction},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]\n    ${Action},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal]\n    ${EdgeTraversalPolicy},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('LSM')]\n    [bool]\n    ${LooseSourceMapping},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [bool]\n    ${LocalOnlyMapping},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Owner},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${LocalAddress},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${RemoteAddress},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${LocalPort},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${RemotePort},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${IcmpType},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('DynamicTransport')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport]\n    ${DynamicTarget},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Program},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Package},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Service},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [WildcardPattern[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]\n    ${InterfaceType},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${LocalUser},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${RemoteUser},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${RemoteMachine},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication]\n    ${Authentication},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption]\n    ${Encryption},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [bool]\n    ${OverrideBlockRules},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('GPOSession')) {\n          [object]$__cmdletization_value = ${GPOSession}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Name')) {\n          [object]$__cmdletization_value = ${Name}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DisplayName')) {\n          [object]$__cmdletization_value = ${DisplayName}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings", "scriptBlockId": "66ea90b5-c136-486d-985d-cc2ad76dd8e1"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9046442Z", "eventRecordID": "175", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (2 of 23):\n= 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Description')) {\n          [object]$__cmdletization_value = ${Description}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Group')) {\n          [object]$__cmdletization_value = ${Group}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Enabled')) {\n          [object]$__cmdletization_value = ${Enabled}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Profile')) {\n          [object]$__cmdletization_value = ${Profile}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Platform')) {\n          [object]$__cmdletization_value = ${Platform}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Direction')) {\n          [object]$__cmdletization_value = ${Direction}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Direction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Direction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Action')) {\n          [object]$__cmdletization_value = ${Action}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy')) {\n          [object]$__cmdletization_value = ${EdgeTraversalPolicy}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EdgeTraversalPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EdgeTraversalPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LooseSourceMapping')) {\n          [object]$__cmdletization_value = ${LooseSourceMapping}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LooseSourceMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LooseSourceMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalOnlyMapping')) {\n          [object]$__cmdletization_value = ${LocalOnlyMapping}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalOnlyMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalOnlyMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Owner')) {\n          [object]$__cmdletization_value = ${Owner}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Owner'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Owner'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalAddress')) {\n          [object]$__cmdletization_value = ${LocalAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParam\n\nScriptBlock ID: 66ea90b5-c136-486d-985d-cc2ad76dd8e1\nPath:"}, "eventdata": {"messageNumber": "2", "messageTotal": "23", "scriptBlockText": "= 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Description')) {\n          [object]$__cmdletization_value = ${Description}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Group')) {\n          [object]$__cmdletization_value = ${Group}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Enabled')) {\n          [object]$__cmdletization_value = ${Enabled}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Profile')) {\n          [object]$__cmdletization_value = ${Profile}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Platform')) {\n          [object]$__cmdletization_value = ${Platform}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Direction')) {\n          [object]$__cmdletization_value = ${Direction}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Direction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Direction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Action')) {\n          [object]$__cmdletization_value = ${Action}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy')) {\n          [object]$__cmdletization_value = ${EdgeTraversalPolicy}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EdgeTraversalPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EdgeTraversalPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LooseSourceMapping')) {\n          [object]$__cmdletization_value = ${LooseSourceMapping}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LooseSourceMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LooseSourceMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalOnlyMapping')) {\n          [object]$__cmdletization_value = ${LocalOnlyMapping}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalOnlyMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalOnlyMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Owner')) {\n          [object]$__cmdletization_value = ${Owner}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Owner'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Owner'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalAddress')) {\n          [object]$__cmdletization_value = ${LocalAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParam", "scriptBlockId": "66ea90b5-c136-486d-985d-cc2ad76dd8e1"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9046713Z", "eventRecordID": "176", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (3 of 23):\neter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemoteAddress')) {\n          [object]$__cmdletization_value = ${RemoteAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Protocol')) {\n          [object]$__cmdletization_value = ${Protocol}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalPort')) {\n          [object]$__cmdletization_value = ${LocalPort}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemotePort')) {\n          [object]$__cmdletization_value = ${RemotePort}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IcmpType')) {\n          [object]$__cmdletization_value = ${IcmpType}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DynamicTarget')) {\n          [object]$__cmdletization_value = ${DynamicTarget}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Program')) {\n          [object]$__cmdletization_value = ${Program}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Program'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Program'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Package')) {\n          [object]$__cmdletization_value = ${Package}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Service')) {\n          [object]$__cmdletization_value = ${Service}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Service'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Service'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {\n          [object]$__cmdletization_value = ${InterfaceAlias}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceType')) {\n          [object]$__cmdletization_value = ${InterfaceType}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; \n\nScriptBlock ID: 66ea90b5-c136-486d-985d-cc2ad76dd8e1\nPath:"}, "eventdata": {"messageNumber": "3", "messageTotal": "23", "scriptBlockText": "eter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemoteAddress')) {\n          [object]$__cmdletization_value = ${RemoteAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Protocol')) {\n          [object]$__cmdletization_value = ${Protocol}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalPort')) {\n          [object]$__cmdletization_value = ${LocalPort}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemotePort')) {\n          [object]$__cmdletization_value = ${RemotePort}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IcmpType')) {\n          [object]$__cmdletization_value = ${IcmpType}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DynamicTarget')) {\n          [object]$__cmdletization_value = ${DynamicTarget}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Program')) {\n          [object]$__cmdletization_value = ${Program}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Program'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Program'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Package')) {\n          [object]$__cmdletization_value = ${Package}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Service')) {\n          [object]$__cmdletization_value = ${Service}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Service'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Service'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {\n          [object]$__cmdletization_value = ${InterfaceAlias}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceType')) {\n          [object]$__cmdletization_value = ${InterfaceType}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType';", "scriptBlockId": "66ea90b5-c136-486d-985d-cc2ad76dd8e1"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9047063Z", "eventRecordID": "177", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (4 of 23):\nBindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalUser')) {\n          [object]$__cmdletization_value = ${LocalUser}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemoteUser')) {\n          [object]$__cmdletization_value = ${RemoteUser}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemoteMachine')) {\n          [object]$__cmdletization_value = ${RemoteMachine}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteMachine'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteMachine'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Authentication')) {\n          [object]$__cmdletization_value = ${Authentication}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Encryption')) {\n          [object]$__cmdletization_value = ${Encryption}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('OverrideBlockRules')) {\n          [object]$__cmdletization_value = ${OverrideBlockRules}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetFirewallRule' -Alias '*'\n        \n\nfunction Show-NetFirewallRule\n{\n    [CmdletBinding(PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/NetSecurityDeepEnumElement')]\n    param(\n    \n    [Parameter(ParameterSetName='EnumerateFull1')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='EnumerateFull1')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='EnumerateFull1')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='EnumerateFull1')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='EnumerateFull1')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('GPOSession')) {\n          [object]$__cmdletization_value = ${GPOSession}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n     \n\nScriptBlock ID: 66ea90b5-c136-486d-985d-cc2ad76dd8e1\nPath:"}, "eventdata": {"messageNumber": "4", "messageTotal": "23", "scriptBlockText": "Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalUser')) {\n          [object]$__cmdletization_value = ${LocalUser}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemoteUser')) {\n          [object]$__cmdletization_value = ${RemoteUser}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemoteMachine')) {\n          [object]$__cmdletization_value = ${RemoteMachine}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteMachine'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteMachine'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Authentication')) {\n          [object]$__cmdletization_value = ${Authentication}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Encryption')) {\n          [object]$__cmdletization_value = ${Encryption}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('OverrideBlockRules')) {\n          [object]$__cmdletization_value = ${OverrideBlockRules}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetFirewallRule' -Alias '*'\n        \n\nfunction Show-NetFirewallRule\n{\n    [CmdletBinding(PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/NetSecurityDeepEnumElement')]\n    param(\n    \n    [Parameter(ParameterSetName='EnumerateFull1')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='EnumerateFull1')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='EnumerateFull1')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='EnumerateFull1')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='EnumerateFull1')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('GPOSession')) {\n          [object]$__cmdletization_value = ${GPOSession}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {", "scriptBlockId": "66ea90b5-c136-486d-985d-cc2ad76dd8e1"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9047321Z", "eventRecordID": "178", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (5 of 23):\n     $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Dependents'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/NetSecurityDeepEnumElement'\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('EnumerateFull', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Show-NetFirewallRule' -Alias '*'\n        \n\nfunction Get-NetFirewallRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]\n    ${Direction},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]\n    ${Action},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]\n    ${EdgeTraversalPolicy},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('LSM')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${LooseSourceMapping},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${LocalOnlyMapping},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Owner},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallApplicationFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceTypeFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallPortFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallSecurityFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallServiceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssoci\n\nScriptBlock ID: 66ea90b5-c136-486d-985d-cc2ad76dd8e1\nPath:"}, "eventdata": {"messageNumber": "5", "messageTotal": "23", "scriptBlockText": "$__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Dependents'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/NetSecurityDeepEnumElement'\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('EnumerateFull', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Show-NetFirewallRule' -Alias '*'\n        \n\nfunction Get-NetFirewallRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]\n    ${Direction},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]\n    ${Action},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]\n    ${EdgeTraversalPolicy},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('LSM')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${LooseSourceMapping},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${LocalOnlyMapping},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Owner},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallApplicationFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceTypeFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallPortFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallSecurityFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallServiceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssoci", "scriptBlockId": "66ea90b5-c136-486d-985d-cc2ad76dd8e1"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9047588Z", "eventRecordID": "179", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (6 of 23):\natedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Direction})\n        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Action})\n        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EdgeTraversalPolicy})\n        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LooseSourceMapping})\n        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalOnlyMapping})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Owner})\n        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Associ\n\nScriptBlock ID: 66ea90b5-c136-486d-985d-cc2ad76dd8e1\nPath:"}, "eventdata": {"messageNumber": "6", "messageTotal": "23", "scriptBlockText": "atedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Direction})\n        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Action})\n        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EdgeTraversalPolicy})\n        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LooseSourceMapping})\n        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalOnlyMapping})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Owner})\n        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${Associ", "scriptBlockId": "66ea90b5-c136-486d-985d-cc2ad76dd8e1"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9047982Z", "eventRecordID": "180", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (7 of 23):\natedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetFirewallRule' -Alias '*'\n        \n\nfunction Set-NetFirewallRule\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewDisplayName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]\n    ${Profile},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${Platform},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction]\n    ${Direction},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]\n    ${Action},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal]\n    ${EdgeTraversalPolicy},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('LSM')]\n    [bool]\n    ${LooseSourceMapping},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [bool]\n    ${LocalOnlyMapping},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Owner},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${LocalAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${RemoteAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${LocalPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${RemotePort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${IcmpType},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('DynamicTransport')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport]\n    ${DynamicTarget},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Par\n\nScriptBlock ID: 66ea90b5-c136-486d-985d-cc2ad76dd8e1\nPath:"}, "eventdata": {"messageNumber": "7", "messageTotal": "23", "scriptBlockText": "atedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetFirewallRule' -Alias '*'\n        \n\nfunction Set-NetFirewallRule\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewDisplayName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]\n    ${Profile},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${Platform},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction]\n    ${Direction},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]\n    ${Action},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal]\n    ${EdgeTraversalPolicy},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('LSM')]\n    [bool]\n    ${LooseSourceMapping},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [bool]\n    ${LocalOnlyMapping},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Owner},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${LocalAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${RemoteAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${LocalPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${RemotePort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${IcmpType},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('DynamicTransport')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport]\n    ${DynamicTarget},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Par", "scriptBlockId": "66ea90b5-c136-486d-985d-cc2ad76dd8e1"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9048213Z", "eventRecordID": "181", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (8 of 23):\nameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Program},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Package},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Service},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [WildcardPattern[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]\n    ${InterfaceType},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${LocalUser},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${RemoteUser},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${RemoteMachine},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication]\n    ${Authentication},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption]\n    ${Encryption},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [bool]\n    ${OverrideBlockRules},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {\n            [object]$__cmdletization_value = ${NewDisplayName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Description')) {\n            [object]$__cmdletization_value = ${Description}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Enabled')) {\n            [object]$__cmdletization_value = ${Enabled}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n\nScriptBlock ID: 66ea90b5-c136-486d-985d-cc2ad76dd8e1\nPath:"}, "eventdata": {"messageNumber": "8", "messageTotal": "23", "scriptBlockText": "ameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Program},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Package},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Service},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [WildcardPattern[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]\n    ${InterfaceType},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${LocalUser},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${RemoteUser},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${RemoteMachine},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication]\n    ${Authentication},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption]\n    ${Encryption},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [bool]\n    ${OverrideBlockRules},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {\n            [object]$__cmdletization_value = ${NewDisplayName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Description')) {\n            [object]$__cmdletization_value = ${Description}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Enabled')) {\n            [object]$__cmdletization_value = ${Enabled}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)", "scriptBlockId": "66ea90b5-c136-486d-985d-cc2ad76dd8e1"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9048458Z", "eventRecordID": "182", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (9 of 23):\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Profile')) {\n            [object]$__cmdletization_value = ${Profile}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Platform')) {\n            [object]$__cmdletization_value = ${Platform}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Direction')) {\n            [object]$__cmdletization_value = ${Direction}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Direction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Direction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Action')) {\n            [object]$__cmdletization_value = ${Action}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy')) {\n            [object]$__cmdletization_value = ${EdgeTraversalPolicy}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EdgeTraversalPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EdgeTraversalPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LooseSourceMapping')) {\n            [object]$__cmdletization_value = ${LooseSourceMapping}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LooseSourceMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LooseSourceMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LocalOnlyMapping')) {\n            [object]$__cmdletization_value = ${LocalOnlyMapping}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalOnlyMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalOnlyMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Owner')) {\n            [object]$__cmdletization_value = ${Owner}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Owner'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Owner'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LocalAddress')) {\n            [object]$__cmdletization_value = ${LocalAddress}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemoteAddress')) {\n            [object]$__cmdletization_value = ${RemoteAddress}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Protocol')) {\n            [object]$__cmdletization_value = ${Protocol}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LocalPort')) {\n            [object]$__cmdletization_value = ${LocalPort}\n            $__cmdletization_methodParame\n\nScriptBlock ID: 66ea90b5-c136-486d-985d-cc2ad76dd8e1\nPath:"}, "eventdata": {"messageNumber": "9", "messageTotal": "23", "scriptBlockText": "[object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Profile')) {\n            [object]$__cmdletization_value = ${Profile}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Platform')) {\n            [object]$__cmdletization_value = ${Platform}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Direction')) {\n            [object]$__cmdletization_value = ${Direction}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Direction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Direction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Action')) {\n            [object]$__cmdletization_value = ${Action}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy')) {\n            [object]$__cmdletization_value = ${EdgeTraversalPolicy}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EdgeTraversalPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EdgeTraversalPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LooseSourceMapping')) {\n            [object]$__cmdletization_value = ${LooseSourceMapping}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LooseSourceMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LooseSourceMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LocalOnlyMapping')) {\n            [object]$__cmdletization_value = ${LocalOnlyMapping}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalOnlyMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalOnlyMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Owner')) {\n            [object]$__cmdletization_value = ${Owner}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Owner'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Owner'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LocalAddress')) {\n            [object]$__cmdletization_value = ${LocalAddress}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemoteAddress')) {\n            [object]$__cmdletization_value = ${RemoteAddress}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Protocol')) {\n            [object]$__cmdletization_value = ${Protocol}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LocalPort')) {\n            [object]$__cmdletization_value = ${LocalPort}\n            $__cmdletization_methodParame", "scriptBlockId": "66ea90b5-c136-486d-985d-cc2ad76dd8e1"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9048734Z", "eventRecordID": "183", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (10 of 23):\nter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemotePort')) {\n            [object]$__cmdletization_value = ${RemotePort}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IcmpType')) {\n            [object]$__cmdletization_value = ${IcmpType}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DynamicTarget')) {\n            [object]$__cmdletization_value = ${DynamicTarget}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Program')) {\n            [object]$__cmdletization_value = ${Program}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Program'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Program'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Package')) {\n            [object]$__cmdletization_value = ${Package}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Service')) {\n            [object]$__cmdletization_value = ${Service}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Service'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Service'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {\n            [object]$__cmdletization_value = ${InterfaceAlias}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InterfaceType')) {\n            [object]$__cmdletization_value = ${InterfaceType}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LocalUser')) {\n            [object]$__cmdletization_value = ${LocalUser}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemoteUser')) {\n            [object]$__cmdletization_value = ${RemoteUser}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemoteMachine')) {\n            [object]$__cmdletization_value = ${RemoteMachine}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteMachine'; ParameterType = 'System.String'; Bindings = 'In'; Value \n\nScriptBlock ID: 66ea90b5-c136-486d-985d-cc2ad76dd8e1\nPath:"}, "eventdata": {"messageNumber": "10", "messageTotal": "23", "scriptBlockText": "ter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemotePort')) {\n            [object]$__cmdletization_value = ${RemotePort}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IcmpType')) {\n            [object]$__cmdletization_value = ${IcmpType}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DynamicTarget')) {\n            [object]$__cmdletization_value = ${DynamicTarget}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Program')) {\n            [object]$__cmdletization_value = ${Program}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Program'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Program'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Package')) {\n            [object]$__cmdletization_value = ${Package}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Service')) {\n            [object]$__cmdletization_value = ${Service}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Service'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Service'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {\n            [object]$__cmdletization_value = ${InterfaceAlias}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InterfaceType')) {\n            [object]$__cmdletization_value = ${InterfaceType}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LocalUser')) {\n            [object]$__cmdletization_value = ${LocalUser}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemoteUser')) {\n            [object]$__cmdletization_value = ${RemoteUser}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemoteMachine')) {\n            [object]$__cmdletization_value = ${RemoteMachine}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteMachine'; ParameterType = 'System.String'; Bindings = 'In'; Value", "scriptBlockId": "66ea90b5-c136-486d-985d-cc2ad76dd8e1"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9048968Z", "eventRecordID": "184", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (11 of 23):\n= $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteMachine'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Authentication')) {\n            [object]$__cmdletization_value = ${Authentication}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Encryption')) {\n            [object]$__cmdletization_value = ${Encryption}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('OverrideBlockRules')) {\n            [object]$__cmdletization_value = ${OverrideBlockRules}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetFirewallRule' -Alias '*'\n        \n\nfunction Remove-NetFirewallRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]\n    ${Direction},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]\n    ${Action},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]\n    ${EdgeTraversalPolicy},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('LSM')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${LooseSourceMapping},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${LocalOnlyMapping},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Owner},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallApplicationFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceTypeFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallPortFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallSecurityFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallServiceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSet\n\nScriptBlock ID: 66ea90b5-c136-486d-985d-cc2ad76dd8e1\nPath:"}, "eventdata": {"messageNumber": "11", "messageTotal": "23", "scriptBlockText": "= $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteMachine'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Authentication')) {\n            [object]$__cmdletization_value = ${Authentication}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Encryption')) {\n            [object]$__cmdletization_value = ${Encryption}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('OverrideBlockRules')) {\n            [object]$__cmdletization_value = ${OverrideBlockRules}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetFirewallRule' -Alias '*'\n        \n\nfunction Remove-NetFirewallRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]\n    ${Direction},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]\n    ${Action},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]\n    ${EdgeTraversalPolicy},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('LSM')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${LooseSourceMapping},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${LocalOnlyMapping},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Owner},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallApplicationFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceTypeFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallPortFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallSecurityFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallServiceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSet", "scriptBlockId": "66ea90b5-c136-486d-985d-cc2ad76dd8e1"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9049222Z", "eventRecordID": "185", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (12 of 23):\nName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Direction})\n        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Action})\n        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EdgeTraversalPolicy})\n        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LooseSourceMapping})\n        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${\n\nScriptBlock ID: 66ea90b5-c136-486d-985d-cc2ad76dd8e1\nPath:"}, "eventdata": {"messageNumber": "12", "messageTotal": "23", "scriptBlockText": "Name='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Direction})\n        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Action})\n        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EdgeTraversalPolicy})\n        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LooseSourceMapping})\n        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${", "scriptBlockId": "66ea90b5-c136-486d-985d-cc2ad76dd8e1"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9049483Z", "eventRecordID": "186", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (13 of 23):\nLocalOnlyMapping})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Owner})\n        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetFirewallRule' -Alias '*'\n        \n\nfunction Rename-NetFirewallRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]\n    ${Direction},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]\n    ${Action},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]\n    ${EdgeTraversalPolicy},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('LSM')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${LooseSourceMapping},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${LocalOnlyMapping},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string\n\nScriptBlock ID: 66ea90b5-c136-486d-985d-cc2ad76dd8e1\nPath:"}, "eventdata": {"messageNumber": "13", "messageTotal": "23", "scriptBlockText": "LocalOnlyMapping})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Owner})\n        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetFirewallRule' -Alias '*'\n        \n\nfunction Rename-NetFirewallRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]\n    ${Direction},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]\n    ${Action},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]\n    ${EdgeTraversalPolicy},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('LSM')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${LooseSourceMapping},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${LocalOnlyMapping},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string", "scriptBlockId": "66ea90b5-c136-486d-985d-cc2ad76dd8e1"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9049715Z", "eventRecordID": "187", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (14 of 23):\n[]]\n    ${Owner},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallApplicationFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceTypeFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallPortFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallSecurityFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallServiceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true)]\n    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]\n    [string]\n    ${NewName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSet\n\nScriptBlock ID: 66ea90b5-c136-486d-985d-cc2ad76dd8e1\nPath:"}, "eventdata": {"messageNumber": "14", "messageTotal": "23", "scriptBlockText": "[]]\n    ${Owner},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallApplicationFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceTypeFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallPortFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallSecurityFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallServiceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true)]\n    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]\n    [string]\n    ${NewName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSet", "scriptBlockId": "66ea90b5-c136-486d-985d-cc2ad76dd8e1"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9049967Z", "eventRecordID": "188", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (15 of 23):\nName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Direction})\n        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Action})\n        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EdgeTraversalPolicy})\n        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LooseSourceMapping})\n        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalOnlyMapping})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Owner})\n        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdlet\n\nScriptBlock ID: 66ea90b5-c136-486d-985d-cc2ad76dd8e1\nPath:"}, "eventdata": {"messageNumber": "15", "messageTotal": "23", "scriptBlockText": "Name='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Direction})\n        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Action})\n        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EdgeTraversalPolicy})\n        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LooseSourceMapping})\n        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalOnlyMapping})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Owner})\n        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdlet", "scriptBlockId": "66ea90b5-c136-486d-985d-cc2ad76dd8e1"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9050232Z", "eventRecordID": "189", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (16 of 23):\nization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewName')) {\n            [object]$__cmdletization_value = ${NewName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Rename-NetFirewallRule' -Alias '*'\n        \n\nfunction Copy-NetFirewallRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]\n    ${Direction},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]\n    ${Action},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]\n    ${EdgeTraversalPolicy},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('LSM')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${LooseSourceMapping},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${LocalOnlyMapping},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Owner},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallApplicationFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceTypeFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallPortFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallSecurityFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallServiceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSet\n\nScriptBlock ID: 66ea90b5-c136-486d-985d-cc2ad76dd8e1\nPath:"}, "eventdata": {"messageNumber": "16", "messageTotal": "23", "scriptBlockText": "ization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewName')) {\n            [object]$__cmdletization_value = ${NewName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Rename-NetFirewallRule' -Alias '*'\n        \n\nfunction Copy-NetFirewallRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]\n    ${Direction},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]\n    ${Action},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]\n    ${EdgeTraversalPolicy},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('LSM')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${LooseSourceMapping},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${LocalOnlyMapping},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Owner},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallApplicationFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceTypeFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallPortFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallSecurityFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallServiceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSet", "scriptBlockId": "66ea90b5-c136-486d-985d-cc2ad76dd8e1"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9050463Z", "eventRecordID": "190", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (17 of 23):\nName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewPolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewGPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuild\n\nScriptBlock ID: 66ea90b5-c136-486d-985d-cc2ad76dd8e1\nPath:"}, "eventdata": {"messageNumber": "17", "messageTotal": "23", "scriptBlockText": "Name='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewPolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewGPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuild", "scriptBlockId": "66ea90b5-c136-486d-985d-cc2ad76dd8e1"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9050736Z", "eventRecordID": "191", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (18 of 23):\ner.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Direction})\n        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Action})\n        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EdgeTraversalPolicy})\n        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LooseSourceMapping})\n        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalOnlyMapping})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Owner})\n        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {\n            [object]$__cmdletization_value = ${NewPolicyStore}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {\n            [object]$__cmdletization_value = ${NewGPOSession}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewName')) {\n            [object]$__cmdl\n\nScriptBlock ID: 66ea90b5-c136-486d-985d-cc2ad76dd8e1\nPath:"}, "eventdata": {"messageNumber": "18", "messageTotal": "23", "scriptBlockText": "er.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Direction})\n        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Action})\n        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EdgeTraversalPolicy})\n        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LooseSourceMapping})\n        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalOnlyMapping})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Owner})\n        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {\n            [object]$__cmdletization_value = ${NewPolicyStore}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {\n            [object]$__cmdletization_value = ${NewGPOSession}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewName')) {\n            [object]$__cmdl", "scriptBlockId": "66ea90b5-c136-486d-985d-cc2ad76dd8e1"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9051080Z", "eventRecordID": "192", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (19 of 23):\netization_value = ${NewName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Copy-NetFirewallRule' -Alias '*'\n        \n\nfunction Enable-NetFirewallRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]\n    ${Direction},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]\n    ${Action},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]\n    ${EdgeTraversalPolicy},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('LSM')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${LooseSourceMapping},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${LocalOnlyMapping},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Owner},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallApplicationFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceTypeFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallPortFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallSecurityFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallServiceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAp\n\nScriptBlock ID: 66ea90b5-c136-486d-985d-cc2ad76dd8e1\nPath:"}, "eventdata": {"messageNumber": "19", "messageTotal": "23", "scriptBlockText": "etization_value = ${NewName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Copy-NetFirewallRule' -Alias '*'\n        \n\nfunction Enable-NetFirewallRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]\n    ${Direction},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]\n    ${Action},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]\n    ${EdgeTraversalPolicy},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('LSM')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${LooseSourceMapping},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${LocalOnlyMapping},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Owner},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallApplicationFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceTypeFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallPortFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallSecurityFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallServiceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAp", "scriptBlockId": "66ea90b5-c136-486d-985d-cc2ad76dd8e1"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9051319Z", "eventRecordID": "193", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (20 of 23):\nplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Direction})\n        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Action})\n        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EdgeTraversalPolicy})\n        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LooseSourceMapping})\n        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalOnlyMapping})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Owner})\n        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInter\n\nScriptBlock ID: 66ea90b5-c136-486d-985d-cc2ad76dd8e1\nPath:"}, "eventdata": {"messageNumber": "20", "messageTotal": "23", "scriptBlockText": "plicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Direction})\n        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Action})\n        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EdgeTraversalPolicy})\n        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LooseSourceMapping})\n        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalOnlyMapping})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Owner})\n        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInter", "scriptBlockId": "66ea90b5-c136-486d-985d-cc2ad76dd8e1"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9051608Z", "eventRecordID": "194", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (21 of 23):\nface', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Enable', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Enable-NetFirewallRule' -Alias '*'\n        \n\nfunction Disable-NetFirewallRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]\n    ${Direction},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]\n    ${Action},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]\n    ${EdgeTraversalPolicy},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('LSM')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${LooseSourceMapping},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${LocalOnlyMapping},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Owner},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallApplicationFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceTypeFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallPortFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n   \n\nScriptBlock ID: 66ea90b5-c136-486d-985d-cc2ad76dd8e1\nPath:"}, "eventdata": {"messageNumber": "21", "messageTotal": "23", "scriptBlockText": "face', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Enable', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Enable-NetFirewallRule' -Alias '*'\n        \n\nfunction Disable-NetFirewallRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]\n    ${Direction},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]\n    ${Action},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]\n    ${EdgeTraversalPolicy},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('LSM')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${LooseSourceMapping},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${LocalOnlyMapping},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Owner},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallApplicationFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceTypeFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallPortFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]\n    [ValidateNotNull()]\n    [ciminstance]", "scriptBlockId": "66ea90b5-c136-486d-985d-cc2ad76dd8e1"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9051875Z", "eventRecordID": "195", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (22 of 23):\n ${AssociatedNetFirewallSecurityFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallServiceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Direction})\n        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')\n    }\n    \n\nScriptBlock ID: 66ea90b5-c136-486d-985d-cc2ad76dd8e1\nPath:"}, "eventdata": {"messageNumber": "22", "messageTotal": "23", "scriptBlockText": "${AssociatedNetFirewallSecurityFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallServiceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Direction})\n        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')\n    }", "scriptBlockId": "66ea90b5-c136-486d-985d-cc2ad76dd8e1"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9052099Z", "eventRecordID": "196", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (23 of 23):\nif ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Action})\n        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EdgeTraversalPolicy})\n        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LooseSourceMapping})\n        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalOnlyMapping})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Owner})\n        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Disable', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Disable-NetFirewallRule' -Alias '*'\n        \n\n\nScriptBlock ID: 66ea90b5-c136-486d-985d-cc2ad76dd8e1\nPath:"}, "eventdata": {"messageNumber": "23", "messageTotal": "23", "scriptBlockText": "if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Action})\n        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EdgeTraversalPolicy})\n        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LooseSourceMapping})\n        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalOnlyMapping})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Owner})\n        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Disable', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Disable-NetFirewallRule' -Alias '*'", "scriptBlockId": "66ea90b5-c136-486d-985d-cc2ad76dd8e1"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9057770Z", "eventRecordID": "197", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 108\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 108\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9259887Z", "eventRecordID": "198", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 110\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 110\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9266016Z", "eventRecordID": "199", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"New-NetFirewallRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 112\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 112\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"New-NetFirewallRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9270060Z", "eventRecordID": "200", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Show-NetFirewallRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 114\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 114\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Show-NetFirewallRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9275902Z", "eventRecordID": "201", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetFirewallRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 116\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 116\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetFirewallRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9280019Z", "eventRecordID": "202", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetFirewallRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 118\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 118\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetFirewallRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9283957Z", "eventRecordID": "203", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetFirewallRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 120\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 120\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetFirewallRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9289575Z", "eventRecordID": "204", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Rename-NetFirewallRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 122\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 122\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Rename-NetFirewallRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9296265Z", "eventRecordID": "205", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Copy-NetFirewallRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 124\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 124\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Copy-NetFirewallRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9300285Z", "eventRecordID": "206", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Enable-NetFirewallRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 126\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 126\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Enable-NetFirewallRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:37.9308636Z", "eventRecordID": "207", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Disable-NetFirewallRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 128\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 128\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Disable-NetFirewallRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.0808511Z", "eventRecordID": "208", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (1 of 17):\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetConSecRule'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetIPsecRule\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    \n    param(\n    \n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ID','Name')]\n    [string]\n    ${IPsecRuleName},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [string]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Description},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Group},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]\n    ${Profile},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${Platform},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode]\n    ${Mode},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('SecIn')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]\n    ${InboundSecurity},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('SecOut')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]\n    ${OutboundSecurity},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${QuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Phase2AuthSet},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule]\n    ${KeyModule},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [bool]\n    ${AllowWatchKey},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [bool]\n    ${AllowSetKey},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${LocalTunnelEndpoint},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${RemoteTunnelEndpoint},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${RemoteTunnelHostname},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint32]\n    ${ForwardPathLifetime},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [bool]\n    ${EncryptedTunnelBypass},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [bool]\n    ${RequireAuthorization},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${User},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Machine},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${LocalAddress},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${RemoteAddress},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${LocalPort},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${RemotePort},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [WildcardPattern[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]\n    ${InterfaceType},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('GPOSession')) {\n          [object]$__cmdletization_value = ${GPOSession}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IPsecRuleName')) {\n          [object]$__cmdletization_value = ${IPsecRuleName}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DisplayName')) {\n          [object]$__cmdletization_value = ${DisplayName}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Description')) {\n          [object]$__cmdletization_value = ${Description}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Group')) {\n          [object]$__cmdletization_value = ${Group}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Enabled')) {\n          [object]$__cmdletization_value = ${Enabled}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Profile')) {\n          [object]$__cmdletization_value = ${Profile}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Platform')) {\n          [object]$__cmdletization_value = ${Platform}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Mode')) {\n          [object]$__cmdletization_value = ${Mode}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InboundSecurity')) {\n          [object]$__cmdletization_value = ${InboundSecurity}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('OutboundSecurity')) {\n          [object]$__cmdletization_value = ${OutboundSecurity}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet')) {\n          [object]$__cmdletization_value = ${QuickModeCryptoSet}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Phase1AuthSe\n\nScriptBlock ID: 65128610-e603-4667-b94f-f7077889aaad\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "17", "scriptBlockText": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetConSecRule'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetIPsecRule\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    \n    param(\n    \n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ID','Name')]\n    [string]\n    ${IPsecRuleName},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [string]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Description},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Group},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]\n    ${Profile},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${Platform},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode]\n    ${Mode},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('SecIn')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]\n    ${InboundSecurity},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('SecOut')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]\n    ${OutboundSecurity},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${QuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Phase2AuthSet},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule]\n    ${KeyModule},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [bool]\n    ${AllowWatchKey},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [bool]\n    ${AllowSetKey},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${LocalTunnelEndpoint},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${RemoteTunnelEndpoint},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${RemoteTunnelHostname},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint32]\n    ${ForwardPathLifetime},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [bool]\n    ${EncryptedTunnelBypass},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [bool]\n    ${RequireAuthorization},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${User},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Machine},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${LocalAddress},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${RemoteAddress},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${LocalPort},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${RemotePort},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [WildcardPattern[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]\n    ${InterfaceType},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('GPOSession')) {\n          [object]$__cmdletization_value = ${GPOSession}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IPsecRuleName')) {\n          [object]$__cmdletization_value = ${IPsecRuleName}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DisplayName')) {\n          [object]$__cmdletization_value = ${DisplayName}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Description')) {\n          [object]$__cmdletization_value = ${Description}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Group')) {\n          [object]$__cmdletization_value = ${Group}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Enabled')) {\n          [object]$__cmdletization_value = ${Enabled}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Profile')) {\n          [object]$__cmdletization_value = ${Profile}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Platform')) {\n          [object]$__cmdletization_value = ${Platform}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Mode')) {\n          [object]$__cmdletization_value = ${Mode}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InboundSecurity')) {\n          [object]$__cmdletization_value = ${InboundSecurity}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('OutboundSecurity')) {\n          [object]$__cmdletization_value = ${OutboundSecurity}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet')) {\n          [object]$__cmdletization_value = ${QuickModeCryptoSet}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Phase1AuthSe", "scriptBlockId": "65128610-e603-4667-b94f-f7077889aaad"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.0809097Z", "eventRecordID": "209", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (2 of 17):\nt')) {\n          [object]$__cmdletization_value = ${Phase1AuthSet}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Phase2AuthSet')) {\n          [object]$__cmdletization_value = ${Phase2AuthSet}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('KeyModule')) {\n          [object]$__cmdletization_value = ${KeyModule}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyModule'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyModule'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('AllowWatchKey')) {\n          [object]$__cmdletization_value = ${AllowWatchKey}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('AllowSetKey')) {\n          [object]$__cmdletization_value = ${AllowSetKey}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalTunnelEndpoint')) {\n          [object]$__cmdletization_value = ${LocalTunnelEndpoint}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemoteTunnelEndpoint')) {\n          [object]$__cmdletization_value = ${RemoteTunnelEndpoint}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname')) {\n          [object]$__cmdletization_value = ${RemoteTunnelHostname}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('ForwardPathLifetime')) {\n          [object]$__cmdletization_value = ${ForwardPathLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass')) {\n          [object]$__cmdletization_value = ${EncryptedTunnelBypass}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RequireAuthorization')) {\n          [object]$__cmdletization_value = ${RequireAuthorization}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('User')) {\n          [object]$__cmdletization_value = ${User}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Machine')) {\n          [object]$__cmdletization_value = ${Machine}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalAddress')) {\n          [object]$__cmdletization_value = ${LocalAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemoteAddress')) {\n          [object]$__cmdletization_value = ${RemoteAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Protocol')) {\n          [object]$__cmdletization_value = ${Protocol}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalPort')) {\n          [object]$__cmdletization_value = ${LocalPort}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemotePort')) {\n          [object]$__cmdletization_value = ${RemotePort}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {\n          [object]$__cmdletization_value = ${InterfaceAlias}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceType')) {\n          [object]$__cmdletization_value = ${InterfaceType}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetIPsecRule' -Alias '*'\n        \n\nfunction Show-NetIPsecRule\n{\n    [CmdletBinding(PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/NetSecurityDeepEnumElement')]\n    param(\n    \n    [Parameter(ParameterSetName='EnumerateFull1')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName\n\nScriptBlock ID: 65128610-e603-4667-b94f-f7077889aaad\nPath:"}, "eventdata": {"messageNumber": "2", "messageTotal": "17", "scriptBlockText": "t')) {\n          [object]$__cmdletization_value = ${Phase1AuthSet}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Phase2AuthSet')) {\n          [object]$__cmdletization_value = ${Phase2AuthSet}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('KeyModule')) {\n          [object]$__cmdletization_value = ${KeyModule}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyModule'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyModule'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('AllowWatchKey')) {\n          [object]$__cmdletization_value = ${AllowWatchKey}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('AllowSetKey')) {\n          [object]$__cmdletization_value = ${AllowSetKey}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalTunnelEndpoint')) {\n          [object]$__cmdletization_value = ${LocalTunnelEndpoint}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemoteTunnelEndpoint')) {\n          [object]$__cmdletization_value = ${RemoteTunnelEndpoint}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname')) {\n          [object]$__cmdletization_value = ${RemoteTunnelHostname}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('ForwardPathLifetime')) {\n          [object]$__cmdletization_value = ${ForwardPathLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass')) {\n          [object]$__cmdletization_value = ${EncryptedTunnelBypass}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RequireAuthorization')) {\n          [object]$__cmdletization_value = ${RequireAuthorization}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('User')) {\n          [object]$__cmdletization_value = ${User}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Machine')) {\n          [object]$__cmdletization_value = ${Machine}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalAddress')) {\n          [object]$__cmdletization_value = ${LocalAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemoteAddress')) {\n          [object]$__cmdletization_value = ${RemoteAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Protocol')) {\n          [object]$__cmdletization_value = ${Protocol}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalPort')) {\n          [object]$__cmdletization_value = ${LocalPort}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemotePort')) {\n          [object]$__cmdletization_value = ${RemotePort}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {\n          [object]$__cmdletization_value = ${InterfaceAlias}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceType')) {\n          [object]$__cmdletization_value = ${InterfaceType}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetIPsecRule' -Alias '*'\n        \n\nfunction Show-NetIPsecRule\n{\n    [CmdletBinding(PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/NetSecurityDeepEnumElement')]\n    param(\n    \n    [Parameter(ParameterSetName='EnumerateFull1')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName", "scriptBlockId": "65128610-e603-4667-b94f-f7077889aaad"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.0809581Z", "eventRecordID": "210", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (3 of 17):\n='EnumerateFull1')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='EnumerateFull1')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='EnumerateFull1')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='EnumerateFull1')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('GPOSession')) {\n          [object]$__cmdletization_value = ${GPOSession}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Dependents'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/NetSecurityDeepEnumElement'\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('EnumerateFull', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Show-NetIPsecRule' -Alias '*'\n        \n\nfunction Find-NetIPsecRule\n{\n    [CmdletBinding(PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]\n    param(\n    \n    [Parameter(ParameterSetName='Find2')]\n    [string]\n    ${LocalAddress},\n\n    [Parameter(ParameterSetName='Find2', Mandatory=$true)]\n    [string]\n    ${RemoteAddress},\n\n    [Parameter(ParameterSetName='Find2')]\n    [string]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='Find2')]\n    [uint16]\n    ${LocalPort},\n\n    [Parameter(ParameterSetName='Find2')]\n    [uint16]\n    ${RemotePort},\n\n    [Parameter(ParameterSetName='Find2')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Find2')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Find2')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalAddress')) {\n          [object]$__cmdletization_value = ${LocalAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemoteAddress')) {\n          [object]$__cmdletization_value = ${RemoteAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Protocol')) {\n          [object]$__cmdletization_value = ${Protocol}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalPort')) {\n          [object]$__cmdletization_value = ${LocalPort}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemotePort')) {\n          [object]$__cmdletization_value = ${RemotePort}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Find', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Find-NetIPsecRule' -Alias '*'\n        \n\nfunction Get-NetIPsecRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ID','Name')]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPsecRuleName},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]\n    ${Mode},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('SecIn')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]\n    ${InboundSecurity},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('SecOut')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]\n    ${OutboundSecurity},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${QuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase2AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]\n    ${KeyModule},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${AllowWatchKey},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${AllowSetKey},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${RemoteTunnelHostname},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ForwardPathLifetime},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${EncryptedTunnelBypass},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${RequireAuthorization},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${User},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Machine},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceTypeFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallPortFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeli\n\nScriptBlock ID: 65128610-e603-4667-b94f-f7077889aaad\nPath:"}, "eventdata": {"messageNumber": "3", "messageTotal": "17", "scriptBlockText": "='EnumerateFull1')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='EnumerateFull1')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='EnumerateFull1')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='EnumerateFull1')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('GPOSession')) {\n          [object]$__cmdletization_value = ${GPOSession}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Dependents'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/NetSecurityDeepEnumElement'\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('EnumerateFull', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Show-NetIPsecRule' -Alias '*'\n        \n\nfunction Find-NetIPsecRule\n{\n    [CmdletBinding(PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]\n    param(\n    \n    [Parameter(ParameterSetName='Find2')]\n    [string]\n    ${LocalAddress},\n\n    [Parameter(ParameterSetName='Find2', Mandatory=$true)]\n    [string]\n    ${RemoteAddress},\n\n    [Parameter(ParameterSetName='Find2')]\n    [string]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='Find2')]\n    [uint16]\n    ${LocalPort},\n\n    [Parameter(ParameterSetName='Find2')]\n    [uint16]\n    ${RemotePort},\n\n    [Parameter(ParameterSetName='Find2')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Find2')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Find2')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalAddress')) {\n          [object]$__cmdletization_value = ${LocalAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemoteAddress')) {\n          [object]$__cmdletization_value = ${RemoteAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Protocol')) {\n          [object]$__cmdletization_value = ${Protocol}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalPort')) {\n          [object]$__cmdletization_value = ${LocalPort}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemotePort')) {\n          [object]$__cmdletization_value = ${RemotePort}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Find', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Find-NetIPsecRule' -Alias '*'\n        \n\nfunction Get-NetIPsecRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ID','Name')]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPsecRuleName},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]\n    ${Mode},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('SecIn')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]\n    ${InboundSecurity},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('SecOut')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]\n    ${OutboundSecurity},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${QuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase2AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]\n    ${KeyModule},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${AllowWatchKey},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${AllowSetKey},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${RemoteTunnelHostname},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ForwardPathLifetime},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${EncryptedTunnelBypass},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${RequireAuthorization},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${User},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Machine},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceTypeFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallPortFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeli", "scriptBlockId": "65128610-e603-4667-b94f-f7077889aaad"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.0810204Z", "eventRecordID": "211", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (4 of 17):\nne=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase2AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase1AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecQuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPsecRuleName})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Mode})\n        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InboundSecurity})\n        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OutboundSecurity})\n        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${QuickModeCryptoSet})\n        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase1AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase2AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${KeyModule})\n        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AllowWatchKey})\n        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AllowSetKey})\n        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemoteTunnelHostname})\n        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForwardPathLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EncryptedTunnelBypass})\n        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RequireAuthorization})\n        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${User})\n        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Machine})\n        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery',\n\nScriptBlock ID: 65128610-e603-4667-b94f-f7077889aaad\nPath:"}, "eventdata": {"messageNumber": "4", "messageTotal": "17", "scriptBlockText": "ne=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase2AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase1AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecQuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPsecRuleName})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Mode})\n        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InboundSecurity})\n        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OutboundSecurity})\n        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${QuickModeCryptoSet})\n        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase1AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase2AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${KeyModule})\n        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AllowWatchKey})\n        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AllowSetKey})\n        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemoteTunnelHostname})\n        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForwardPathLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EncryptedTunnelBypass})\n        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RequireAuthorization})\n        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${User})\n        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Machine})\n        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery',", "scriptBlockId": "65128610-e603-4667-b94f-f7077889aaad"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.0810615Z", "eventRecordID": "212", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (5 of 17):\n 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPsecRule' -Alias '*'\n        \n\nfunction Set-NetIPsecRule\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ID','Name')]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPsecRuleName},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewDisplayName},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]\n    ${Profile},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${Platform},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode]\n    ${Mode},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('SecIn')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]\n    ${InboundSecurity},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('SecOut')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]\n    ${OutboundSecurity},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${QuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Phase2AuthSet},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule]\n    ${KeyModule},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [bool]\n    ${AllowWatchKey},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [bool]\n    ${AllowSetKey},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${LocalTunnelEndpoint},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${RemoteTunnelEndpoint},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${RemoteTunnelHostname},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${ForwardPathLifetime},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [bool]\n    ${EncryptedTunnelBypass},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [bool]\n    ${RequireAuthorization},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${User},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Machine},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${LocalAddress},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${RemoteAddress},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${LocalPort},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${RemotePort},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [WildcardPattern[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]\n    ${InterfaceType},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPsecRuleName})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByIPsecRuleName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {\n            [object]$__cmdletization_value = ${NewDisplayName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Description')) {\n            [object]$__cmdletization_value = ${Description}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Enabled')) {\n            [object]$__cmdletization_value = ${Enabled}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'En\n\nScriptBlock ID: 65128610-e603-4667-b94f-f7077889aaad\nPath:"}, "eventdata": {"messageNumber": "5", "messageTotal": "17", "scriptBlockText": "'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPsecRule' -Alias '*'\n        \n\nfunction Set-NetIPsecRule\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ID','Name')]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPsecRuleName},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewDisplayName},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]\n    ${Profile},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${Platform},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode]\n    ${Mode},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('SecIn')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]\n    ${InboundSecurity},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('SecOut')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]\n    ${OutboundSecurity},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${QuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Phase2AuthSet},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule]\n    ${KeyModule},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [bool]\n    ${AllowWatchKey},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [bool]\n    ${AllowSetKey},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${LocalTunnelEndpoint},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${RemoteTunnelEndpoint},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${RemoteTunnelHostname},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${ForwardPathLifetime},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [bool]\n    ${EncryptedTunnelBypass},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [bool]\n    ${RequireAuthorization},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${User},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Machine},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${LocalAddress},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${RemoteAddress},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${LocalPort},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${RemotePort},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [WildcardPattern[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]\n    ${InterfaceType},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPsecRuleName})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByIPsecRuleName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {\n            [object]$__cmdletization_value = ${NewDisplayName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Description')) {\n            [object]$__cmdletization_value = ${Description}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Enabled')) {\n            [object]$__cmdletization_value = ${Enabled}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'En", "scriptBlockId": "65128610-e603-4667-b94f-f7077889aaad"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.0811152Z", "eventRecordID": "213", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (6 of 17):\nabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Profile')) {\n            [object]$__cmdletization_value = ${Profile}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Platform')) {\n            [object]$__cmdletization_value = ${Platform}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Mode')) {\n            [object]$__cmdletization_value = ${Mode}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InboundSecurity')) {\n            [object]$__cmdletization_value = ${InboundSecurity}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('OutboundSecurity')) {\n            [object]$__cmdletization_value = ${OutboundSecurity}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet')) {\n            [object]$__cmdletization_value = ${QuickModeCryptoSet}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Phase1AuthSet')) {\n            [object]$__cmdletization_value = ${Phase1AuthSet}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Phase2AuthSet')) {\n            [object]$__cmdletization_value = ${Phase2AuthSet}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('KeyModule')) {\n            [object]$__cmdletization_value = ${KeyModule}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyModule'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyModule'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AllowWatchKey')) {\n            [object]$__cmdletization_value = ${AllowWatchKey}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AllowSetKey')) {\n            [object]$__cmdletization_value = ${AllowSetKey}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LocalTunnelEndpoint')) {\n            [object]$__cmdletization_value = ${LocalTunnelEndpoint}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemoteTunnelEndpoint')) {\n            [object]$__cmdletization_value = ${RemoteTunnelEndpoint}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname')) {\n            [object]$__cmdletization_value = ${RemoteTunnelHostname}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ForwardPathLifetime')) {\n            [object]$__cmdletization_value = ${ForwardPathLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass')) {\n            [object]$__cmdletization_value = ${EncryptedTunnelBypass}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RequireAuthorization')) {\n            [object]$__cmdletization_value = ${RequireAuthorization}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('User')) {\n            [object]$__cmdletization_value = ${User}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Machine')) {\n            [object]$__cmdletization_value = ${Machine}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LocalAddress')) {\n            [object]$__cmdletization_value = ${LocalAddress}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemoteAddress')) {\n            [object]$__cmdletization_value = ${RemoteAddress}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In';\n\nScriptBlock ID: 65128610-e603-4667-b94f-f7077889aaad\nPath:"}, "eventdata": {"messageNumber": "6", "messageTotal": "17", "scriptBlockText": "abled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Profile')) {\n            [object]$__cmdletization_value = ${Profile}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Platform')) {\n            [object]$__cmdletization_value = ${Platform}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Mode')) {\n            [object]$__cmdletization_value = ${Mode}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InboundSecurity')) {\n            [object]$__cmdletization_value = ${InboundSecurity}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('OutboundSecurity')) {\n            [object]$__cmdletization_value = ${OutboundSecurity}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet')) {\n            [object]$__cmdletization_value = ${QuickModeCryptoSet}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Phase1AuthSet')) {\n            [object]$__cmdletization_value = ${Phase1AuthSet}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Phase2AuthSet')) {\n            [object]$__cmdletization_value = ${Phase2AuthSet}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('KeyModule')) {\n            [object]$__cmdletization_value = ${KeyModule}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyModule'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyModule'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AllowWatchKey')) {\n            [object]$__cmdletization_value = ${AllowWatchKey}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AllowSetKey')) {\n            [object]$__cmdletization_value = ${AllowSetKey}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LocalTunnelEndpoint')) {\n            [object]$__cmdletization_value = ${LocalTunnelEndpoint}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemoteTunnelEndpoint')) {\n            [object]$__cmdletization_value = ${RemoteTunnelEndpoint}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname')) {\n            [object]$__cmdletization_value = ${RemoteTunnelHostname}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ForwardPathLifetime')) {\n            [object]$__cmdletization_value = ${ForwardPathLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass')) {\n            [object]$__cmdletization_value = ${EncryptedTunnelBypass}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RequireAuthorization')) {\n            [object]$__cmdletization_value = ${RequireAuthorization}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('User')) {\n            [object]$__cmdletization_value = ${User}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Machine')) {\n            [object]$__cmdletization_value = ${Machine}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LocalAddress')) {\n            [object]$__cmdletization_value = ${LocalAddress}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemoteAddress')) {\n            [object]$__cmdletization_value = ${RemoteAddress}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In';", "scriptBlockId": "65128610-e603-4667-b94f-f7077889aaad"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.0811689Z", "eventRecordID": "214", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (7 of 17):\n Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Protocol')) {\n            [object]$__cmdletization_value = ${Protocol}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LocalPort')) {\n            [object]$__cmdletization_value = ${LocalPort}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemotePort')) {\n            [object]$__cmdletization_value = ${RemotePort}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {\n            [object]$__cmdletization_value = ${InterfaceAlias}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InterfaceType')) {\n            [object]$__cmdletization_value = ${InterfaceType}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPsecRule' -Alias '*'\n        \n\nfunction Remove-NetIPsecRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ID','Name')]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPsecRuleName},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]\n    ${Mode},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('SecIn')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]\n    ${InboundSecurity},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('SecOut')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]\n    ${OutboundSecurity},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${QuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase2AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]\n    ${KeyModule},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${AllowWatchKey},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${AllowSetKey},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${RemoteTunnelHostname},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ForwardPathLifetime},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${EncryptedTunnelBypass},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${RequireAuthorization},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${User},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Machine},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceTypeFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallPortFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase2AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase1AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecQuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPh\n\nScriptBlock ID: 65128610-e603-4667-b94f-f7077889aaad\nPath:"}, "eventdata": {"messageNumber": "7", "messageTotal": "17", "scriptBlockText": "Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Protocol')) {\n            [object]$__cmdletization_value = ${Protocol}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LocalPort')) {\n            [object]$__cmdletization_value = ${LocalPort}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemotePort')) {\n            [object]$__cmdletization_value = ${RemotePort}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {\n            [object]$__cmdletization_value = ${InterfaceAlias}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InterfaceType')) {\n            [object]$__cmdletization_value = ${InterfaceType}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPsecRule' -Alias '*'\n        \n\nfunction Remove-NetIPsecRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ID','Name')]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPsecRuleName},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]\n    ${Mode},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('SecIn')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]\n    ${InboundSecurity},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('SecOut')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]\n    ${OutboundSecurity},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${QuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase2AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]\n    ${KeyModule},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${AllowWatchKey},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${AllowSetKey},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${RemoteTunnelHostname},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ForwardPathLifetime},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${EncryptedTunnelBypass},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${RequireAuthorization},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${User},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Machine},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceTypeFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallPortFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase2AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase1AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecQuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPh", "scriptBlockId": "65128610-e603-4667-b94f-f7077889aaad"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.0812170Z", "eventRecordID": "215", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (8 of 17):\nase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPsecRuleName})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Mode})\n        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InboundSecurity})\n        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OutboundSecurity})\n        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${QuickModeCryptoSet})\n        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase1AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase2AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${KeyModule})\n        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AllowWatchKey})\n        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AllowSetKey})\n        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemoteTunnelHostname})\n        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForwardPathLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EncryptedTunnelBypass})\n        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RequireAuthorization})\n        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${User})\n        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Machine})\n        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetIPsecRule' -Alias '*'\n        \n\nfunction Rename-NetIPsecRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ID','Name')]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPsecRuleName},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]\n    ${Mode},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('SecIn')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]\n    ${InboundSecurity},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('SecOut')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]\n    ${OutboundSecurity},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${QuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase2AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]\n    ${KeyModule},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${AllowWatchKey},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${AllowSetKey},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${RemoteTunnelHostname},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ForwardPathLifetime},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${EncryptedTunnelBypass},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${RequireAuthorization},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${User},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    $\n\nScriptBlock ID: 65128610-e603-4667-b94f-f7077889aaad\nPath:"}, "eventdata": {"messageNumber": "8", "messageTotal": "17", "scriptBlockText": "ase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPsecRuleName})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Mode})\n        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InboundSecurity})\n        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OutboundSecurity})\n        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${QuickModeCryptoSet})\n        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase1AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase2AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${KeyModule})\n        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AllowWatchKey})\n        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AllowSetKey})\n        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemoteTunnelHostname})\n        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForwardPathLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EncryptedTunnelBypass})\n        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RequireAuthorization})\n        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${User})\n        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Machine})\n        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetIPsecRule' -Alias '*'\n        \n\nfunction Rename-NetIPsecRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ID','Name')]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPsecRuleName},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]\n    ${Mode},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('SecIn')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]\n    ${InboundSecurity},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('SecOut')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]\n    ${OutboundSecurity},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${QuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase2AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]\n    ${KeyModule},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${AllowWatchKey},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${AllowSetKey},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${RemoteTunnelHostname},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ForwardPathLifetime},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${EncryptedTunnelBypass},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${RequireAuthorization},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${User},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    $", "scriptBlockId": "65128610-e603-4667-b94f-f7077889aaad"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.0812621Z", "eventRecordID": "216", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (9 of 17):\n{Machine},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceTypeFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallPortFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase2AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase1AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecQuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true)]\n    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]\n    [string]\n    ${NewName},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPsecRuleName})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Mode})\n        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InboundSecurity})\n        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OutboundSecurity})\n        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${QuickModeCryptoSet})\n        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase1AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase2AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${KeyModule})\n        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AllowWatchKey})\n        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AllowSetKey})\n        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemoteTunnelHostname})\n        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForwardPathLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EncryptedTunnelBypass})\n        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RequireAuthorization})\n        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${User})\n        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Machine})\n        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_quer\n\nScriptBlock ID: 65128610-e603-4667-b94f-f7077889aaad\nPath:"}, "eventdata": {"messageNumber": "9", "messageTotal": "17", "scriptBlockText": "{Machine},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceTypeFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallPortFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase2AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase1AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecQuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true)]\n    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]\n    [string]\n    ${NewName},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPsecRuleName})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Mode})\n        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InboundSecurity})\n        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OutboundSecurity})\n        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${QuickModeCryptoSet})\n        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase1AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase2AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${KeyModule})\n        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AllowWatchKey})\n        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AllowSetKey})\n        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemoteTunnelHostname})\n        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForwardPathLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EncryptedTunnelBypass})\n        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RequireAuthorization})\n        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${User})\n        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Machine})\n        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_quer", "scriptBlockId": "65128610-e603-4667-b94f-f7077889aaad"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.0813115Z", "eventRecordID": "217", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (10 of 17):\nyBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewName')) {\n            [object]$__cmdletization_value = ${NewName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Rename-NetIPsecRule' -Alias '*'\n        \n\nfunction Copy-NetIPsecRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ID','Name')]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPsecRuleName},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]\n    ${Mode},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('SecIn')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]\n    ${InboundSecurity},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('SecOut')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]\n    ${OutboundSecurity},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${QuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase2AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]\n    ${KeyModule},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${AllowWatchKey},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${AllowSetKey},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${RemoteTunnelHostname},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ForwardPathLifetime},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${EncryptedTunnelBypass},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${RequireAuthorization},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${User},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Machine},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceTypeFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallPortFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase2AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase1AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecQuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewPolicyStore},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewGPOSession}\n\nScriptBlock ID: 65128610-e603-4667-b94f-f7077889aaad\nPath:"}, "eventdata": {"messageNumber": "10", "messageTotal": "17", "scriptBlockText": "yBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewName')) {\n            [object]$__cmdletization_value = ${NewName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Rename-NetIPsecRule' -Alias '*'\n        \n\nfunction Copy-NetIPsecRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ID','Name')]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPsecRuleName},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]\n    ${Mode},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('SecIn')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]\n    ${InboundSecurity},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('SecOut')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]\n    ${OutboundSecurity},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${QuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase2AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]\n    ${KeyModule},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${AllowWatchKey},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${AllowSetKey},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${RemoteTunnelHostname},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ForwardPathLifetime},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${EncryptedTunnelBypass},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${RequireAuthorization},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${User},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Machine},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceTypeFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallPortFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase2AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase1AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecQuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewPolicyStore},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewGPOSession}", "scriptBlockId": "65128610-e603-4667-b94f-f7077889aaad"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.0813733Z", "eventRecordID": "218", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (11 of 17):\n,\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewName},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPsecRuleName})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Mode})\n        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InboundSecurity})\n        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OutboundSecurity})\n        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${QuickModeCryptoSet})\n        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase1AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase2AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${KeyModule})\n        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AllowWatchKey})\n        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AllowSetKey})\n        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemoteTunnelHostname})\n        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForwardPathLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EncryptedTunnelBypass})\n        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RequireAuthorization})\n        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${User})\n        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Machine})\n        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {\n            [object]$__cmdletization_value = ${NewPolicyStore}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewP\n\nScriptBlock ID: 65128610-e603-4667-b94f-f7077889aaad\nPath:"}, "eventdata": {"messageNumber": "11", "messageTotal": "17", "scriptBlockText": ",\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewName},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPsecRuleName})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Mode})\n        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InboundSecurity})\n        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OutboundSecurity})\n        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${QuickModeCryptoSet})\n        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase1AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase2AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${KeyModule})\n        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AllowWatchKey})\n        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AllowSetKey})\n        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemoteTunnelHostname})\n        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForwardPathLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EncryptedTunnelBypass})\n        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RequireAuthorization})\n        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${User})\n        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Machine})\n        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {\n            [object]$__cmdletization_value = ${NewPolicyStore}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewP", "scriptBlockId": "65128610-e603-4667-b94f-f7077889aaad"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.0814270Z", "eventRecordID": "219", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (12 of 17):\nolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {\n            [object]$__cmdletization_value = ${NewGPOSession}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewName')) {\n            [object]$__cmdletization_value = ${NewName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Copy-NetIPsecRule' -Alias '*'\n        \n\nfunction Enable-NetIPsecRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ID','Name')]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPsecRuleName},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]\n    ${Mode},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('SecIn')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]\n    ${InboundSecurity},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('SecOut')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]\n    ${OutboundSecurity},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${QuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase2AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]\n    ${KeyModule},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${AllowWatchKey},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${AllowSetKey},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${RemoteTunnelHostname},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ForwardPathLifetime},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${EncryptedTunnelBypass},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${RequireAuthorization},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${User},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Machine},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceTypeFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallPortFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase2AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase1AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecQuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPsecRuleName})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_\n\nScriptBlock ID: 65128610-e603-4667-b94f-f7077889aaad\nPath:"}, "eventdata": {"messageNumber": "12", "messageTotal": "17", "scriptBlockText": "olicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {\n            [object]$__cmdletization_value = ${NewGPOSession}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewName')) {\n            [object]$__cmdletization_value = ${NewName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Copy-NetIPsecRule' -Alias '*'\n        \n\nfunction Enable-NetIPsecRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ID','Name')]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPsecRuleName},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]\n    ${Mode},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('SecIn')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]\n    ${InboundSecurity},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('SecOut')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]\n    ${OutboundSecurity},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${QuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase2AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]\n    ${KeyModule},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${AllowWatchKey},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${AllowSetKey},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${RemoteTunnelHostname},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ForwardPathLifetime},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${EncryptedTunnelBypass},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${RequireAuthorization},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${User},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Machine},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceTypeFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallPortFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase2AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase1AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecQuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPsecRuleName})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_", "scriptBlockId": "65128610-e603-4667-b94f-f7077889aaad"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.0814812Z", "eventRecordID": "220", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (13 of 17):\nvalues, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Mode})\n        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InboundSecurity})\n        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OutboundSecurity})\n        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${QuickModeCryptoSet})\n        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase1AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase2AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${KeyModule})\n        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AllowWatchKey})\n        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AllowSetKey})\n        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemoteTunnelHostname})\n        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForwardPathLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EncryptedTunnelBypass})\n        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RequireAuthorization})\n        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${User})\n        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Machine})\n        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Enable', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Enable-NetIPsecRule' -Alias '*'\n        \n\nfunction Disable-NetIPsecRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ID','Name')]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPsecRuleName},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]\n    ${Mode},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('SecIn')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]\n    ${InboundSecurity},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('SecOut')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]\n    ${OutboundSecurity},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${QuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase2AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]\n    ${KeyModule},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${AllowWatchKey},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${AllowSetKey},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${RemoteTunnelHostname},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ForwardPathLifetime},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${EncryptedTunnelBypass},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${RequireAuthorization},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${User},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Machine},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceTypeFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallPortFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase2AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Manage\n\nScriptBlock ID: 65128610-e603-4667-b94f-f7077889aaad\nPath:"}, "eventdata": {"messageNumber": "13", "messageTotal": "17", "scriptBlockText": "values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Mode})\n        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InboundSecurity})\n        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OutboundSecurity})\n        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${QuickModeCryptoSet})\n        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase1AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase2AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${KeyModule})\n        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AllowWatchKey})\n        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AllowSetKey})\n        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemoteTunnelHostname})\n        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForwardPathLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EncryptedTunnelBypass})\n        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RequireAuthorization})\n        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${User})\n        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Machine})\n        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Enable', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Enable-NetIPsecRule' -Alias '*'\n        \n\nfunction Disable-NetIPsecRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ID','Name')]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPsecRuleName},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]\n    ${Mode},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('SecIn')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]\n    ${InboundSecurity},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('SecOut')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]\n    ${OutboundSecurity},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${QuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase2AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]\n    ${KeyModule},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${AllowWatchKey},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${AllowSetKey},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${RemoteTunnelHostname},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ForwardPathLifetime},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${EncryptedTunnelBypass},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${RequireAuthorization},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${User},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Machine},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceTypeFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallPortFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase2AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Manage", "scriptBlockId": "65128610-e603-4667-b94f-f7077889aaad"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.0815441Z", "eventRecordID": "221", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (14 of 17):\nment.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase1AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecQuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPsecRuleName})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Mode})\n        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InboundSecurity})\n        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OutboundSecurity})\n        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${QuickModeCryptoSet})\n        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase1AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase2AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${KeyModule})\n        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AllowWatchKey})\n        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AllowSetKey})\n        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemoteTunnelHostname})\n        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForwardPathLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EncryptedTunnelBypass})\n        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RequireAuthorization})\n        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${User})\n        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Machine})\n        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewa\n\nScriptBlock ID: 65128610-e603-4667-b94f-f7077889aaad\nPath:"}, "eventdata": {"messageNumber": "14", "messageTotal": "17", "scriptBlockText": "ment.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase1AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecQuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPsecRuleName})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Mode})\n        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InboundSecurity})\n        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OutboundSecurity})\n        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${QuickModeCryptoSet})\n        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase1AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase2AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${KeyModule})\n        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AllowWatchKey})\n        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AllowSetKey})\n        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemoteTunnelHostname})\n        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForwardPathLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EncryptedTunnelBypass})\n        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RequireAuthorization})\n        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${User})\n        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Machine})\n        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewa", "scriptBlockId": "65128610-e603-4667-b94f-f7077889aaad"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.0816076Z", "eventRecordID": "222", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (15 of 17):\nllProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Disable', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Disable-NetIPsecRule' -Alias '*'\n        \n\nfunction Sync-NetIPsecRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]\n    param(\n    \n    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ID','Name')]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPsecRuleName},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]\n    ${Mode},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('SecIn')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]\n    ${InboundSecurity},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('SecOut')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]\n    ${OutboundSecurity},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${QuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase2AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]\n    ${KeyModule},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${AllowWatchKey},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${AllowSetKey},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${RemoteTunnelHostname},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ForwardPathLifetime},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${EncryptedTunnelBypass},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${RequireAuthorization},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${User},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Machine},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceTypeFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallPortFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase2AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase1AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecQuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [ValidateNotNull()]\n    [ValidateNotNullOrEmpty()]\n    [string[]]\n    ${Servers},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [ValidateNotNull()]\n    [ValidateNotNullOrEmpty()]\n    [string[]]\n    ${Domains},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType]\n    ${EndpointType},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.AddressVersion]\n    ${AddressType},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${DnsServers},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter\n\nScriptBlock ID: 65128610-e603-4667-b94f-f7077889aaad\nPath:"}, "eventdata": {"messageNumber": "15", "messageTotal": "17", "scriptBlockText": "llProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Disable', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Disable-NetIPsecRule' -Alias '*'\n        \n\nfunction Sync-NetIPsecRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]\n    param(\n    \n    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ID','Name')]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPsecRuleName},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]\n    ${Mode},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('SecIn')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]\n    ${InboundSecurity},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('SecOut')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]\n    ${OutboundSecurity},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${QuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase2AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]\n    ${KeyModule},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${AllowWatchKey},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${AllowSetKey},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${RemoteTunnelHostname},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ForwardPathLifetime},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${EncryptedTunnelBypass},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${RequireAuthorization},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${User},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Machine},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallInterfaceTypeFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallPortFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase2AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase1AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecQuickModeCryptoSet},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [ValidateNotNull()]\n    [ValidateNotNullOrEmpty()]\n    [string[]]\n    ${Servers},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [ValidateNotNull()]\n    [ValidateNotNullOrEmpty()]\n    [string[]]\n    ${Domains},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType]\n    ${EndpointType},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.AddressVersion]\n    ${AddressType},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${DnsServers},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter", "scriptBlockId": "65128610-e603-4667-b94f-f7077889aaad"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.0816624Z", "eventRecordID": "223", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (16 of 17):\n(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPsecRuleName})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Mode})\n        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InboundSecurity})\n        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OutboundSecurity})\n        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${QuickModeCryptoSet})\n        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase1AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase2AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${KeyModule})\n        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AllowWatchKey})\n        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AllowSetKey})\n        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemoteTunnelHostname})\n        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForwardPathLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EncryptedTunnelBypass})\n        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RequireAuthorization})\n        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${User})\n        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Machine})\n        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Servers')) {\n            [object]$__cmdletization_value = ${Servers}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Servers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Servers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Domains')) {\n            [object]$__cmdletization_value = ${Domains}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Domains'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Domains'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('EndpointType')) {\n            [object]$__cmdletization_value = ${EndpointType}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AddressType')) {\n            [object]$__cmdletization_value = ${AddressType}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.AddressVersion'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.AddressVersion'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Output'\n\nScriptBlock ID: 65128610-e603-4667-b94f-f7077889aaad\nPath:"}, "eventdata": {"messageNumber": "16", "messageTotal": "17", "scriptBlockText": "(ParameterSetName='ByIPsecRuleName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPsecRuleName})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Mode})\n        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InboundSecurity})\n        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OutboundSecurity})\n        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${QuickModeCryptoSet})\n        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase1AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase2AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${KeyModule})\n        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AllowWatchKey})\n        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AllowSetKey})\n        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemoteTunnelHostname})\n        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForwardPathLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EncryptedTunnelBypass})\n        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RequireAuthorization})\n        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${User})\n        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Machine})\n        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Servers')) {\n            [object]$__cmdletization_value = ${Servers}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Servers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Servers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Domains')) {\n            [object]$__cmdletization_value = ${Domains}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Domains'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Domains'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('EndpointType')) {\n            [object]$__cmdletization_value = ${EndpointType}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AddressType')) {\n            [object]$__cmdletization_value = ${AddressType}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.AddressVersion'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.AddressVersion'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Output'", "scriptBlockId": "65128610-e603-4667-b94f-f7077889aaad"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.0817053Z", "eventRecordID": "224", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (17 of 17):\n; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DnsServers')) {\n            [object]$__cmdletization_value = ${DnsServers}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DnsServers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DnsServers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SyncPolicyDelta', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $false\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Sync-NetIPsecRule' -Alias '*'\n        \n\nfunction Update-NetIPsecRule\n{\n    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]\n    param(\n    \n    [Parameter(ParameterSetName='Query (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ID','Name')]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPsecRuleName},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='Query (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.ChangeAction]\n    ${Action},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [string[]]\n    ${IPv6Addresses},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [string[]]\n    ${IPv4Addresses},\n\n    [Parameter(ParameterSetName='Query (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType]\n    ${EndpointType},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPsecRuleName})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Action')) {\n            [object]$__cmdletization_value = ${Action}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.ChangeAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.ChangeAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IPv6Addresses')) {\n            [object]$__cmdletization_value = ${IPv6Addresses}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPv6Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPv6Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IPv4Addresses')) {\n            [object]$__cmdletization_value = ${IPv4Addresses}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPv4Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPv4Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('EndpointType')) {\n            [object]$__cmdletization_value = ${EndpointType}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PassThru')) {\n            [object]$__cmdletization_value = ${PassThru}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PassThru'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PassThru'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Output'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetPolicyDelta', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $false\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Update-NetIPsecRule' -Alias '*'\n        \n\n\nScriptBlock ID: 65128610-e603-4667-b94f-f7077889aaad\nPath:"}, "eventdata": {"messageNumber": "17", "messageTotal": "17", "scriptBlockText": "; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DnsServers')) {\n            [object]$__cmdletization_value = ${DnsServers}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DnsServers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DnsServers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SyncPolicyDelta', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $false\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Sync-NetIPsecRule' -Alias '*'\n        \n\nfunction Update-NetIPsecRule\n{\n    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]\n    param(\n    \n    [Parameter(ParameterSetName='Query (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ID','Name')]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPsecRuleName},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='Query (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.ChangeAction]\n    ${Action},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [string[]]\n    ${IPv6Addresses},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [string[]]\n    ${IPv4Addresses},\n\n    [Parameter(ParameterSetName='Query (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType]\n    ${EndpointType},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPsecRuleName})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Action')) {\n            [object]$__cmdletization_value = ${Action}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.ChangeAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.ChangeAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IPv6Addresses')) {\n            [object]$__cmdletization_value = ${IPv6Addresses}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPv6Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPv6Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IPv4Addresses')) {\n            [object]$__cmdletization_value = ${IPv4Addresses}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPv4Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPv4Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('EndpointType')) {\n            [object]$__cmdletization_value = ${EndpointType}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PassThru')) {\n            [object]$__cmdletization_value = ${PassThru}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PassThru'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PassThru'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Output'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetPolicyDelta', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $false\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Update-NetIPsecRule' -Alias '*'", "scriptBlockId": "65128610-e603-4667-b94f-f7077889aaad"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.0822677Z", "eventRecordID": "225", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 130\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 130\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.0826774Z", "eventRecordID": "226", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 132\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 132\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.0830860Z", "eventRecordID": "227", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"New-NetIPsecRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 134\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 134\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"New-NetIPsecRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.0834745Z", "eventRecordID": "228", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Show-NetIPsecRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 136\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 136\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Show-NetIPsecRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.0838713Z", "eventRecordID": "229", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Find-NetIPsecRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 138\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 138\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Find-NetIPsecRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.0842405Z", "eventRecordID": "230", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPsecRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 140\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 140\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPsecRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.0846740Z", "eventRecordID": "231", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetIPsecRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 142\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 142\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetIPsecRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.0850524Z", "eventRecordID": "232", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetIPsecRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 144\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 144\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetIPsecRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.0854284Z", "eventRecordID": "233", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Rename-NetIPsecRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 146\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 146\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Rename-NetIPsecRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.0912794Z", "eventRecordID": "234", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Copy-NetIPsecRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 148\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 148\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Copy-NetIPsecRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.0918018Z", "eventRecordID": "235", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Enable-NetIPsecRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 150\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 150\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Enable-NetIPsecRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.0922054Z", "eventRecordID": "236", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Disable-NetIPsecRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 152\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 152\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Disable-NetIPsecRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.0926117Z", "eventRecordID": "237", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Sync-NetIPsecRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 154\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 154\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Sync-NetIPsecRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.0929792Z", "eventRecordID": "238", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Update-NetIPsecRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 156\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 156\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Update-NetIPsecRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.2152020Z", "eventRecordID": "239", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (1 of 10):\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetMainModeRule'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetIPsecMainModeRule\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    \n    param(\n    \n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('ID')]\n    [string]\n    ${Name},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [string]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Description},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Group},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]\n    ${Profile},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${Platform},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${MainModeCryptoSet},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${LocalAddress},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${RemoteAddress},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('GPOSession')) {\n          [object]$__cmdletization_value = ${GPOSession}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Name')) {\n          [object]$__cmdletization_value = ${Name}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DisplayName')) {\n          [object]$__cmdletization_value = ${DisplayName}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Description')) {\n          [object]$__cmdletization_value = ${Description}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Group')) {\n          [object]$__cmdletization_value = ${Group}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Enabled')) {\n          [object]$__cmdletization_value = ${Enabled}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Profile')) {\n          [object]$__cmdletization_value = ${Profile}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Platform')) {\n          [object]$__cmdletization_value = ${Platform}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('MainModeCryptoSet')) {\n          [object]$__cmdletization_value = ${MainModeCryptoSet}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Phase1AuthSet')) {\n          [object]$__cmdletization_value = ${Phase1AuthSet}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalAddress')) {\n          [object]$__cmdletization_value = ${LocalAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemoteAddress')) {\n          [object]$__cmdletization_value = ${RemoteAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'c\n\nScriptBlock ID: 37c41013-822e-4777-85a7-4cf0b39501a6\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "10", "scriptBlockText": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetMainModeRule'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetIPsecMainModeRule\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    \n    param(\n    \n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('ID')]\n    [string]\n    ${Name},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [string]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Description},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Group},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]\n    ${Profile},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${Platform},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${MainModeCryptoSet},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${LocalAddress},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string[]]\n    ${RemoteAddress},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('GPOSession')) {\n          [object]$__cmdletization_value = ${GPOSession}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Name')) {\n          [object]$__cmdletization_value = ${Name}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DisplayName')) {\n          [object]$__cmdletization_value = ${DisplayName}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Description')) {\n          [object]$__cmdletization_value = ${Description}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Group')) {\n          [object]$__cmdletization_value = ${Group}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Enabled')) {\n          [object]$__cmdletization_value = ${Enabled}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Profile')) {\n          [object]$__cmdletization_value = ${Profile}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Platform')) {\n          [object]$__cmdletization_value = ${Platform}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('MainModeCryptoSet')) {\n          [object]$__cmdletization_value = ${MainModeCryptoSet}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Phase1AuthSet')) {\n          [object]$__cmdletization_value = ${Phase1AuthSet}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalAddress')) {\n          [object]$__cmdletization_value = ${LocalAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemoteAddress')) {\n          [object]$__cmdletization_value = ${RemoteAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'c", "scriptBlockId": "37c41013-822e-4777-85a7-4cf0b39501a6"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.2152262Z", "eventRecordID": "240", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (2 of 10):\nim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetIPsecMainModeRule' -Alias '*'\n        \n\nfunction Get-NetIPsecMainModeRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${MainModeCryptoSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase1AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeCryptoSet},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MainModeCryptoSet})\n        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase1AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRec\n\nScriptBlock ID: 37c41013-822e-4777-85a7-4cf0b39501a6\nPath:"}, "eventdata": {"messageNumber": "2", "messageTotal": "10", "scriptBlockText": "im:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetIPsecMainModeRule' -Alias '*'\n        \n\nfunction Get-NetIPsecMainModeRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${MainModeCryptoSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase1AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeCryptoSet},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MainModeCryptoSet})\n        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase1AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRec", "scriptBlockId": "37c41013-822e-4777-85a7-4cf0b39501a6"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.2152532Z", "eventRecordID": "241", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (3 of 10):\nord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPsecMainModeRule' -Alias '*'\n        \n\nfunction Set-NetIPsecMainModeRule\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewDisplayName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]\n    ${Profile},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${Platform},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${MainModeCryptoSet},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${LocalAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${RemoteAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {\n            [object]$__cmdletization_value = ${NewDisplayName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Description')) {\n            [object]$__cmdletization_value = ${Description}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Enabled')) {\n            [object]$__cmdletization_value = ${Enabled}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Profile')) {\n            [object]$__cmdletization_value = ${Profile}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Platform')) {\n            [object]$__cmdletization_value = ${Platform}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MainModeCryptoSet')) {\n            [object]$__cmdletization_value = ${MainModeCryptoSet}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Phase1AuthSet')) {\n            [object]$__cmdletization_value = ${Phase1AuthSet}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; V\n\nScriptBlock ID: 37c41013-822e-4777-85a7-4cf0b39501a6\nPath:"}, "eventdata": {"messageNumber": "3", "messageTotal": "10", "scriptBlockText": "ord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPsecMainModeRule' -Alias '*'\n        \n\nfunction Set-NetIPsecMainModeRule\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewDisplayName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]\n    ${Profile},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${Platform},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${MainModeCryptoSet},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${LocalAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${RemoteAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {\n            [object]$__cmdletization_value = ${NewDisplayName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Description')) {\n            [object]$__cmdletization_value = ${Description}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Enabled')) {\n            [object]$__cmdletization_value = ${Enabled}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Profile')) {\n            [object]$__cmdletization_value = ${Profile}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Platform')) {\n            [object]$__cmdletization_value = ${Platform}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MainModeCryptoSet')) {\n            [object]$__cmdletization_value = ${MainModeCryptoSet}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Phase1AuthSet')) {\n            [object]$__cmdletization_value = ${Phase1AuthSet}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; V", "scriptBlockId": "37c41013-822e-4777-85a7-4cf0b39501a6"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.2152766Z", "eventRecordID": "242", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (4 of 10):\nalue = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LocalAddress')) {\n            [object]$__cmdletization_value = ${LocalAddress}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemoteAddress')) {\n            [object]$__cmdletization_value = ${RemoteAddress}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPsecMainModeRule' -Alias '*'\n        \n\nfunction Remove-NetIPsecMainModeRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${MainModeCryptoSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase1AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeCryptoSet},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MainModeCryptoSet})\n        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase1AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Polic\n\nScriptBlock ID: 37c41013-822e-4777-85a7-4cf0b39501a6\nPath:"}, "eventdata": {"messageNumber": "4", "messageTotal": "10", "scriptBlockText": "alue = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LocalAddress')) {\n            [object]$__cmdletization_value = ${LocalAddress}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemoteAddress')) {\n            [object]$__cmdletization_value = ${RemoteAddress}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPsecMainModeRule' -Alias '*'\n        \n\nfunction Remove-NetIPsecMainModeRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${MainModeCryptoSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase1AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeCryptoSet},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MainModeCryptoSet})\n        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase1AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Polic", "scriptBlockId": "37c41013-822e-4777-85a7-4cf0b39501a6"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.2153016Z", "eventRecordID": "243", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (5 of 10):\nyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetIPsecMainModeRule' -Alias '*'\n        \n\nfunction Rename-NetIPsecMainModeRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${MainModeCryptoSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase1AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeCryptoSet},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true)]\n    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]\n    [string]\n    ${NewName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Gr\n\nScriptBlock ID: 37c41013-822e-4777-85a7-4cf0b39501a6\nPath:"}, "eventdata": {"messageNumber": "5", "messageTotal": "10", "scriptBlockText": "yStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetIPsecMainModeRule' -Alias '*'\n        \n\nfunction Rename-NetIPsecMainModeRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${MainModeCryptoSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase1AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeCryptoSet},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true)]\n    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]\n    [string]\n    ${NewName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Gr", "scriptBlockId": "37c41013-822e-4777-85a7-4cf0b39501a6"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.2153230Z", "eventRecordID": "244", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (6 of 10):\noup})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MainModeCryptoSet})\n        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase1AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewName')) {\n            [object]$__cmdletization_value = ${NewName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Rename-NetIPsecMainModeRule' -Alias '*'\n        \n\nfunction Copy-NetIPsecMainModeRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${MainModeCryptoSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase1AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeCryptoSet},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewPolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewGPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSe\n\nScriptBlock ID: 37c41013-822e-4777-85a7-4cf0b39501a6\nPath:"}, "eventdata": {"messageNumber": "6", "messageTotal": "10", "scriptBlockText": "oup})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MainModeCryptoSet})\n        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase1AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewName')) {\n            [object]$__cmdletization_value = ${NewName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Rename-NetIPsecMainModeRule' -Alias '*'\n        \n\nfunction Copy-NetIPsecMainModeRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${MainModeCryptoSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase1AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeCryptoSet},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewPolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewGPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSe", "scriptBlockId": "37c41013-822e-4777-85a7-4cf0b39501a6"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.2153440Z", "eventRecordID": "245", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (7 of 10):\ntName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MainModeCryptoSet})\n        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase1AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {\n            [object]$__cmdletization_value = ${NewPolicyStore}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {\n            [object]$__cmdletization_value = ${NewGPOSession}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewName')) {\n            [object]$__cmdletization_value = ${NewName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Copy-NetIPsecMainModeRule' -Alias '*'\n        \n\nfunction Enable-NetIPsecMainModeRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${MainModeCryptoSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(\n\nScriptBlock ID: 37c41013-822e-4777-85a7-4cf0b39501a6\nPath:"}, "eventdata": {"messageNumber": "7", "messageTotal": "10", "scriptBlockText": "tName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MainModeCryptoSet})\n        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase1AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {\n            [object]$__cmdletization_value = ${NewPolicyStore}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {\n            [object]$__cmdletization_value = ${NewGPOSession}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewName')) {\n            [object]$__cmdletization_value = ${NewName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Copy-NetIPsecMainModeRule' -Alias '*'\n        \n\nfunction Enable-NetIPsecMainModeRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${MainModeCryptoSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(", "scriptBlockId": "37c41013-822e-4777-85a7-4cf0b39501a6"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.2153648Z", "eventRecordID": "246", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (8 of 10):\nParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase1AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeCryptoSet},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MainModeCryptoSet})\n        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase1AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Enable', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Enable-NetIPsecMainModeRule' -Alias '*'\n        \n\nfunction Disable-NetIPsecMainModeRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [Validate\n\nScriptBlock ID: 37c41013-822e-4777-85a7-4cf0b39501a6\nPath:"}, "eventdata": {"messageNumber": "8", "messageTotal": "10", "scriptBlockText": "ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase1AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeCryptoSet},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MainModeCryptoSet})\n        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase1AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Enable', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Enable-NetIPsecMainModeRule' -Alias '*'\n        \n\nfunction Disable-NetIPsecMainModeRule\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [Validate", "scriptBlockId": "37c41013-822e-4777-85a7-4cf0b39501a6"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.2153855Z", "eventRecordID": "247", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (9 of 10):\nNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${MainModeCryptoSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase1AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeCryptoSet},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MainModeCryptoSet})\n        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase1AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Disable', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) \n\nScriptBlock ID: 37c41013-822e-4777-85a7-4cf0b39501a6\nPath:"}, "eventdata": {"messageNumber": "9", "messageTotal": "10", "scriptBlockText": "NotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${MainModeCryptoSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Phase1AuthSet},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallAddressFilter},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallProfile},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecPhase1AuthSet},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeCryptoSet},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Enabled})\n        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MainModeCryptoSet})\n        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Phase1AuthSet})\n        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Disable', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject'))", "scriptBlockId": "37c41013-822e-4777-85a7-4cf0b39501a6"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.2153907Z", "eventRecordID": "248", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (10 of 10):\n{\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Disable-NetIPsecMainModeRule' -Alias '*'\n        \n\n\nScriptBlock ID: 37c41013-822e-4777-85a7-4cf0b39501a6\nPath:"}, "eventdata": {"messageNumber": "10", "messageTotal": "10", "scriptBlockText": "{\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Disable-NetIPsecMainModeRule' -Alias '*'", "scriptBlockId": "37c41013-822e-4777-85a7-4cf0b39501a6"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.2159066Z", "eventRecordID": "249", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 158\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 158\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.2162448Z", "eventRecordID": "250", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 160\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 160\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.2165942Z", "eventRecordID": "251", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"New-NetIPsecMainModeRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 162\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 162\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"New-NetIPsecMainModeRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.2169247Z", "eventRecordID": "252", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPsecMainModeRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 164\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 164\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPsecMainModeRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.2172449Z", "eventRecordID": "253", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetIPsecMainModeRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 166\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 166\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetIPsecMainModeRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.2207524Z", "eventRecordID": "254", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetIPsecMainModeRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 168\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 168\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetIPsecMainModeRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.2212728Z", "eventRecordID": "255", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Rename-NetIPsecMainModeRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 170\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 170\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Rename-NetIPsecMainModeRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.2216087Z", "eventRecordID": "256", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Copy-NetIPsecMainModeRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 172\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 172\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Copy-NetIPsecMainModeRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.2219845Z", "eventRecordID": "257", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Enable-NetIPsecMainModeRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 174\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 174\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Enable-NetIPsecMainModeRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.2224304Z", "eventRecordID": "258", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Disable-NetIPsecMainModeRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 176\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 176\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Disable-NetIPsecMainModeRule\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.2506022Z", "eventRecordID": "259", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (1 of 1):\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetAddressFilter'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetFirewallAddressFilter\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallRule},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByAddress', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleFilterByAddress', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleFilterByAddress', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallAddressFilter.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetFirewallAddressFilter' -Alias '*'\n        \n\nfunction Set-NetFirewallAddressFilter\n{\n    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('LocalIP')]\n    [string[]]\n    ${LocalAddress},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('RemoteIP')]\n    [string[]]\n    ${RemoteAddress},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LocalAddress')) {\n            [object]$__cmdletization_value = ${LocalAddress}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemoteAddress')) {\n            [object]$__cmdletization_value = ${RemoteAddress}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallAddressFilter.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetFirewallAddressFilter' -Alias '*'\n        \n\n\nScriptBlock ID: 1d4522b2-5776-4158-9a4b-6bddaa500832\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "1", "scriptBlockText": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetAddressFilter'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetFirewallAddressFilter\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallRule},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByAddress', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleFilterByAddress', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleFilterByAddress', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallAddressFilter.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetFirewallAddressFilter' -Alias '*'\n        \n\nfunction Set-NetFirewallAddressFilter\n{\n    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetAddressFilter')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('LocalIP')]\n    [string[]]\n    ${LocalAddress},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('RemoteIP')]\n    [string[]]\n    ${RemoteAddress},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LocalAddress')) {\n            [object]$__cmdletization_value = ${LocalAddress}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemoteAddress')) {\n            [object]$__cmdletization_value = ${RemoteAddress}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallAddressFilter.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetFirewallAddressFilter' -Alias '*'", "scriptBlockId": "1d4522b2-5776-4158-9a4b-6bddaa500832"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.2519772Z", "eventRecordID": "260", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 178\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 178\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.2528851Z", "eventRecordID": "261", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 180\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 180\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.2535119Z", "eventRecordID": "262", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetFirewallAddressFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 182\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 182\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetFirewallAddressFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.2538617Z", "eventRecordID": "263", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetFirewallAddressFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 184\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 184\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetFirewallAddressFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.2999408Z", "eventRecordID": "264", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (1 of 1):\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetApplicationFilter'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetFirewallApplicationFilter\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Program},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Package},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Program') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Program})\n        $__cmdletization_queryBuilder.FilterByProperty('AppPath', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Package') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Package})\n        $__cmdletization_queryBuilder.FilterByProperty('Package', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByApplication', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallApplicationFilter.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetFirewallApplicationFilter' -Alias '*'\n        \n\nfunction Set-NetFirewallApplicationFilter\n{\n    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetApplicationFilter')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Program},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Package},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Program')) {\n            [object]$__cmdletization_value = ${Program}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AppPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AppPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Package')) {\n            [object]$__cmdletization_value = ${Package}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallApplicationFilter.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetFirewallApplicationFilter' -Alias '*'\n        \n\n\nScriptBlock ID: ed5d2fc4-48c8-4ed1-b0a2-a12fa92ec0cd\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "1", "scriptBlockText": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetApplicationFilter'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetFirewallApplicationFilter\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Program},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Package},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Program') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Program})\n        $__cmdletization_queryBuilder.FilterByProperty('AppPath', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Package') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Package})\n        $__cmdletization_queryBuilder.FilterByProperty('Package', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByApplication', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallApplicationFilter.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetFirewallApplicationFilter' -Alias '*'\n        \n\nfunction Set-NetFirewallApplicationFilter\n{\n    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetApplicationFilter')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Program},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Package},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Program')) {\n            [object]$__cmdletization_value = ${Program}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AppPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AppPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Package')) {\n            [object]$__cmdletization_value = ${Package}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallApplicationFilter.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetFirewallApplicationFilter' -Alias '*'", "scriptBlockId": "ed5d2fc4-48c8-4ed1-b0a2-a12fa92ec0cd"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.3004727Z", "eventRecordID": "265", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 186\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 186\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.3012732Z", "eventRecordID": "266", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 188\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 188\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.3022102Z", "eventRecordID": "267", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetFirewallApplicationFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 190\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 190\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetFirewallApplicationFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.3027916Z", "eventRecordID": "268", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetFirewallApplicationFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 192\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 192\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetFirewallApplicationFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.3381469Z", "eventRecordID": "269", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (1 of 1):\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetInterfaceFilter'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetFirewallInterfaceFilter\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallRule},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByInterface', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleFilterByInterface', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallInterfaceFilter.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetFirewallInterfaceFilter' -Alias '*'\n        \n\nfunction Set-NetFirewallInterfaceFilter\n{\n    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetInterfaceFilter')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {\n            [object]$__cmdletization_value = ${InterfaceAlias}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallInterfaceFilter.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetFirewallInterfaceFilter' -Alias '*'\n        \n\n\nScriptBlock ID: f2ad1df8-a449-4d2c-821a-f4dad3033dc9\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "1", "scriptBlockText": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetInterfaceFilter'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetFirewallInterfaceFilter\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallRule},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByInterface', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleFilterByInterface', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallInterfaceFilter.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetFirewallInterfaceFilter' -Alias '*'\n        \n\nfunction Set-NetFirewallInterfaceFilter\n{\n    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetInterfaceFilter')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {\n            [object]$__cmdletization_value = ${InterfaceAlias}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallInterfaceFilter.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetFirewallInterfaceFilter' -Alias '*'", "scriptBlockId": "f2ad1df8-a449-4d2c-821a-f4dad3033dc9"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.3387399Z", "eventRecordID": "270", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 194\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 194\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.3391293Z", "eventRecordID": "271", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 196\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 196\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.3396055Z", "eventRecordID": "272", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetFirewallInterfaceFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 198\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 198\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetFirewallInterfaceFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.3400987Z", "eventRecordID": "273", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetFirewallInterfaceFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 200\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 200\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetFirewallInterfaceFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.3708141Z", "eventRecordID": "274", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (1 of 1):\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetInterfaceTypeFilter'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetFirewallInterfaceTypeFilter\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType[]]\n    ${InterfaceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallRule},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('InterfaceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceType})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallInterfaceTypeFilter.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetFirewallInterfaceTypeFilter' -Alias '*'\n        \n\nfunction Set-NetFirewallInterfaceTypeFilter\n{\n    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetInterfaceTypeFilter')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]\n    ${InterfaceType},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InterfaceType')) {\n            [object]$__cmdletization_value = ${InterfaceType}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallInterfaceTypeFilter.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetFirewallInterfaceTypeFilter' -Alias '*'\n        \n\n\nScriptBlock ID: dcf11935-c47f-426c-b702-fe3bb044a56c\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "1", "scriptBlockText": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetInterfaceTypeFilter'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetFirewallInterfaceTypeFilter\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType[]]\n    ${InterfaceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallRule},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('InterfaceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceType})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallInterfaceTypeFilter.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetFirewallInterfaceTypeFilter' -Alias '*'\n        \n\nfunction Set-NetFirewallInterfaceTypeFilter\n{\n    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetInterfaceTypeFilter')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]\n    ${InterfaceType},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InterfaceType')) {\n            [object]$__cmdletization_value = ${InterfaceType}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallInterfaceTypeFilter.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetFirewallInterfaceTypeFilter' -Alias '*'", "scriptBlockId": "dcf11935-c47f-426c-b702-fe3bb044a56c"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.3714034Z", "eventRecordID": "275", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 202\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 202\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.3717603Z", "eventRecordID": "276", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 204\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 204\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.3721566Z", "eventRecordID": "277", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetFirewallInterfaceTypeFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 206\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 206\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetFirewallInterfaceTypeFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.3725157Z", "eventRecordID": "278", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetFirewallInterfaceTypeFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 208\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 208\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetFirewallInterfaceTypeFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.4011234Z", "eventRecordID": "279", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (1 of 2):\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetFirewallSecurityFilter\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication[]]\n    ${Authentication},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption[]]\n    ${Encryption},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${OverrideBlockRules},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${LocalUser},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${RemoteUser},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${RemoteMachine},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Authentication') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Authentication})\n        $__cmdletization_queryBuilder.FilterByProperty('Authentication', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Encryption') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Encryption})\n        $__cmdletization_queryBuilder.FilterByProperty('Encryption', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OverrideBlockRules') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OverrideBlockRules})\n        $__cmdletization_queryBuilder.FilterByProperty('OverrideBlockRules', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalUser') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalUser})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalUsers', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemoteUser') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemoteUser})\n        $__cmdletization_queryBuilder.FilterByProperty('RemoteUsers', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemoteMachine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemoteMachine})\n        $__cmdletization_queryBuilder.FilterByProperty('RemoteMachines', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterBySecurity', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallSecurityFilter.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetFirewallSecurityFilter' -Alias '*'\n        \n\nfunction Set-NetFirewallSecurityFilter\n{\n    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetNetworkLayerSecurityFilter')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication]\n    ${Authentication},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption]\n    ${Encryption},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [bool]\n    ${OverrideBlockRules},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${LocalUser},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${RemoteUser},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${RemoteMachine},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n \n\nScriptBlock ID: 34959f86-fd86-4cf4-be03-43a1c77b157a\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "2", "scriptBlockText": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetFirewallSecurityFilter\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication[]]\n    ${Authentication},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption[]]\n    ${Encryption},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${OverrideBlockRules},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${LocalUser},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${RemoteUser},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${RemoteMachine},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Authentication') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Authentication})\n        $__cmdletization_queryBuilder.FilterByProperty('Authentication', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Encryption') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Encryption})\n        $__cmdletization_queryBuilder.FilterByProperty('Encryption', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OverrideBlockRules') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OverrideBlockRules})\n        $__cmdletization_queryBuilder.FilterByProperty('OverrideBlockRules', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalUser') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalUser})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalUsers', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemoteUser') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemoteUser})\n        $__cmdletization_queryBuilder.FilterByProperty('RemoteUsers', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemoteMachine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemoteMachine})\n        $__cmdletization_queryBuilder.FilterByProperty('RemoteMachines', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterBySecurity', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallSecurityFilter.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetFirewallSecurityFilter' -Alias '*'\n        \n\nfunction Set-NetFirewallSecurityFilter\n{\n    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetNetworkLayerSecurityFilter')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication]\n    ${Authentication},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption]\n    ${Encryption},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [bool]\n    ${OverrideBlockRules},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${LocalUser},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${RemoteUser},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${RemoteMachine},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }", "scriptBlockId": "34959f86-fd86-4cf4-be03-43a1c77b157a"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.4011494Z", "eventRecordID": "280", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (2 of 2):\n       \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Authentication')) {\n            [object]$__cmdletization_value = ${Authentication}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Encryption')) {\n            [object]$__cmdletization_value = ${Encryption}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('OverrideBlockRules')) {\n            [object]$__cmdletization_value = ${OverrideBlockRules}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LocalUser')) {\n            [object]$__cmdletization_value = ${LocalUser}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalUsers'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalUsers'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemoteUser')) {\n            [object]$__cmdletization_value = ${RemoteUser}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUsers'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUsers'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemoteMachine')) {\n            [object]$__cmdletization_value = ${RemoteMachine}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallSecurityFilter.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetFirewallSecurityFilter' -Alias '*'\n        \n\n\nScriptBlock ID: 34959f86-fd86-4cf4-be03-43a1c77b157a\nPath:"}, "eventdata": {"messageNumber": "2", "messageTotal": "2", "scriptBlockText": "Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Authentication')) {\n            [object]$__cmdletization_value = ${Authentication}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Encryption')) {\n            [object]$__cmdletization_value = ${Encryption}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('OverrideBlockRules')) {\n            [object]$__cmdletization_value = ${OverrideBlockRules}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LocalUser')) {\n            [object]$__cmdletization_value = ${LocalUser}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalUsers'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalUsers'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemoteUser')) {\n            [object]$__cmdletization_value = ${RemoteUser}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUsers'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUsers'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemoteMachine')) {\n            [object]$__cmdletization_value = ${RemoteMachine}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallSecurityFilter.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetFirewallSecurityFilter' -Alias '*'", "scriptBlockId": "34959f86-fd86-4cf4-be03-43a1c77b157a"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.4016531Z", "eventRecordID": "281", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 210\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 210\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.4032947Z", "eventRecordID": "282", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 212\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 212\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.4037993Z", "eventRecordID": "283", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetFirewallSecurityFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 214\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 214\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetFirewallSecurityFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.4043451Z", "eventRecordID": "284", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetFirewallSecurityFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 216\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 216\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetFirewallSecurityFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.4340329Z", "eventRecordID": "285", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (1 of 1):\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetProtocolPortFilter'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetFirewallPortFilter\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('DynamicTransport')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport[]]\n    ${DynamicTarget},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallRule},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DynamicTarget') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DynamicTarget})\n        $__cmdletization_queryBuilder.FilterByProperty('DynamicTransport', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallPortFilter.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetFirewallPortFilter' -Alias '*'\n        \n\nfunction Set-NetFirewallPortFilter\n{\n    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetProtocolPortFilter')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${LocalPort},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${RemotePort},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${IcmpType},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('DynamicTransport')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport]\n    ${DynamicTarget},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Protocol')) {\n            [object]$__cmdletization_value = ${Protocol}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LocalPort')) {\n            [object]$__cmdletization_value = ${LocalPort}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemotePort')) {\n            [object]$__cmdletization_value = ${RemotePort}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IcmpType')) {\n            [object]$__cmdletization_value = ${IcmpType}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DynamicTarget')) {\n            [object]$__cmdletization_value = ${DynamicTarget}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallPortFilter.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetFirewallPortFilter' -Alias '*'\n        \n\n\nScriptBlock ID: 2b862cbc-c7dd-482f-a45b-96ff76ccee20\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "1", "scriptBlockText": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetProtocolPortFilter'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetFirewallPortFilter\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('DynamicTransport')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport[]]\n    ${DynamicTarget},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallRule},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DynamicTarget') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DynamicTarget})\n        $__cmdletization_queryBuilder.FilterByProperty('DynamicTransport', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallPortFilter.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetFirewallPortFilter' -Alias '*'\n        \n\nfunction Set-NetFirewallPortFilter\n{\n    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetProtocolPortFilter')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${LocalPort},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${RemotePort},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${IcmpType},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('DynamicTransport')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport]\n    ${DynamicTarget},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Protocol')) {\n            [object]$__cmdletization_value = ${Protocol}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LocalPort')) {\n            [object]$__cmdletization_value = ${LocalPort}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemotePort')) {\n            [object]$__cmdletization_value = ${RemotePort}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IcmpType')) {\n            [object]$__cmdletization_value = ${IcmpType}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DynamicTarget')) {\n            [object]$__cmdletization_value = ${DynamicTarget}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallPortFilter.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetFirewallPortFilter' -Alias '*'", "scriptBlockId": "2b862cbc-c7dd-482f-a45b-96ff76ccee20"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.4345722Z", "eventRecordID": "286", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 218\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 218\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.4349062Z", "eventRecordID": "287", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 220\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 220\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.4357710Z", "eventRecordID": "288", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetFirewallPortFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 222\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 222\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetFirewallPortFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.4361932Z", "eventRecordID": "289", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetFirewallPortFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 224\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 224\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetFirewallPortFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.4722316Z", "eventRecordID": "290", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (1 of 1):\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetServiceFilter'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetFirewallServiceFilter\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Service},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Service') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Service})\n        $__cmdletization_queryBuilder.FilterByProperty('ServiceName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByService', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallServiceFilter.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetFirewallServiceFilter' -Alias '*'\n        \n\nfunction Set-NetFirewallServiceFilter\n{\n    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetServiceFilter')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Service},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Service')) {\n            [object]$__cmdletization_value = ${Service}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallServiceFilter.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetFirewallServiceFilter' -Alias '*'\n        \n\n\nScriptBlock ID: babdd0fb-1ff9-460c-b722-9eeac4447d49\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "1", "scriptBlockText": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetServiceFilter'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetFirewallServiceFilter\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Service},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Service') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Service})\n        $__cmdletization_queryBuilder.FilterByProperty('ServiceName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByService', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallServiceFilter.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetFirewallServiceFilter' -Alias '*'\n        \n\nfunction Set-NetFirewallServiceFilter\n{\n    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetServiceFilter')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Service},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Service')) {\n            [object]$__cmdletization_value = ${Service}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallServiceFilter.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetFirewallServiceFilter' -Alias '*'", "scriptBlockId": "babdd0fb-1ff9-460c-b722-9eeac4447d49"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.4728448Z", "eventRecordID": "291", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 226\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 226\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.4732428Z", "eventRecordID": "292", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 228\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 228\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.4736425Z", "eventRecordID": "293", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetFirewallServiceFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 230\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 230\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetFirewallServiceFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.4739994Z", "eventRecordID": "294", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetFirewallServiceFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 232\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 232\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetFirewallServiceFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.5145790Z", "eventRecordID": "295", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (1 of 5):\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetIKEP1AuthSet'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetIPsecPhase1AuthSet\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    \n    param(\n    \n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('ID')]\n    [string]\n    ${Name},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [string]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Description},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Group},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [ciminstance[]]\n    ${Proposal},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [switch]\n    ${Default},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('GPOSession')) {\n          [object]$__cmdletization_value = ${GPOSession}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Name')) {\n          [object]$__cmdletization_value = ${Name}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DisplayName')) {\n          [object]$__cmdletization_value = ${DisplayName}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Description')) {\n          [object]$__cmdletization_value = ${Description}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Group')) {\n          [object]$__cmdletization_value = ${Group}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Proposal')) {\n          [object]$__cmdletization_value = ${Proposal}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Default')) {\n          [object]$__cmdletization_value = ${Default}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetIPsecPhase1AuthSet' -Alias '*'\n        \n\nfunction Get-NetIPsecPhase1AuthSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exc\n\nScriptBlock ID: 521ed72e-41bd-4e03-b67b-fff357e2ad6d\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "5", "scriptBlockText": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetIKEP1AuthSet'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetIPsecPhase1AuthSet\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    \n    param(\n    \n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('ID')]\n    [string]\n    ${Name},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [string]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Description},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Group},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [ciminstance[]]\n    ${Proposal},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [switch]\n    ${Default},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('GPOSession')) {\n          [object]$__cmdletization_value = ${GPOSession}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Name')) {\n          [object]$__cmdletization_value = ${Name}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DisplayName')) {\n          [object]$__cmdletization_value = ${DisplayName}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Description')) {\n          [object]$__cmdletization_value = ${Description}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Group')) {\n          [object]$__cmdletization_value = ${Group}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Proposal')) {\n          [object]$__cmdletization_value = ${Proposal}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Default')) {\n          [object]$__cmdletization_value = ${Default}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetIPsecPhase1AuthSet' -Alias '*'\n        \n\nfunction Get-NetIPsecPhase1AuthSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exc", "scriptBlockId": "521ed72e-41bd-4e03-b67b-fff357e2ad6d"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.5146115Z", "eventRecordID": "296", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (2 of 5):\neptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPsecPhase1AuthSet' -Alias '*'\n        \n\nfunction Set-NetIPsecPhase1AuthSet\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewDisplayName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [ciminstance[]]\n    ${Proposal},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {\n            [object]$__cmdletization_value = ${NewDisplayName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Description')) {\n            [object]$__cmdletization_value = ${Description}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Proposal')) {\n            [object]$__cmdletization_value = ${Proposal}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPsecPhase1AuthSet' -Alias '*'\n        \n\nfunction Remove-NetIPsecPhase1AuthSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/stand\n\nScriptBlock ID: 521ed72e-41bd-4e03-b67b-fff357e2ad6d\nPath:"}, "eventdata": {"messageNumber": "2", "messageTotal": "5", "scriptBlockText": "eptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPsecPhase1AuthSet' -Alias '*'\n        \n\nfunction Set-NetIPsecPhase1AuthSet\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewDisplayName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [ciminstance[]]\n    ${Proposal},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {\n            [object]$__cmdletization_value = ${NewDisplayName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Description')) {\n            [object]$__cmdletization_value = ${Description}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Proposal')) {\n            [object]$__cmdletization_value = ${Proposal}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPsecPhase1AuthSet' -Alias '*'\n        \n\nfunction Remove-NetIPsecPhase1AuthSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/stand", "scriptBlockId": "521ed72e-41bd-4e03-b67b-fff357e2ad6d"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.5146408Z", "eventRecordID": "297", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (3 of 5):\nardcimv2/MSFT_NetIKEP1AuthSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetIPsecPhase1AuthSet' -Alias '*'\n        \n\nfunction Rename-NetIPsecPhase1AuthSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true)]\n    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]\n    [string]\n    ${NewName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    \n\nScriptBlock ID: 521ed72e-41bd-4e03-b67b-fff357e2ad6d\nPath:"}, "eventdata": {"messageNumber": "3", "messageTotal": "5", "scriptBlockText": "ardcimv2/MSFT_NetIKEP1AuthSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetIPsecPhase1AuthSet' -Alias '*'\n        \n\nfunction Rename-NetIPsecPhase1AuthSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true)]\n    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]\n    [string]\n    ${NewName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]", "scriptBlockId": "521ed72e-41bd-4e03-b67b-fff357e2ad6d"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.5146696Z", "eventRecordID": "298", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (4 of 5):\n[Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewName')) {\n            [object]$__cmdletization_value = ${NewName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Rename-NetIPsecPhase1AuthSet' -Alias '*'\n        \n\nfunction Copy-NetIPsecPhase1AuthSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewPolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewGPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcess\n\nScriptBlock ID: 521ed72e-41bd-4e03-b67b-fff357e2ad6d\nPath:"}, "eventdata": {"messageNumber": "4", "messageTotal": "5", "scriptBlockText": "[Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewName')) {\n            [object]$__cmdletization_value = ${NewName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Rename-NetIPsecPhase1AuthSet' -Alias '*'\n        \n\nfunction Copy-NetIPsecPhase1AuthSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP1AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewPolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewGPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcess", "scriptBlockId": "521ed72e-41bd-4e03-b67b-fff357e2ad6d"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.5146851Z", "eventRecordID": "299", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (5 of 5):\ning()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {\n            [object]$__cmdletization_value = ${NewPolicyStore}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {\n            [object]$__cmdletization_value = ${NewGPOSession}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewName')) {\n            [object]$__cmdletization_value = ${NewName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Copy-NetIPsecPhase1AuthSet' -Alias '*'\n        \n\n\nScriptBlock ID: 521ed72e-41bd-4e03-b67b-fff357e2ad6d\nPath:"}, "eventdata": {"messageNumber": "5", "messageTotal": "5", "scriptBlockText": "ing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {\n            [object]$__cmdletization_value = ${NewPolicyStore}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {\n            [object]$__cmdletization_value = ${NewGPOSession}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewName')) {\n            [object]$__cmdletization_value = ${NewName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Copy-NetIPsecPhase1AuthSet' -Alias '*'", "scriptBlockId": "521ed72e-41bd-4e03-b67b-fff357e2ad6d"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.5151671Z", "eventRecordID": "300", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 234\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 234\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.5156213Z", "eventRecordID": "301", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 236\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 236\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.5189989Z", "eventRecordID": "302", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"New-NetIPsecPhase1AuthSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 238\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 238\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"New-NetIPsecPhase1AuthSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.5200004Z", "eventRecordID": "303", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPsecPhase1AuthSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 240\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 240\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPsecPhase1AuthSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.5203510Z", "eventRecordID": "304", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetIPsecPhase1AuthSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 242\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 242\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetIPsecPhase1AuthSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.5206963Z", "eventRecordID": "305", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetIPsecPhase1AuthSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 244\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 244\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetIPsecPhase1AuthSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.5211182Z", "eventRecordID": "306", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Rename-NetIPsecPhase1AuthSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 246\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 246\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Rename-NetIPsecPhase1AuthSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.5230164Z", "eventRecordID": "307", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Copy-NetIPsecPhase1AuthSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 248\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 248\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Copy-NetIPsecPhase1AuthSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.5615316Z", "eventRecordID": "308", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (1 of 5):\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetIKEP2AuthSet'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetIPsecPhase2AuthSet\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    \n    param(\n    \n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('ID')]\n    [string]\n    ${Name},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [string]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Description},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Group},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [ciminstance[]]\n    ${Proposal},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [switch]\n    ${Default},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('GPOSession')) {\n          [object]$__cmdletization_value = ${GPOSession}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Name')) {\n          [object]$__cmdletization_value = ${Name}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DisplayName')) {\n          [object]$__cmdletization_value = ${DisplayName}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Description')) {\n          [object]$__cmdletization_value = ${Description}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Group')) {\n          [object]$__cmdletization_value = ${Group}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Proposal')) {\n          [object]$__cmdletization_value = ${Proposal}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Default')) {\n          [object]$__cmdletization_value = ${Default}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetIPsecPhase2AuthSet' -Alias '*'\n        \n\nfunction Get-NetIPsecPhase2AuthSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName'\n\nScriptBlock ID: 0f960772-b983-4f32-a47f-30117778ef85\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "5", "scriptBlockText": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetIKEP2AuthSet'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetIPsecPhase2AuthSet\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    \n    param(\n    \n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('ID')]\n    [string]\n    ${Name},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [string]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Description},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Group},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [ciminstance[]]\n    ${Proposal},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [switch]\n    ${Default},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('GPOSession')) {\n          [object]$__cmdletization_value = ${GPOSession}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Name')) {\n          [object]$__cmdletization_value = ${Name}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DisplayName')) {\n          [object]$__cmdletization_value = ${DisplayName}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Description')) {\n          [object]$__cmdletization_value = ${Description}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Group')) {\n          [object]$__cmdletization_value = ${Group}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Proposal')) {\n          [object]$__cmdletization_value = ${Proposal}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Default')) {\n          [object]$__cmdletization_value = ${Default}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetIPsecPhase2AuthSet' -Alias '*'\n        \n\nfunction Get-NetIPsecPhase2AuthSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName'", "scriptBlockId": "0f960772-b983-4f32-a47f-30117778ef85"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.5615680Z", "eventRecordID": "309", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (2 of 5):\n) -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleEMAuthSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPsecPhase2AuthSet' -Alias '*'\n        \n\nfunction Set-NetIPsecPhase2AuthSet\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP2AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewDisplayName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [ciminstance[]]\n    ${Proposal},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {\n            [object]$__cmdletization_value = ${NewDisplayName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Description')) {\n            [object]$__cmdletization_value = ${Description}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Proposal')) {\n            [object]$__cmdletization_value = ${Proposal}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPsecPhase2AuthSet' -Alias '*'\n        \n\nfunction Remove-NetIPsecPhase2AuthSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n\n\nScriptBlock ID: 0f960772-b983-4f32-a47f-30117778ef85\nPath:"}, "eventdata": {"messageNumber": "2", "messageTotal": "5", "scriptBlockText": ") -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleEMAuthSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPsecPhase2AuthSet' -Alias '*'\n        \n\nfunction Set-NetIPsecPhase2AuthSet\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP2AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewDisplayName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [ciminstance[]]\n    ${Proposal},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {\n            [object]$__cmdletization_value = ${NewDisplayName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Description')) {\n            [object]$__cmdletization_value = ${Description}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Proposal')) {\n            [object]$__cmdletization_value = ${Proposal}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPsecPhase2AuthSet' -Alias '*'\n        \n\nfunction Remove-NetIPsecPhase2AuthSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]", "scriptBlockId": "0f960772-b983-4f32-a47f-30117778ef85"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.5616115Z", "eventRecordID": "310", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (3 of 5):\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP2AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleEMAuthSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetIPsecPhase2AuthSet' -Alias '*'\n        \n\nfunction Rename-NetIPsecPhase2AuthSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP2AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true)]\n    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]\n    [string]\n    ${NewName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQ\n\nScriptBlock ID: 0f960772-b983-4f32-a47f-30117778ef85\nPath:"}, "eventdata": {"messageNumber": "3", "messageTotal": "5", "scriptBlockText": "[Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP2AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleEMAuthSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetIPsecPhase2AuthSet' -Alias '*'\n        \n\nfunction Rename-NetIPsecPhase2AuthSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP2AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true)]\n    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]\n    [string]\n    ${NewName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQ", "scriptBlockId": "0f960772-b983-4f32-a47f-30117778ef85"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.5616553Z", "eventRecordID": "311", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (4 of 5):\nuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleEMAuthSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewName')) {\n            [object]$__cmdletization_value = ${NewName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Rename-NetIPsecPhase2AuthSet' -Alias '*'\n        \n\nfunction Copy-NetIPsecPhase2AuthSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP2AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewPolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewGPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleEMAuthSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {\n            [object]$__cmdletization_value = ${NewPolicyStore}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {\n            [object]$__cmdletization_value = ${NewGPOSession}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParam\n\nScriptBlock ID: 0f960772-b983-4f32-a47f-30117778ef85\nPath:"}, "eventdata": {"messageNumber": "4", "messageTotal": "5", "scriptBlockText": "uery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleEMAuthSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewName')) {\n            [object]$__cmdletization_value = ${NewName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Rename-NetIPsecPhase2AuthSet' -Alias '*'\n        \n\nfunction Copy-NetIPsecPhase2AuthSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP2AuthSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewPolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewGPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleEMAuthSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {\n            [object]$__cmdletization_value = ${NewPolicyStore}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {\n            [object]$__cmdletization_value = ${NewGPOSession}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParam", "scriptBlockId": "0f960772-b983-4f32-a47f-30117778ef85"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.5616714Z", "eventRecordID": "312", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (5 of 5):\neter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewName')) {\n            [object]$__cmdletization_value = ${NewName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Copy-NetIPsecPhase2AuthSet' -Alias '*'\n        \n\n\nScriptBlock ID: 0f960772-b983-4f32-a47f-30117778ef85\nPath:"}, "eventdata": {"messageNumber": "5", "messageTotal": "5", "scriptBlockText": "eter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewName')) {\n            [object]$__cmdletization_value = ${NewName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Copy-NetIPsecPhase2AuthSet' -Alias '*'", "scriptBlockId": "0f960772-b983-4f32-a47f-30117778ef85"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.5621677Z", "eventRecordID": "313", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 250\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 250\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.5658818Z", "eventRecordID": "314", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 252\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 252\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.5663426Z", "eventRecordID": "315", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"New-NetIPsecPhase2AuthSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 254\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 254\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"New-NetIPsecPhase2AuthSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.5666842Z", "eventRecordID": "316", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPsecPhase2AuthSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 256\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 256\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPsecPhase2AuthSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.5674416Z", "eventRecordID": "317", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetIPsecPhase2AuthSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 258\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 258\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetIPsecPhase2AuthSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.5678126Z", "eventRecordID": "318", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetIPsecPhase2AuthSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 260\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 260\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetIPsecPhase2AuthSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.5684495Z", "eventRecordID": "319", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Rename-NetIPsecPhase2AuthSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 262\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 262\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Rename-NetIPsecPhase2AuthSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.5688307Z", "eventRecordID": "320", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Copy-NetIPsecPhase2AuthSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 264\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 264\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Copy-NetIPsecPhase2AuthSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.6111145Z", "eventRecordID": "321", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (1 of 7):\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetIKEMMCryptoSet'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetIPsecMainModeCryptoSet\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    \n    param(\n    \n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('ID')]\n    [string]\n    ${Name},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [string]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Description},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Group},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [ciminstance[]]\n    ${Proposal},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint32]\n    ${MaxMinutes},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint32]\n    ${MaxSessions},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [bool]\n    ${ForceDiffieHellman},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [switch]\n    ${Default},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('GPOSession')) {\n          [object]$__cmdletization_value = ${GPOSession}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Name')) {\n          [object]$__cmdletization_value = ${Name}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DisplayName')) {\n          [object]$__cmdletization_value = ${DisplayName}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Description')) {\n          [object]$__cmdletization_value = ${Description}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Group')) {\n          [object]$__cmdletization_value = ${Group}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Proposal')) {\n          [object]$__cmdletization_value = ${Proposal}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('MaxMinutes')) {\n          [object]$__cmdletization_value = ${MaxMinutes}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeMinutes'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeMinutes'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('MaxSessions')) {\n          [object]$__cmdletization_value = ${MaxSessions}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeSessions'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeSessions'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('ForceDiffieHellman')) {\n          [object]$__cmdletization_value = ${ForceDiffieHellman}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceDiffieHellman'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceDiffieHellman'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodPa\n\nScriptBlock ID: d475d04e-1994-459f-bc43-699462be0eef\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "7", "scriptBlockText": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetIKEMMCryptoSet'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetIPsecMainModeCryptoSet\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    \n    param(\n    \n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('ID')]\n    [string]\n    ${Name},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [string]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Description},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Group},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [ciminstance[]]\n    ${Proposal},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint32]\n    ${MaxMinutes},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint32]\n    ${MaxSessions},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [bool]\n    ${ForceDiffieHellman},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [switch]\n    ${Default},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('GPOSession')) {\n          [object]$__cmdletization_value = ${GPOSession}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Name')) {\n          [object]$__cmdletization_value = ${Name}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DisplayName')) {\n          [object]$__cmdletization_value = ${DisplayName}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Description')) {\n          [object]$__cmdletization_value = ${Description}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Group')) {\n          [object]$__cmdletization_value = ${Group}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Proposal')) {\n          [object]$__cmdletization_value = ${Proposal}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('MaxMinutes')) {\n          [object]$__cmdletization_value = ${MaxMinutes}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeMinutes'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeMinutes'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('MaxSessions')) {\n          [object]$__cmdletization_value = ${MaxSessions}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeSessions'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeSessions'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('ForceDiffieHellman')) {\n          [object]$__cmdletization_value = ${ForceDiffieHellman}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceDiffieHellman'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceDiffieHellman'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodPa", "scriptBlockId": "d475d04e-1994-459f-bc43-699462be0eef"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.6111443Z", "eventRecordID": "322", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (2 of 7):\nrameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Default')) {\n          [object]$__cmdletization_value = ${Default}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetIPsecMainModeCryptoSet' -Alias '*'\n        \n\nfunction Get-NetIPsecMainModeCryptoSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MaxMinutes},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MaxSessions},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${ForceDiffieHellman},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxMinutes') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxMinutes})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeMinutes', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxSessions') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxSessions})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeSessions', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForceDiffieHellman') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForceDiffieHellman})\n        $__cmdletization_queryBuilder.FilterByProperty('ForceDiffieHellman', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPsecMainModeCryptoSet' -Alias '*'\n        \n\nfunction Set-NetIPsecMainModeCryptoSe\n\nScriptBlock ID: d475d04e-1994-459f-bc43-699462be0eef\nPath:"}, "eventdata": {"messageNumber": "2", "messageTotal": "7", "scriptBlockText": "rameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Default')) {\n          [object]$__cmdletization_value = ${Default}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetIPsecMainModeCryptoSet' -Alias '*'\n        \n\nfunction Get-NetIPsecMainModeCryptoSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MaxMinutes},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MaxSessions},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${ForceDiffieHellman},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxMinutes') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxMinutes})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeMinutes', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxSessions') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxSessions})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeSessions', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForceDiffieHellman') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForceDiffieHellman})\n        $__cmdletization_queryBuilder.FilterByProperty('ForceDiffieHellman', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPsecMainModeCryptoSet' -Alias '*'\n        \n\nfunction Set-NetIPsecMainModeCryptoSe", "scriptBlockId": "d475d04e-1994-459f-bc43-699462be0eef"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.6111801Z", "eventRecordID": "323", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (3 of 7):\nt\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEMMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewDisplayName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [ciminstance[]]\n    ${Proposal},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${MaxMinutes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${MaxSessions},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [bool]\n    ${ForceDiffieHellman},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {\n            [object]$__cmdletization_value = ${NewDisplayName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Description')) {\n            [object]$__cmdletization_value = ${Description}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Proposal')) {\n            [object]$__cmdletization_value = ${Proposal}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxMinutes')) {\n            [object]$__cmdletization_value = ${MaxMinutes}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeMinutes'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeMinutes'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxSessions')) {\n            [object]$__cmdletization_value = ${MaxSessions}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeSessions'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeSessions'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ForceDiffieHellman')) {\n            [object]$__cmdletization_value = ${ForceDiffieHellman}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceDiffieHellman'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceDiffieHellman'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPrese\n\nScriptBlock ID: d475d04e-1994-459f-bc43-699462be0eef\nPath:"}, "eventdata": {"messageNumber": "3", "messageTotal": "7", "scriptBlockText": "t\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEMMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewDisplayName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [ciminstance[]]\n    ${Proposal},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${MaxMinutes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${MaxSessions},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [bool]\n    ${ForceDiffieHellman},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {\n            [object]$__cmdletization_value = ${NewDisplayName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Description')) {\n            [object]$__cmdletization_value = ${Description}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Proposal')) {\n            [object]$__cmdletization_value = ${Proposal}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxMinutes')) {\n            [object]$__cmdletization_value = ${MaxMinutes}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeMinutes'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeMinutes'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxSessions')) {\n            [object]$__cmdletization_value = ${MaxSessions}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeSessions'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeSessions'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ForceDiffieHellman')) {\n            [object]$__cmdletization_value = ${ForceDiffieHellman}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceDiffieHellman'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceDiffieHellman'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPrese", "scriptBlockId": "d475d04e-1994-459f-bc43-699462be0eef"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.6112046Z", "eventRecordID": "324", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (4 of 7):\nnt}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPsecMainModeCryptoSet' -Alias '*'\n        \n\nfunction Remove-NetIPsecMainModeCryptoSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MaxMinutes},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MaxSessions},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${ForceDiffieHellman},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEMMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxMinutes') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxMinutes})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeMinutes', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxSessions') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxSessions})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeSessions', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForceDiffieHellman') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForceDiffieHellman})\n        $__cmdletization_queryBuilder.FilterByProperty('ForceDiffieHellman', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_retur\n\nScriptBlock ID: d475d04e-1994-459f-bc43-699462be0eef\nPath:"}, "eventdata": {"messageNumber": "4", "messageTotal": "7", "scriptBlockText": "nt}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPsecMainModeCryptoSet' -Alias '*'\n        \n\nfunction Remove-NetIPsecMainModeCryptoSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MaxMinutes},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MaxSessions},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${ForceDiffieHellman},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEMMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxMinutes') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxMinutes})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeMinutes', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxSessions') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxSessions})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeSessions', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForceDiffieHellman') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForceDiffieHellman})\n        $__cmdletization_queryBuilder.FilterByProperty('ForceDiffieHellman', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_retur", "scriptBlockId": "d475d04e-1994-459f-bc43-699462be0eef"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.6112731Z", "eventRecordID": "325", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (5 of 7):\nnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetIPsecMainModeCryptoSet' -Alias '*'\n        \n\nfunction Rename-NetIPsecMainModeCryptoSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MaxMinutes},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MaxSessions},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${ForceDiffieHellman},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEMMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true)]\n    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]\n    [string]\n    ${NewName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxMinutes') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxMinutes})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeMinutes', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxSessions') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxSessions})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeSessions', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForceDiffieHellman') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForceDiffieHellman})\n        $__cmdletization_queryBuilder.FilterByProperty('ForceDiffieHellman', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParam\n\nScriptBlock ID: d475d04e-1994-459f-bc43-699462be0eef\nPath:"}, "eventdata": {"messageNumber": "5", "messageTotal": "7", "scriptBlockText": "nValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetIPsecMainModeCryptoSet' -Alias '*'\n        \n\nfunction Rename-NetIPsecMainModeCryptoSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MaxMinutes},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MaxSessions},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${ForceDiffieHellman},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEMMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true)]\n    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]\n    [string]\n    ${NewName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxMinutes') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxMinutes})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeMinutes', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxSessions') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxSessions})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeSessions', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForceDiffieHellman') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForceDiffieHellman})\n        $__cmdletization_queryBuilder.FilterByProperty('ForceDiffieHellman', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParam", "scriptBlockId": "d475d04e-1994-459f-bc43-699462be0eef"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.6112971Z", "eventRecordID": "326", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (6 of 7):\neters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewName')) {\n            [object]$__cmdletization_value = ${NewName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Rename-NetIPsecMainModeCryptoSet' -Alias '*'\n        \n\nfunction Copy-NetIPsecMainModeCryptoSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MaxMinutes},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MaxSessions},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${ForceDiffieHellman},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEMMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewPolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewGPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxMinutes') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxMinutes})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeMinutes', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxSessions') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxSessions})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeSessions', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForceDiffieHellman') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForceDiffieHellman})\n        $__cmdletization_queryBuilder.FilterByProperty('ForceDiffieHellman', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetNam\n\nScriptBlock ID: d475d04e-1994-459f-bc43-699462be0eef\nPath:"}, "eventdata": {"messageNumber": "6", "messageTotal": "7", "scriptBlockText": "eters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewName')) {\n            [object]$__cmdletization_value = ${NewName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Rename-NetIPsecMainModeCryptoSet' -Alias '*'\n        \n\nfunction Copy-NetIPsecMainModeCryptoSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MaxMinutes},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MaxSessions},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${ForceDiffieHellman},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEMMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewPolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewGPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxMinutes') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxMinutes})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeMinutes', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxSessions') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxSessions})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeSessions', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForceDiffieHellman') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForceDiffieHellman})\n        $__cmdletization_queryBuilder.FilterByProperty('ForceDiffieHellman', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetNam", "scriptBlockId": "d475d04e-1994-459f-bc43-699462be0eef"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.6113543Z", "eventRecordID": "327", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (7 of 7):\ne )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {\n            [object]$__cmdletization_value = ${NewPolicyStore}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {\n            [object]$__cmdletization_value = ${NewGPOSession}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewName')) {\n            [object]$__cmdletization_value = ${NewName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Copy-NetIPsecMainModeCryptoSet' -Alias '*'\n        \n\n\nScriptBlock ID: d475d04e-1994-459f-bc43-699462be0eef\nPath:"}, "eventdata": {"messageNumber": "7", "messageTotal": "7", "scriptBlockText": "e )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {\n            [object]$__cmdletization_value = ${NewPolicyStore}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {\n            [object]$__cmdletization_value = ${NewGPOSession}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewName')) {\n            [object]$__cmdletization_value = ${NewName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Copy-NetIPsecMainModeCryptoSet' -Alias '*'", "scriptBlockId": "d475d04e-1994-459f-bc43-699462be0eef"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.6118620Z", "eventRecordID": "328", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 266\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 266\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.6122064Z", "eventRecordID": "329", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 268\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 268\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.6125613Z", "eventRecordID": "330", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"New-NetIPsecMainModeCryptoSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 270\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 270\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"New-NetIPsecMainModeCryptoSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.6144249Z", "eventRecordID": "331", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPsecMainModeCryptoSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 272\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 272\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPsecMainModeCryptoSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.6153385Z", "eventRecordID": "332", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetIPsecMainModeCryptoSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 274\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 274\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetIPsecMainModeCryptoSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.6158382Z", "eventRecordID": "333", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetIPsecMainModeCryptoSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 276\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 276\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetIPsecMainModeCryptoSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.6161792Z", "eventRecordID": "334", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Rename-NetIPsecMainModeCryptoSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 278\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 278\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Rename-NetIPsecMainModeCryptoSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.6165204Z", "eventRecordID": "335", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Copy-NetIPsecMainModeCryptoSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 280\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 280\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Copy-NetIPsecMainModeCryptoSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.6597636Z", "eventRecordID": "336", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (1 of 5):\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetIKEQMCryptoSet'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetIPsecQuickModeCryptoSet\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    \n    param(\n    \n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('ID')]\n    [string]\n    ${Name},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [string]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Description},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Group},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [ciminstance[]]\n    ${Proposal},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('PfsGroup')]\n    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup]\n    ${PerfectForwardSecrecyGroup},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [switch]\n    ${Default},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('GPOSession')) {\n          [object]$__cmdletization_value = ${GPOSession}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Name')) {\n          [object]$__cmdletization_value = ${Name}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DisplayName')) {\n          [object]$__cmdletization_value = ${DisplayName}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Description')) {\n          [object]$__cmdletization_value = ${Description}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Group')) {\n          [object]$__cmdletization_value = ${Group}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Proposal')) {\n          [object]$__cmdletization_value = ${Proposal}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup')) {\n          [object]$__cmdletization_value = ${PerfectForwardSecrecyGroup}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Default')) {\n          [object]$__cmdletization_value = ${Default}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetIPsecQuickModeCryptoSet' -Alias '*'\n        \n\nfunction Get-NetIPsecQuickModeCryptoSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('PfsGroup')]\n    [ValidateNotNull()]\n    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]\n    ${PerfectForwardSecrecyGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -con\n\nScriptBlock ID: 24433d6f-0eff-41b7-aa1b-ebf473853389\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "5", "scriptBlockText": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetIKEQMCryptoSet'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetIPsecQuickModeCryptoSet\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    \n    param(\n    \n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('ID')]\n    [string]\n    ${Name},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [string]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Description},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${Group},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [ciminstance[]]\n    ${Proposal},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('PfsGroup')]\n    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup]\n    ${PerfectForwardSecrecyGroup},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [switch]\n    ${Default},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('GPOSession')) {\n          [object]$__cmdletization_value = ${GPOSession}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Name')) {\n          [object]$__cmdletization_value = ${Name}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DisplayName')) {\n          [object]$__cmdletization_value = ${DisplayName}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Description')) {\n          [object]$__cmdletization_value = ${Description}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Group')) {\n          [object]$__cmdletization_value = ${Group}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Proposal')) {\n          [object]$__cmdletization_value = ${Proposal}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup')) {\n          [object]$__cmdletization_value = ${PerfectForwardSecrecyGroup}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Default')) {\n          [object]$__cmdletization_value = ${Default}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetIPsecQuickModeCryptoSet' -Alias '*'\n        \n\nfunction Get-NetIPsecQuickModeCryptoSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('PfsGroup')]\n    [ValidateNotNull()]\n    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]\n    ${PerfectForwardSecrecyGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -con", "scriptBlockId": "24433d6f-0eff-41b7-aa1b-ebf473853389"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.6602382Z", "eventRecordID": "337", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (2 of 5):\ntains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPsecQuickModeCryptoSet' -Alias '*'\n        \n\nfunction Set-NetIPsecQuickModeCryptoSet\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewDisplayName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [ciminstance[]]\n    ${Proposal},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('PfsGroup')]\n    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup]\n    ${PerfectForwardSecrecyGroup},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {\n            [object]$__cmdletization_value = ${NewDisplayName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Description')) {\n            [object]$__cmdletization_value = ${Description}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Proposal')) {\n            [object]$__cmdletization_value = ${Proposal}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup')) {\n            [object]$__cmdletization_value = ${PerfectForwardSecrecyGroup}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPsecQuickModeCryptoSet' -Alias '*'\n        \n\nfunction Remove-NetIPsecQuickModeCryptoSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('PfsGroup')]\n    [ValidateNotNull()]\n    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]\n    ${PerfectForwardSecrecyGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n\n\nScriptBlock ID: 24433d6f-0eff-41b7-aa1b-ebf473853389\nPath:"}, "eventdata": {"messageNumber": "2", "messageTotal": "5", "scriptBlockText": "tains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPsecQuickModeCryptoSet' -Alias '*'\n        \n\nfunction Set-NetIPsecQuickModeCryptoSet\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewDisplayName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [ciminstance[]]\n    ${Proposal},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('PfsGroup')]\n    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup]\n    ${PerfectForwardSecrecyGroup},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByDisplayGroup')]\n    [Parameter(ParameterSetName='ByGroup')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {\n            [object]$__cmdletization_value = ${NewDisplayName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Description')) {\n            [object]$__cmdletization_value = ${Description}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Proposal')) {\n            [object]$__cmdletization_value = ${Proposal}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup')) {\n            [object]$__cmdletization_value = ${PerfectForwardSecrecyGroup}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPsecQuickModeCryptoSet' -Alias '*'\n        \n\nfunction Remove-NetIPsecQuickModeCryptoSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('PfsGroup')]\n    [ValidateNotNull()]\n    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]\n    ${PerfectForwardSecrecyGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]", "scriptBlockId": "24433d6f-0eff-41b7-aa1b-ebf473853389"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.6607358Z", "eventRecordID": "338", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (3 of 5):\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetIPsecQuickModeCryptoSet' -Alias '*'\n        \n\nfunction Rename-NetIPsecQuickModeCryptoSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('PfsGroup')]\n    [ValidateNotNull()]\n    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]\n    ${PerfectForwardSecrecyGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true)]\n    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]\n    [string]\n    ${NewName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery')\n\nScriptBlock ID: 24433d6f-0eff-41b7-aa1b-ebf473853389\nPath:"}, "eventdata": {"messageNumber": "3", "messageTotal": "5", "scriptBlockText": "[ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetIPsecQuickModeCryptoSet' -Alias '*'\n        \n\nfunction Rename-NetIPsecQuickModeCryptoSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('PfsGroup')]\n    [ValidateNotNull()]\n    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]\n    ${PerfectForwardSecrecyGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true)]\n    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]\n    [string]\n    ${NewName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery')", "scriptBlockId": "24433d6f-0eff-41b7-aa1b-ebf473853389"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.6608347Z", "eventRecordID": "339", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (4 of 5):\n -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewName')) {\n            [object]$__cmdletization_value = ${NewName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Rename-NetIPsecQuickModeCryptoSet' -Alias '*'\n        \n\nfunction Copy-NetIPsecQuickModeCryptoSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('PfsGroup')]\n    [ValidateNotNull()]\n    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]\n    ${PerfectForwardSecrecyGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewPolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewGPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {\n            [object]$__cmdletization_value = ${NewPolicyStore}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {\n            [object]$__cmdletization_value = ${NewGPOSession}\n\nScriptBlock ID: 24433d6f-0eff-41b7-aa1b-ebf473853389\nPath:"}, "eventdata": {"messageNumber": "4", "messageTotal": "5", "scriptBlockText": "-contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewName')) {\n            [object]$__cmdletization_value = ${NewName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Rename-NetIPsecQuickModeCryptoSet' -Alias '*'\n        \n\nfunction Copy-NetIPsecQuickModeCryptoSet\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayName},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Description},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DisplayGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Group},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [Alias('PfsGroup')]\n    [ValidateNotNull()]\n    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]\n    ${PerfectForwardSecrecyGroup},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]\n    ${PrimaryStatus},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Status},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [string[]]\n    ${PolicyStoreSource},\n\n    [Parameter(ParameterSetName='ByQuery')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]\n    ${PolicyStoreSourceType},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${TracePolicyStore},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewPolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewGPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${NewName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByDisplayName')]\n    [Parameter(ParameterSetName='ByQuery')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayName})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Description})\n        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DisplayGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Group})\n        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})\n        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrimaryStatus})\n        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Status})\n        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSource})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PolicyStoreSourceType})\n        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {\n            [object]$__cmdletization_value = ${NewPolicyStore}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {\n            [object]$__cmdletization_value = ${NewGPOSession}", "scriptBlockId": "24433d6f-0eff-41b7-aa1b-ebf473853389"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.6608502Z", "eventRecordID": "340", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (5 of 5):\n\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewName')) {\n            [object]$__cmdletization_value = ${NewName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Copy-NetIPsecQuickModeCryptoSet' -Alias '*'\n        \n\n\nScriptBlock ID: 24433d6f-0eff-41b7-aa1b-ebf473853389\nPath:"}, "eventdata": {"messageNumber": "5", "messageTotal": "5", "scriptBlockText": "$__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NewName')) {\n            [object]$__cmdletization_value = ${NewName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Copy-NetIPsecQuickModeCryptoSet' -Alias '*'", "scriptBlockId": "24433d6f-0eff-41b7-aa1b-ebf473853389"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.6614309Z", "eventRecordID": "341", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 282\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 282\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.6617908Z", "eventRecordID": "342", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 284\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 284\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.6622027Z", "eventRecordID": "343", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"New-NetIPsecQuickModeCryptoSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 286\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 286\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"New-NetIPsecQuickModeCryptoSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.6625528Z", "eventRecordID": "344", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPsecQuickModeCryptoSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 288\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 288\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPsecQuickModeCryptoSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.6629224Z", "eventRecordID": "345", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetIPsecQuickModeCryptoSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 290\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 290\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetIPsecQuickModeCryptoSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.6632604Z", "eventRecordID": "346", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetIPsecQuickModeCryptoSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 292\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 292\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetIPsecQuickModeCryptoSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.6636618Z", "eventRecordID": "347", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Rename-NetIPsecQuickModeCryptoSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 294\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 294\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Rename-NetIPsecQuickModeCryptoSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.6643242Z", "eventRecordID": "348", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Copy-NetIPsecQuickModeCryptoSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 296\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 296\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Copy-NetIPsecQuickModeCryptoSet\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.7000659Z", "eventRecordID": "349", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (1 of 3):\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetFirewallProfile'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetFirewallProfile\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('Profile')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallRule},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleInProfile', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleInProfile', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleInProfile', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallProfile.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetFirewallProfile' -Alias '*'\n        \n\nfunction Set-NetFirewallProfile\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('Profile')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]\n    ${DefaultInboundAction},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]\n    ${DefaultOutboundAction},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]\n    ${AllowInboundRules},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]\n    ${AllowLocalFirewallRules},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]\n    ${AllowLocalIPsecRules},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]\n    ${AllowUserApps},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]\n    ${AllowUserPorts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]\n    ${AllowUnicastResponseToMulticast},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]\n    ${NotifyOnListen},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]\n    ${EnableStealthModeForIPsec},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${LogFileName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint64]\n    ${LogMaxSizeKilobytes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]\n    ${LogAllowed},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]\n    ${LogBlocked},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]\n    ${LogIgnored},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${DisabledInterfaceAliases},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSet\n\nScriptBlock ID: 504fcfc2-39b5-47fc-a78d-5066cfd4f795\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "3", "scriptBlockText": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetFirewallProfile'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetFirewallProfile\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('Profile')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetFirewallRule},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecRule},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeRule},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleInProfile', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleInProfile', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleInProfile', 'PartComponent', 'GroupComponent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallProfile.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetFirewallProfile' -Alias '*'\n        \n\nfunction Set-NetFirewallProfile\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('Profile')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallProfile')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]\n    ${Enabled},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]\n    ${DefaultInboundAction},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]\n    ${DefaultOutboundAction},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]\n    ${AllowInboundRules},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]\n    ${AllowLocalFirewallRules},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]\n    ${AllowLocalIPsecRules},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]\n    ${AllowUserApps},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]\n    ${AllowUserPorts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]\n    ${AllowUnicastResponseToMulticast},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]\n    ${NotifyOnListen},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]\n    ${EnableStealthModeForIPsec},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${LogFileName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint64]\n    ${LogMaxSizeKilobytes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]\n    ${LogAllowed},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]\n    ${LogBlocked},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]\n    ${LogIgnored},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string[]]\n    ${DisabledInterfaceAliases},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSet", "scriptBlockId": "504fcfc2-39b5-47fc-a78d-5066cfd4f795"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.7000889Z", "eventRecordID": "350", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (2 of 3):\nName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Enabled')) {\n            [object]$__cmdletization_value = ${Enabled}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DefaultInboundAction')) {\n            [object]$__cmdletization_value = ${DefaultInboundAction}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultInboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultInboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DefaultOutboundAction')) {\n            [object]$__cmdletization_value = ${DefaultOutboundAction}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultOutboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultOutboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AllowInboundRules')) {\n            [object]$__cmdletization_value = ${AllowInboundRules}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowInboundRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowInboundRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AllowLocalFirewallRules')) {\n            [object]$__cmdletization_value = ${AllowLocalFirewallRules}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowLocalFirewallRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowLocalFirewallRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AllowLocalIPsecRules')) {\n            [object]$__cmdletization_value = ${AllowLocalIPsecRules}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowLocalIPsecRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowLocalIPsecRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AllowUserApps')) {\n            [object]$__cmdletization_value = ${AllowUserApps}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowUserApps'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowUserApps'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AllowUserPorts')) {\n            [object]$__cmdletization_value = ${AllowUserPorts}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowUserPorts'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowUserPorts'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AllowUnicastResponseToMulticast')) {\n            [object]$__cmdletization_value = ${AllowUnicastResponseToMulticast}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowUnicastResponseToMulticast'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowUnicastResponseToMulticast'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NotifyOnListen')) {\n            [object]$__cmdletization_value = ${NotifyOnListen}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NotifyOnListen'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NotifyOnListen'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('EnableStealthModeForIPsec')) {\n            [object]$__cmdletization_value = ${EnableStealthModeForIPsec}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStealthModeForIPsec'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStealthModeForIPsec'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cm\n\nScriptBlock ID: 504fcfc2-39b5-47fc-a78d-5066cfd4f795\nPath:"}, "eventdata": {"messageNumber": "2", "messageTotal": "3", "scriptBlockText": "Name='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Enabled')) {\n            [object]$__cmdletization_value = ${Enabled}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DefaultInboundAction')) {\n            [object]$__cmdletization_value = ${DefaultInboundAction}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultInboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultInboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DefaultOutboundAction')) {\n            [object]$__cmdletization_value = ${DefaultOutboundAction}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultOutboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultOutboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AllowInboundRules')) {\n            [object]$__cmdletization_value = ${AllowInboundRules}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowInboundRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowInboundRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AllowLocalFirewallRules')) {\n            [object]$__cmdletization_value = ${AllowLocalFirewallRules}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowLocalFirewallRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowLocalFirewallRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AllowLocalIPsecRules')) {\n            [object]$__cmdletization_value = ${AllowLocalIPsecRules}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowLocalIPsecRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowLocalIPsecRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AllowUserApps')) {\n            [object]$__cmdletization_value = ${AllowUserApps}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowUserApps'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowUserApps'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AllowUserPorts')) {\n            [object]$__cmdletization_value = ${AllowUserPorts}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowUserPorts'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowUserPorts'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AllowUnicastResponseToMulticast')) {\n            [object]$__cmdletization_value = ${AllowUnicastResponseToMulticast}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowUnicastResponseToMulticast'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowUnicastResponseToMulticast'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NotifyOnListen')) {\n            [object]$__cmdletization_value = ${NotifyOnListen}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NotifyOnListen'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NotifyOnListen'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('EnableStealthModeForIPsec')) {\n            [object]$__cmdletization_value = ${EnableStealthModeForIPsec}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStealthModeForIPsec'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStealthModeForIPsec'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cm", "scriptBlockId": "504fcfc2-39b5-47fc-a78d-5066cfd4f795"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.7001192Z", "eventRecordID": "351", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (3 of 3):\ndletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LogFileName')) {\n            [object]$__cmdletization_value = ${LogFileName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogFileName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogFileName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LogMaxSizeKilobytes')) {\n            [object]$__cmdletization_value = ${LogMaxSizeKilobytes}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogMaxSizeKilobytes'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogMaxSizeKilobytes'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LogAllowed')) {\n            [object]$__cmdletization_value = ${LogAllowed}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogAllowed'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogAllowed'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LogBlocked')) {\n            [object]$__cmdletization_value = ${LogBlocked}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogBlocked'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogBlocked'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LogIgnored')) {\n            [object]$__cmdletization_value = ${LogIgnored}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogIgnored'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogIgnored'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DisabledInterfaceAliases')) {\n            [object]$__cmdletization_value = ${DisabledInterfaceAliases}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisabledInterfaceAliases'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisabledInterfaceAliases'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallProfile.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetFirewallProfile' -Alias '*'\n        \n\n\nScriptBlock ID: 504fcfc2-39b5-47fc-a78d-5066cfd4f795\nPath:"}, "eventdata": {"messageNumber": "3", "messageTotal": "3", "scriptBlockText": "dletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LogFileName')) {\n            [object]$__cmdletization_value = ${LogFileName}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogFileName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogFileName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LogMaxSizeKilobytes')) {\n            [object]$__cmdletization_value = ${LogMaxSizeKilobytes}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogMaxSizeKilobytes'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogMaxSizeKilobytes'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LogAllowed')) {\n            [object]$__cmdletization_value = ${LogAllowed}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogAllowed'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogAllowed'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LogBlocked')) {\n            [object]$__cmdletization_value = ${LogBlocked}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogBlocked'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogBlocked'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LogIgnored')) {\n            [object]$__cmdletization_value = ${LogIgnored}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogIgnored'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogIgnored'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DisabledInterfaceAliases')) {\n            [object]$__cmdletization_value = ${DisabledInterfaceAliases}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisabledInterfaceAliases'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisabledInterfaceAliases'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallProfile.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetFirewallProfile' -Alias '*'", "scriptBlockId": "504fcfc2-39b5-47fc-a78d-5066cfd4f795"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.7006127Z", "eventRecordID": "352", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 298\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 298\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.7013392Z", "eventRecordID": "353", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 300\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 300\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.7019600Z", "eventRecordID": "354", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetFirewallProfile\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 302\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 302\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetFirewallProfile\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.7023639Z", "eventRecordID": "355", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetFirewallProfile\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 304\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 304\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetFirewallProfile\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.7335491Z", "eventRecordID": "356", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (1 of 1):\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetSecDeltaCollection'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\n\nScriptBlock ID: 26bbceeb-7967-4540-b0e9-5ee32392605f\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "1", "scriptBlockText": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetSecDeltaCollection'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}", "scriptBlockId": "26bbceeb-7967-4540-b0e9-5ee32392605f"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.7409679Z", "eventRecordID": "357", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 306\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 306\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.7416847Z", "eventRecordID": "358", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 308\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 308\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.7791212Z", "eventRecordID": "359", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (1 of 6):\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetIPsecDoSPSetting'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetIPsecDospSetting\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    \n    param(\n    \n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [string]\n    ${Name},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint32]\n    ${StateIdleTimeoutSeconds},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint32]\n    ${PerIPRateLimitQueueIdleTimeoutSeconds},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint32]\n    ${IpV6IPsecUnauthDscp},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint32]\n    ${IpV6IPsecUnauthRateLimitBytesPerSec},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint32]\n    ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint16]\n    ${IpV6IPsecAuthDscp},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint32]\n    ${IpV6IPsecAuthRateLimitBytesPerSec},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint16]\n    ${IcmpV6Dscp},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint32]\n    ${IcmpV6RateLimitBytesPerSec},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint32]\n    ${IpV6FilterExemptDscp},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint32]\n    ${IpV6FilterExemptRateLimitBytesPerSec},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint16]\n    ${DefBlockExemptDscp},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint32]\n    ${DefBlockExemptRateLimitBytesPerSec},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint32]\n    ${MaxStateEntries},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint32]\n    ${MaxPerIPRateLimitQueues},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules]\n    ${EnabledKeyingModules},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags]\n    ${FilteringFlags},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [WildcardPattern[]]\n    ${PublicInterfaceAliases},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [WildcardPattern[]]\n    ${PrivateInterfaceAliases},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${PublicV6Address},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${PrivateV6Address},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Name')) {\n          [object]$__cmdletization_value = ${Name}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('StateIdleTimeoutSeconds')) {\n          [object]$__cmdletization_value = ${StateIdleTimeoutSeconds}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PerIPRateLimitQueueIdleTimeoutSeconds')) {\n          [object]$__cmdletization_value = ${PerIPRateLimitQueueIdleTimeoutSeconds}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthDscp')) {\n          [object]$__cmdletization_value = ${IpV6IPsecUnauthDscp}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthRateLimitBytesPerSec')) {\n          [object]$__cmdletization_value = ${IpV6IPsecUnauthRateLimitBytesPerSec}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthPerIPRateLimitBytesPerSec')) {\n          [object]$__cmdletization_value = ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthDscp')) {\n          [object]$__cmdletization_value = ${IpV6IPsecAuth\n\nScriptBlock ID: 320e8076-0a8b-447a-b05e-593217b95a56\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "6", "scriptBlockText": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetIPsecDoSPSetting'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetIPsecDospSetting\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    \n    param(\n    \n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [string]\n    ${Name},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint32]\n    ${StateIdleTimeoutSeconds},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint32]\n    ${PerIPRateLimitQueueIdleTimeoutSeconds},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint32]\n    ${IpV6IPsecUnauthDscp},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint32]\n    ${IpV6IPsecUnauthRateLimitBytesPerSec},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint32]\n    ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint16]\n    ${IpV6IPsecAuthDscp},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint32]\n    ${IpV6IPsecAuthRateLimitBytesPerSec},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint16]\n    ${IcmpV6Dscp},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint32]\n    ${IcmpV6RateLimitBytesPerSec},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint32]\n    ${IpV6FilterExemptDscp},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint32]\n    ${IpV6FilterExemptRateLimitBytesPerSec},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint16]\n    ${DefBlockExemptDscp},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint32]\n    ${DefBlockExemptRateLimitBytesPerSec},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint32]\n    ${MaxStateEntries},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint32]\n    ${MaxPerIPRateLimitQueues},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules]\n    ${EnabledKeyingModules},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags]\n    ${FilteringFlags},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [WildcardPattern[]]\n    ${PublicInterfaceAliases},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [WildcardPattern[]]\n    ${PrivateInterfaceAliases},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${PublicV6Address},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${PrivateV6Address},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Name')) {\n          [object]$__cmdletization_value = ${Name}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('StateIdleTimeoutSeconds')) {\n          [object]$__cmdletization_value = ${StateIdleTimeoutSeconds}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PerIPRateLimitQueueIdleTimeoutSeconds')) {\n          [object]$__cmdletization_value = ${PerIPRateLimitQueueIdleTimeoutSeconds}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthDscp')) {\n          [object]$__cmdletization_value = ${IpV6IPsecUnauthDscp}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthRateLimitBytesPerSec')) {\n          [object]$__cmdletization_value = ${IpV6IPsecUnauthRateLimitBytesPerSec}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthPerIPRateLimitBytesPerSec')) {\n          [object]$__cmdletization_value = ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthDscp')) {\n          [object]$__cmdletization_value = ${IpV6IPsecAuth", "scriptBlockId": "320e8076-0a8b-447a-b05e-593217b95a56"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.7791475Z", "eventRecordID": "360", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (2 of 6):\nDscp}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthRateLimitBytesPerSec')) {\n          [object]$__cmdletization_value = ${IpV6IPsecAuthRateLimitBytesPerSec}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IcmpV6Dscp')) {\n          [object]$__cmdletization_value = ${IcmpV6Dscp}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IcmpV6RateLimitBytesPerSec')) {\n          [object]$__cmdletization_value = ${IcmpV6RateLimitBytesPerSec}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6RateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6RateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IpV6FilterExemptDscp')) {\n          [object]$__cmdletization_value = ${IpV6FilterExemptDscp}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IpV6FilterExemptRateLimitBytesPerSec')) {\n          [object]$__cmdletization_value = ${IpV6FilterExemptRateLimitBytesPerSec}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DefBlockExemptDscp')) {\n          [object]$__cmdletization_value = ${DefBlockExemptDscp}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DefBlockExemptRateLimitBytesPerSec')) {\n          [object]$__cmdletization_value = ${DefBlockExemptRateLimitBytesPerSec}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('MaxStateEntries')) {\n          [object]$__cmdletization_value = ${MaxStateEntries}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('MaxPerIPRateLimitQueues')) {\n          [object]$__cmdletization_value = ${MaxPerIPRateLimitQueues}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('EnabledKeyingModules')) {\n          [object]$__cmdletization_value = ${EnabledKeyingModules}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('FilteringFlags')) {\n          [object]$__cmdletization_value = ${FilteringFlags}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PublicInterfaceAliases')) {\n          [object]$__cmdletization_value = ${PublicInterfaceAliases}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmd\n\nScriptBlock ID: 320e8076-0a8b-447a-b05e-593217b95a56\nPath:"}, "eventdata": {"messageNumber": "2", "messageTotal": "6", "scriptBlockText": "Dscp}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthRateLimitBytesPerSec')) {\n          [object]$__cmdletization_value = ${IpV6IPsecAuthRateLimitBytesPerSec}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IcmpV6Dscp')) {\n          [object]$__cmdletization_value = ${IcmpV6Dscp}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IcmpV6RateLimitBytesPerSec')) {\n          [object]$__cmdletization_value = ${IcmpV6RateLimitBytesPerSec}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6RateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6RateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IpV6FilterExemptDscp')) {\n          [object]$__cmdletization_value = ${IpV6FilterExemptDscp}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IpV6FilterExemptRateLimitBytesPerSec')) {\n          [object]$__cmdletization_value = ${IpV6FilterExemptRateLimitBytesPerSec}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DefBlockExemptDscp')) {\n          [object]$__cmdletization_value = ${DefBlockExemptDscp}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DefBlockExemptRateLimitBytesPerSec')) {\n          [object]$__cmdletization_value = ${DefBlockExemptRateLimitBytesPerSec}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('MaxStateEntries')) {\n          [object]$__cmdletization_value = ${MaxStateEntries}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('MaxPerIPRateLimitQueues')) {\n          [object]$__cmdletization_value = ${MaxPerIPRateLimitQueues}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('EnabledKeyingModules')) {\n          [object]$__cmdletization_value = ${EnabledKeyingModules}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('FilteringFlags')) {\n          [object]$__cmdletization_value = ${FilteringFlags}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PublicInterfaceAliases')) {\n          [object]$__cmdletization_value = ${PublicInterfaceAliases}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmd", "scriptBlockId": "320e8076-0a8b-447a-b05e-593217b95a56"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.7791661Z", "eventRecordID": "361", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (3 of 6):\nletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PrivateInterfaceAliases')) {\n          [object]$__cmdletization_value = ${PrivateInterfaceAliases}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PublicV6Address')) {\n          [object]$__cmdletization_value = ${PublicV6Address}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PrivateV6Address')) {\n          [object]$__cmdletization_value = ${PrivateV6Address}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetIPsecDospSetting' -Alias '*'\n        \n\nfunction Get-NetIPsecDospSetting\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPsecDoSPSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('ElementName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPsecDospSetting' -Alias '*'\n        \n\nfunction Set-NetIPsecDospSetting\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPsecDoSPSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPsecDoSPSetting')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${StateIdleTimeoutSeconds},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${PerIPRateLimitQueueIdleTimeoutSeconds},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${IpV6IPsecUnauthDscp},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${IpV6IPsecUnauthRateLimitBytesPerSec},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${IpV6IPsecAuthDscp},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${IpV6IPsecAuthRateLimitBytesPerSec},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${IcmpV6Dscp},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${IcmpV6RateLimitBytesPerSec},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${IpV6FilterExemptDscp},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${IpV6FilterExemptRateLimitBytesPerSec},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${DefBlockExemptDscp},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${DefBlockExemptRateLimitBytesPerSec},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${MaxStateEntries},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${MaxPerIPRateLimitQueues},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules]\n    ${EnabledKeyingModules},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags]\n    ${FilteringFlags},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [WildcardPattern[]]\n    ${PublicInterfaceAliases},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [WildcardPattern[]]\n    ${PrivateInterfaceAliases},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${PublicV6Address},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${PrivateV6Address},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetNa\n\nScriptBlock ID: 320e8076-0a8b-447a-b05e-593217b95a56\nPath:"}, "eventdata": {"messageNumber": "3", "messageTotal": "6", "scriptBlockText": "letization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PrivateInterfaceAliases')) {\n          [object]$__cmdletization_value = ${PrivateInterfaceAliases}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PublicV6Address')) {\n          [object]$__cmdletization_value = ${PublicV6Address}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PrivateV6Address')) {\n          [object]$__cmdletization_value = ${PrivateV6Address}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetIPsecDospSetting' -Alias '*'\n        \n\nfunction Get-NetIPsecDospSetting\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPsecDoSPSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('ElementName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPsecDospSetting' -Alias '*'\n        \n\nfunction Set-NetIPsecDospSetting\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPsecDoSPSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPsecDoSPSetting')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${StateIdleTimeoutSeconds},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${PerIPRateLimitQueueIdleTimeoutSeconds},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${IpV6IPsecUnauthDscp},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${IpV6IPsecUnauthRateLimitBytesPerSec},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${IpV6IPsecAuthDscp},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${IpV6IPsecAuthRateLimitBytesPerSec},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${IcmpV6Dscp},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${IcmpV6RateLimitBytesPerSec},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${IpV6FilterExemptDscp},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${IpV6FilterExemptRateLimitBytesPerSec},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${DefBlockExemptDscp},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${DefBlockExemptRateLimitBytesPerSec},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${MaxStateEntries},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${MaxPerIPRateLimitQueues},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules]\n    ${EnabledKeyingModules},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags]\n    ${FilteringFlags},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [WildcardPattern[]]\n    ${PublicInterfaceAliases},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [WildcardPattern[]]\n    ${PrivateInterfaceAliases},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${PublicV6Address},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${PrivateV6Address},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetNa", "scriptBlockId": "320e8076-0a8b-447a-b05e-593217b95a56"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.7791873Z", "eventRecordID": "362", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (4 of 6):\nme='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('ElementName', $__cmdletization_values, $true, 'Default')\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('StateIdleTimeoutSeconds')) {\n            [object]$__cmdletization_value = ${StateIdleTimeoutSeconds}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PerIPRateLimitQueueIdleTimeoutSeconds')) {\n            [object]$__cmdletization_value = ${PerIPRateLimitQueueIdleTimeoutSeconds}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthDscp')) {\n            [object]$__cmdletization_value = ${IpV6IPsecUnauthDscp}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthRateLimitBytesPerSec')) {\n            [object]$__cmdletization_value = ${IpV6IPsecUnauthRateLimitBytesPerSec}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthPerIPRateLimitBytesPerSec')) {\n            [object]$__cmdletization_value = ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthDscp')) {\n            [object]$__cmdletization_value = ${IpV6IPsecAuthDscp}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthRateLimitBytesPerSec')) {\n            [object]$__cmdletization_value = ${IpV6IPsecAuthRateLimitBytesPerSec}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IcmpV6Dscp')) {\n            [object]$__cmdletization_value = ${IcmpV6Dscp}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IcmpV6RateLimitBytesPerSec')) {\n            [object]$__cmdletization_value = ${IcmpV6RateLimitBytesPerSec}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6RateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6RateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IpV6FilterExemptDscp')) {\n            [object]$__cmdletization_value = ${IpV6FilterExemptDscp}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IpV6FilterEx\n\nScriptBlock ID: 320e8076-0a8b-447a-b05e-593217b95a56\nPath:"}, "eventdata": {"messageNumber": "4", "messageTotal": "6", "scriptBlockText": "me='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('ElementName', $__cmdletization_values, $true, 'Default')\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('StateIdleTimeoutSeconds')) {\n            [object]$__cmdletization_value = ${StateIdleTimeoutSeconds}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PerIPRateLimitQueueIdleTimeoutSeconds')) {\n            [object]$__cmdletization_value = ${PerIPRateLimitQueueIdleTimeoutSeconds}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthDscp')) {\n            [object]$__cmdletization_value = ${IpV6IPsecUnauthDscp}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthRateLimitBytesPerSec')) {\n            [object]$__cmdletization_value = ${IpV6IPsecUnauthRateLimitBytesPerSec}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthPerIPRateLimitBytesPerSec')) {\n            [object]$__cmdletization_value = ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthDscp')) {\n            [object]$__cmdletization_value = ${IpV6IPsecAuthDscp}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthRateLimitBytesPerSec')) {\n            [object]$__cmdletization_value = ${IpV6IPsecAuthRateLimitBytesPerSec}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IcmpV6Dscp')) {\n            [object]$__cmdletization_value = ${IcmpV6Dscp}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IcmpV6RateLimitBytesPerSec')) {\n            [object]$__cmdletization_value = ${IcmpV6RateLimitBytesPerSec}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6RateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6RateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IpV6FilterExemptDscp')) {\n            [object]$__cmdletization_value = ${IpV6FilterExemptDscp}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IpV6FilterEx", "scriptBlockId": "320e8076-0a8b-447a-b05e-593217b95a56"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.7792051Z", "eventRecordID": "363", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (5 of 6):\nemptRateLimitBytesPerSec')) {\n            [object]$__cmdletization_value = ${IpV6FilterExemptRateLimitBytesPerSec}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DefBlockExemptDscp')) {\n            [object]$__cmdletization_value = ${DefBlockExemptDscp}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DefBlockExemptRateLimitBytesPerSec')) {\n            [object]$__cmdletization_value = ${DefBlockExemptRateLimitBytesPerSec}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxStateEntries')) {\n            [object]$__cmdletization_value = ${MaxStateEntries}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxPerIPRateLimitQueues')) {\n            [object]$__cmdletization_value = ${MaxPerIPRateLimitQueues}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('EnabledKeyingModules')) {\n            [object]$__cmdletization_value = ${EnabledKeyingModules}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('FilteringFlags')) {\n            [object]$__cmdletization_value = ${FilteringFlags}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PublicInterfaceAliases')) {\n            [object]$__cmdletization_value = ${PublicInterfaceAliases}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PrivateInterfaceAliases')) {\n            [object]$__cmdletization_value = ${PrivateInterfaceAliases}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PublicV6Address')) {\n            [object]$__cmdletization_value = ${PublicV6Address}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PrivateV6Address')) {\n            [object]$__cmdletization_value = ${PrivateV6Address}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPsecDospSetting' -Alias '*'\n        \n\nfunction Remove-NetIPsecDospSetting\n{\n    [Cmdlet\n\nScriptBlock ID: 320e8076-0a8b-447a-b05e-593217b95a56\nPath:"}, "eventdata": {"messageNumber": "5", "messageTotal": "6", "scriptBlockText": "emptRateLimitBytesPerSec')) {\n            [object]$__cmdletization_value = ${IpV6FilterExemptRateLimitBytesPerSec}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DefBlockExemptDscp')) {\n            [object]$__cmdletization_value = ${DefBlockExemptDscp}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DefBlockExemptRateLimitBytesPerSec')) {\n            [object]$__cmdletization_value = ${DefBlockExemptRateLimitBytesPerSec}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxStateEntries')) {\n            [object]$__cmdletization_value = ${MaxStateEntries}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxPerIPRateLimitQueues')) {\n            [object]$__cmdletization_value = ${MaxPerIPRateLimitQueues}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('EnabledKeyingModules')) {\n            [object]$__cmdletization_value = ${EnabledKeyingModules}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('FilteringFlags')) {\n            [object]$__cmdletization_value = ${FilteringFlags}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PublicInterfaceAliases')) {\n            [object]$__cmdletization_value = ${PublicInterfaceAliases}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PrivateInterfaceAliases')) {\n            [object]$__cmdletization_value = ${PrivateInterfaceAliases}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PublicV6Address')) {\n            [object]$__cmdletization_value = ${PublicV6Address}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PrivateV6Address')) {\n            [object]$__cmdletization_value = ${PrivateV6Address}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPsecDospSetting' -Alias '*'\n        \n\nfunction Remove-NetIPsecDospSetting\n{\n    [Cmdlet", "scriptBlockId": "320e8076-0a8b-447a-b05e-593217b95a56"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.7792152Z", "eventRecordID": "364", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (6 of 6):\nBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPsecDoSPSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPsecDoSPSetting')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('ElementName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetIPsecDospSetting' -Alias '*'\n        \n\n\nScriptBlock ID: 320e8076-0a8b-447a-b05e-593217b95a56\nPath:"}, "eventdata": {"messageNumber": "6", "messageTotal": "6", "scriptBlockText": "Binding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPsecDoSPSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPsecDoSPSetting')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('ElementName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetIPsecDospSetting' -Alias '*'", "scriptBlockId": "320e8076-0a8b-447a-b05e-593217b95a56"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.7797609Z", "eventRecordID": "365", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 310\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 310\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.7811098Z", "eventRecordID": "366", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 312\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 312\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.7814990Z", "eventRecordID": "367", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"New-NetIPsecDospSetting\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 314\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 314\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"New-NetIPsecDospSetting\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.7818639Z", "eventRecordID": "368", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPsecDospSetting\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 316\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 316\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPsecDospSetting\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.7822608Z", "eventRecordID": "369", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetIPsecDospSetting\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 318\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 318\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetIPsecDospSetting\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.7826870Z", "eventRecordID": "370", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetIPsecDospSetting\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 320\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 320\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetIPsecDospSetting\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.8076804Z", "eventRecordID": "371", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (1 of 1):\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetIPsecIdentity'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\n\nScriptBlock ID: c91105e5-4b5f-469a-b03e-a43d3b193e42\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "1", "scriptBlockText": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetIPsecIdentity'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}", "scriptBlockId": "c91105e5-4b5f-469a-b03e-a43d3b193e42"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.8084160Z", "eventRecordID": "372", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 322\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 322\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.8087859Z", "eventRecordID": "373", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 324\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 324\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.8331902Z", "eventRecordID": "374", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (1 of 1):\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetMainModeSA'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetIPsecMainModeSA\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecQuickModeSA},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeSA') -and (@('ByAssociatedNetIPsecQuickModeSA') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeSA}, 'MSFT_NetSAAssociation', 'Dependent', 'Antecedent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeSA.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPsecMainModeSA' -Alias '*'\n        \n\nfunction Remove-NetIPsecMainModeSA\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecQuickModeSA},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeSA')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeSA') -and (@('ByAssociatedNetIPsecQuickModeSA') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeSA}, 'MSFT_NetSAAssociation', 'Dependent', 'Antecedent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByAssociatedNetIPsecQuickModeSA', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeSA.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetIPsecMainModeSA' -Alias '*'\n        \n\n\nScriptBlock ID: 17cbb2da-cd76-4f1e-9656-de2dc5cd1bb2\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "1", "scriptBlockText": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetMainModeSA'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetIPsecMainModeSA\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecQuickModeSA},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeSA') -and (@('ByAssociatedNetIPsecQuickModeSA') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeSA}, 'MSFT_NetSAAssociation', 'Dependent', 'Antecedent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeSA.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPsecMainModeSA' -Alias '*'\n        \n\nfunction Remove-NetIPsecMainModeSA\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecQuickModeSA},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeSA')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeSA') -and (@('ByAssociatedNetIPsecQuickModeSA') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeSA}, 'MSFT_NetSAAssociation', 'Dependent', 'Antecedent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByAssociatedNetIPsecQuickModeSA', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecMainModeSA.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetIPsecMainModeSA' -Alias '*'", "scriptBlockId": "17cbb2da-cd76-4f1e-9656-de2dc5cd1bb2"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.8337021Z", "eventRecordID": "375", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 326\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 326\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.8340796Z", "eventRecordID": "376", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 328\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 328\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.8344347Z", "eventRecordID": "377", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPsecMainModeSA\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 330\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 330\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPsecMainModeSA\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.8348310Z", "eventRecordID": "378", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetIPsecMainModeSA\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 332\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 332\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetIPsecMainModeSA\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.8597210Z", "eventRecordID": "379", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (1 of 1):\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetQuickModeSA'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetIPsecQuickModeSA\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeSA},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeSA') -and (@('ByAssociatedNetIPsecMainModeSA') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeSA}, 'MSFT_NetSAAssociation', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecQuickModeSA.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPsecQuickModeSA' -Alias '*'\n        \n\nfunction Remove-NetIPsecQuickModeSA\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeSA},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetQuickModeSA')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeSA') -and (@('ByAssociatedNetIPsecMainModeSA') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeSA}, 'MSFT_NetSAAssociation', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByAssociatedNetIPsecMainModeSA', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecQuickModeSA.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetIPsecQuickModeSA' -Alias '*'\n        \n\n\nScriptBlock ID: 0eff5233-bf05-42bf-86e0-94573ab87358\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "1", "scriptBlockText": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetQuickModeSA'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetIPsecQuickModeSA\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeSA},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeSA') -and (@('ByAssociatedNetIPsecMainModeSA') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeSA}, 'MSFT_NetSAAssociation', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecQuickModeSA.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPsecQuickModeSA' -Alias '*'\n        \n\nfunction Remove-NetIPsecQuickModeSA\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]\n    [Alias('ID')]\n    [ValidateNotNull()]\n    [string[]]\n    ${Name},\n\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNetIPsecMainModeSA},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetQuickModeSA')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]\n    [Parameter(ParameterSetName='GetAll')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Name})\n        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeSA') -and (@('ByAssociatedNetIPsecMainModeSA') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeSA}, 'MSFT_NetSAAssociation', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'ByAssociatedNetIPsecMainModeSA', 'GetAll', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetIPsecQuickModeSA.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetIPsecQuickModeSA' -Alias '*'", "scriptBlockId": "0eff5233-bf05-42bf-86e0-94573ab87358"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.8602424Z", "eventRecordID": "380", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 334\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 334\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.8605774Z", "eventRecordID": "381", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 336\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 336\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.8609872Z", "eventRecordID": "382", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPsecQuickModeSA\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 338\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 338\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPsecQuickModeSA\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.8619371Z", "eventRecordID": "383", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetIPsecQuickModeSA\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 340\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 340\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetIPsecQuickModeSA\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.8938277Z", "eventRecordID": "384", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (1 of 2):\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetSecuritySettingData'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetFirewallSetting\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetSecuritySettingData')]\n\n    param(\n    \n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallSetting.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetFirewallSetting' -Alias '*'\n        \n\nfunction Set-NetFirewallSetting\n{\n    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetSecuritySettingData')]\n\n    param(\n    \n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetSecuritySettingData')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.TrafficExemption]\n    ${Exemptions},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]\n    ${EnableStatefulFtp},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]\n    ${EnableStatefulPptp},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${RemoteMachineTransportAuthorizationList},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${RemoteMachineTunnelAuthorizationList},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${RemoteUserTransportAuthorizationList},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${RemoteUserTunnelAuthorizationList},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]\n    ${RequireFullAuthSupport},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.CRLCheck]\n    ${CertValidationLevel},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecThroughNAT]\n    ${AllowIPsecThroughNAT},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${MaxSAIdleTimeSeconds},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyEncoding]\n    ${KeyEncoding},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PacketQueuing]\n    ${EnablePacketQueuing},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Exemptions')) {\n            [object]$__cmdletization_value = ${Exemptions}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Exemptions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.TrafficExemption'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Exemptions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.TrafficExemption'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('EnableStatefulFtp')) {\n            [object]$__cmdletization_value = ${EnableStatefulFtp}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStatefulFtp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStatefulFtp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('EnableStatefulPptp')) {\n            [object]$__cmdletization_value = ${EnableStatefulPptp}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStatefulPptp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStatefulPptp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemoteMachineTransportAuthorizationList')) {\n            [object]$__cmdletization_value = ${RemoteMachineTransportAuthorizationList}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachineTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachineTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemoteMachineTunnelAuthorizationList')) {\n            [object]$__cmdletization_value = ${RemoteMachineTunnelAuthorizationList}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachineTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachineTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemoteUserTransportAuthorizationList')) {\n          \n\nScriptBlock ID: 8cc90aaa-de92-4883-b540-81b1ae01c8e0\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "2", "scriptBlockText": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetSecuritySettingData'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetFirewallSetting\n{\n    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetSecuritySettingData')]\n\n    param(\n    \n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${All},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='GetAll')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallSetting.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetFirewallSetting' -Alias '*'\n        \n\nfunction Set-NetFirewallSetting\n{\n    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetSecuritySettingData')]\n\n    param(\n    \n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetSecuritySettingData')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.TrafficExemption]\n    ${Exemptions},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]\n    ${EnableStatefulFtp},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]\n    ${EnableStatefulPptp},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${RemoteMachineTransportAuthorizationList},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${RemoteMachineTunnelAuthorizationList},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${RemoteUserTransportAuthorizationList},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${RemoteUserTunnelAuthorizationList},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]\n    ${RequireFullAuthSupport},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.CRLCheck]\n    ${CertValidationLevel},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecThroughNAT]\n    ${AllowIPsecThroughNAT},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${MaxSAIdleTimeSeconds},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyEncoding]\n    ${KeyEncoding},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PacketQueuing]\n    ${EnablePacketQueuing},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Exemptions')) {\n            [object]$__cmdletization_value = ${Exemptions}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Exemptions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.TrafficExemption'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Exemptions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.TrafficExemption'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('EnableStatefulFtp')) {\n            [object]$__cmdletization_value = ${EnableStatefulFtp}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStatefulFtp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStatefulFtp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('EnableStatefulPptp')) {\n            [object]$__cmdletization_value = ${EnableStatefulPptp}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStatefulPptp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStatefulPptp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemoteMachineTransportAuthorizationList')) {\n            [object]$__cmdletization_value = ${RemoteMachineTransportAuthorizationList}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachineTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachineTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemoteMachineTunnelAuthorizationList')) {\n            [object]$__cmdletization_value = ${RemoteMachineTunnelAuthorizationList}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachineTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachineTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemoteUserTransportAuthorizationList')) {", "scriptBlockId": "8cc90aaa-de92-4883-b540-81b1ae01c8e0"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.8938704Z", "eventRecordID": "385", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (2 of 2):\n  [object]$__cmdletization_value = ${RemoteUserTransportAuthorizationList}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUserTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUserTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemoteUserTunnelAuthorizationList')) {\n            [object]$__cmdletization_value = ${RemoteUserTunnelAuthorizationList}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUserTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUserTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RequireFullAuthSupport')) {\n            [object]$__cmdletization_value = ${RequireFullAuthSupport}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireFullAuthSupport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireFullAuthSupport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('CertValidationLevel')) {\n            [object]$__cmdletization_value = ${CertValidationLevel}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CertValidationLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.CRLCheck'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CertValidationLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.CRLCheck'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AllowIPsecThroughNAT')) {\n            [object]$__cmdletization_value = ${AllowIPsecThroughNAT}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowIPsecThroughNAT'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecThroughNAT'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowIPsecThroughNAT'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecThroughNAT'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxSAIdleTimeSeconds')) {\n            [object]$__cmdletization_value = ${MaxSAIdleTimeSeconds}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxSAIdleTimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxSAIdleTimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('KeyEncoding')) {\n            [object]$__cmdletization_value = ${KeyEncoding}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyEncoding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyEncoding'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyEncoding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyEncoding'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('EnablePacketQueuing')) {\n            [object]$__cmdletization_value = ${EnablePacketQueuing}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnablePacketQueuing'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PacketQueuing'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnablePacketQueuing'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PacketQueuing'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallSetting.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetFirewallSetting' -Alias '*'\n        \n\n\nScriptBlock ID: 8cc90aaa-de92-4883-b540-81b1ae01c8e0\nPath:"}, "eventdata": {"messageNumber": "2", "messageTotal": "2", "scriptBlockText": "[object]$__cmdletization_value = ${RemoteUserTransportAuthorizationList}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUserTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUserTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RemoteUserTunnelAuthorizationList')) {\n            [object]$__cmdletization_value = ${RemoteUserTunnelAuthorizationList}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUserTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUserTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RequireFullAuthSupport')) {\n            [object]$__cmdletization_value = ${RequireFullAuthSupport}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireFullAuthSupport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireFullAuthSupport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('CertValidationLevel')) {\n            [object]$__cmdletization_value = ${CertValidationLevel}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CertValidationLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.CRLCheck'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CertValidationLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.CRLCheck'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AllowIPsecThroughNAT')) {\n            [object]$__cmdletization_value = ${AllowIPsecThroughNAT}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowIPsecThroughNAT'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecThroughNAT'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowIPsecThroughNAT'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecThroughNAT'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxSAIdleTimeSeconds')) {\n            [object]$__cmdletization_value = ${MaxSAIdleTimeSeconds}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxSAIdleTimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxSAIdleTimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('KeyEncoding')) {\n            [object]$__cmdletization_value = ${KeyEncoding}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyEncoding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyEncoding'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyEncoding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyEncoding'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('EnablePacketQueuing')) {\n            [object]$__cmdletization_value = ${EnablePacketQueuing}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnablePacketQueuing'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PacketQueuing'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnablePacketQueuing'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PacketQueuing'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetFirewallSetting.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetFirewallSetting' -Alias '*'", "scriptBlockId": "8cc90aaa-de92-4883-b540-81b1ae01c8e0"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.8944130Z", "eventRecordID": "386", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 342\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 342\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.8964683Z", "eventRecordID": "387", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 344\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 344\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.8975481Z", "eventRecordID": "388", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetFirewallSetting\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 346\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 346\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetFirewallSetting\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.8987128Z", "eventRecordID": "389", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetFirewallSetting\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 348\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 348\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetFirewallSetting\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "3", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.9227138Z", "eventRecordID": "390", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "WARNING", "message": "Creating Scriptblock text (1 of 1):\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetGPO'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Open-NetGPO\n{\n    [CmdletBinding(PositionalBinding=$false)]\n    \n    [OutputType([System.String])]\n    param(\n    \n    [Parameter(ParameterSetName='Open0', Mandatory=$true, Position=0)]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Open0')]\n    [string]\n    ${DomainController},\n\n    [Parameter(ParameterSetName='Open0')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Open0')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Open0')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DomainController')) {\n          [object]$__cmdletization_value = ${DomainController}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DomainController'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DomainController'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GPOSession'; ParameterType = 'System.String'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Open', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetGPO.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Open-NetGPO' -Alias '*'\n        \n\nfunction Save-NetGPO\n{\n    [CmdletBinding(PositionalBinding=$false)]\n    \n    \n    param(\n    \n    [Parameter(ParameterSetName='Save1', Mandatory=$true, Position=0)]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='Save1')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Save1')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Save1')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('GPOSession')) {\n          [object]$__cmdletization_value = ${GPOSession}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Save', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetGPO.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Save-NetGPO' -Alias '*'\n        \n\n\nScriptBlock ID: c4f99658-5a14-4a49-9381-fcc9db8ba090\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "1", "scriptBlockText": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'root/standardcimv2/MSFT_NetGPO'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Open-NetGPO\n{\n    [CmdletBinding(PositionalBinding=$false)]\n    \n    [OutputType([System.String])]\n    param(\n    \n    [Parameter(ParameterSetName='Open0', Mandatory=$true, Position=0)]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Open0')]\n    [string]\n    ${DomainController},\n\n    [Parameter(ParameterSetName='Open0')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Open0')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Open0')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DomainController')) {\n          [object]$__cmdletization_value = ${DomainController}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DomainController'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DomainController'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GPOSession'; ParameterType = 'System.String'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Open', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetGPO.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Open-NetGPO' -Alias '*'\n        \n\nfunction Save-NetGPO\n{\n    [CmdletBinding(PositionalBinding=$false)]\n    \n    \n    param(\n    \n    [Parameter(ParameterSetName='Save1', Mandatory=$true, Position=0)]\n    [string]\n    ${GPOSession},\n\n    [Parameter(ParameterSetName='Save1')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Save1')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Save1')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('GPOSession')) {\n          [object]$__cmdletization_value = ${GPOSession}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Save', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP NetGPO.cmdletDefinition.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Save-NetGPO' -Alias '*'", "scriptBlockId": "c4f99658-5a14-4a49-9381-fcc9db8ba090"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.9232879Z", "eventRecordID": "391", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 350\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 350\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.9236617Z", "eventRecordID": "392", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 352\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 352\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.9240625Z", "eventRecordID": "393", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Open-NetGPO\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 354\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 354\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Open-NetGPO\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:38.9244342Z", "eventRecordID": "394", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Save-NetGPO\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 356\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 38\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 356\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Save-NetGPO\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "5", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:39.0967838Z", "eventRecordID": "395", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "VERBOSE", "message": "Creating Scriptblock text (1 of 1):\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n\nScriptBlock ID: f3001c78-1aea-42f3-959d-a75a02d2cf41\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "1", "scriptBlockText": "function __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}", "scriptBlockId": "f3001c78-1aea-42f3-959d-a75a02d2cf41"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:43.0303370Z", "eventRecordID": "396", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Get-NetFirewallRule): \"Get-NetFirewallRule\"\nParameterBinding(Get-NetFirewallRule): name=\"Name\"; value=\"*ssh*\"\nParameterBinding(Get-NetFirewallRule): name=\"All\"; value=\"False\"\nParameterBinding(Get-NetFirewallRule): name=\"PolicyStore\"; value=\"\"\nParameterBinding(Get-NetFirewallRule): name=\"GPOSession\"; value=\"\"\nParameterBinding(Get-NetFirewallRule): name=\"TracePolicyStore\"; value=\"False\"\nParameterBinding(Get-NetFirewallRule): name=\"ThrottleLimit\"; value=\"0\"\nParameterBinding(Get-NetFirewallRule): name=\"AsJob\"; value=\"False\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 29\n        Command Name = Get-NetFirewallRule\n        Command Type = Function\n        Script Name = \n        Command Path = \n        Sequence Number = 358\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 29\n        Command Name = Get-NetFirewallRule\n        Command Type = Function\n        Script Name = \n        Command Path = \n        Sequence Number = 358\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Get-NetFirewallRule): \"Get-NetFirewallRule\"\nParameterBinding(Get-NetFirewallRule): name=\"Name\"; value=\"*ssh*\"\nParameterBinding(Get-NetFirewallRule): name=\"All\"; value=\"False\"\nParameterBinding(Get-NetFirewallRule): name=\"PolicyStore\"; value=\"\"\nParameterBinding(Get-NetFirewallRule): name=\"GPOSession\"; value=\"\"\nParameterBinding(Get-NetFirewallRule): name=\"TracePolicyStore\"; value=\"False\"\nParameterBinding(Get-NetFirewallRule): name=\"ThrottleLimit\"; value=\"0\"\nParameterBinding(Get-NetFirewallRule): name=\"AsJob\"; value=\"False\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:43.0311975Z", "eventRecordID": "397", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Out-Default): \"Out-Default\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetFirewallRule (CreationClassName = \"MSFT?FW?FirewallRule?OpenSSH-Server-In-..., PolicyRuleName = \"\", SystemCreationClassName = \"\", SystemName = \"\")\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 29\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 360\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 29\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 360\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Out-Default): \"Out-Default\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetFirewallRule (CreationClassName = \"MSFT?FW?FirewallRule?OpenSSH-Server-In-..., PolicyRuleName = \"\", SystemCreationClassName = \"\", SystemName = \"\")\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "5", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:19:43.0340628Z", "eventRecordID": "398", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "VERBOSE", "message": "Creating Scriptblock text (1 of 1):\nprompt\n\nScriptBlock ID: 041125e1-c454-4a19-9fd5-4456d73b70dd\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "1", "scriptBlockText": "prompt", "scriptBlockId": "041125e1-c454-4a19-9fd5-4456d73b70dd"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:19:43.0354227Z", "eventRecordID": "399", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 40\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = C:\\Program Files\\WindowsPowerShell\\Modules\\PSReadline\\2.0.0\\PSReadLine.psm1\n        Command Path = \n        Sequence Number = 362\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 40\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = C:\\Program Files\\WindowsPowerShell\\Modules\\PSReadline\\2.0.0\\PSReadLine.psm1\n        Command Path = \n        Sequence Number = 362\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\""}}}'''
        ]

        responses = send_multiple_logs(logs, location="stdin", log_format="json")

        # Ensure we receive a response for each log sent
        self.assertEqual(len(responses), len(logs))

        for _, response in enumerate(responses):
            self.assertEqual(response.status, LogtestStatus.RuleMatch)
            self.assertEqual(response.decoder, 'json')

            # Example: Set expected Wazuh rule ID and level when analyzing logs
            # expected_rule_id = None  # Replace with actual rule ID
            # expected_rule_level = None  # Replace with actual rule level

            # self.assertEqual(response.rule_id, expected_rule_id)
            # self.assertEqual(response.rule_level, expected_rule_level)

        # TODO: Write the expected result as test cases when the logs are analyzed by Wazuh.
        self.fail("Test not implemented yet. Define expected results.")

    def test_id4103_4104_openssh_server_install(self) -> None:
        # Logs extracted from EVTX file
        logs = [
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:02:14.3939392Z", "eventRecordID": "109", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(PSConsoleHostReadLine): \"PSConsoleHostReadLine\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 3\n        Command Name = PSConsoleHostReadLine\n        Command Type = Function\n        Script Name = \n        Command Path = \n        Sequence Number = 20\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 3\n        Command Name = PSConsoleHostReadLine\n        Command Type = Function\n        Script Name = \n        Command Path = \n        Sequence Number = 20\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(PSConsoleHostReadLine): \"PSConsoleHostReadLine\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "5", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:02:14.4062532Z", "eventRecordID": "110", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "VERBOSE", "message": "Creating Scriptblock text (1 of 1):\nAdd-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0\n\nScriptBlock ID: fa9d0714-1fcd-4765-ab4f-ccea100a4b1a\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "1", "scriptBlockText": "Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0", "scriptBlockId": "fa9d0714-1fcd-4765-ab4f-ccea100a4b1a"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:02:14.6190458Z", "eventRecordID": "111", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Apply-WindowsUnattend\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Use-WindowsUnattend\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 22\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 22\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Apply-WindowsUnattend\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Use-WindowsUnattend\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:02:14.6199063Z", "eventRecordID": "112", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Add-ProvisionedAppxPackage\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Add-AppxProvisionedPackage\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 24\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 24\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Add-ProvisionedAppxPackage\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Add-AppxProvisionedPackage\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:02:14.6202298Z", "eventRecordID": "113", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Remove-ProvisionedAppxPackage\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Remove-AppxProvisionedPackage\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 26\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 26\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Remove-ProvisionedAppxPackage\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Remove-AppxProvisionedPackage\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:02:14.6205182Z", "eventRecordID": "114", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Get-ProvisionedAppxPackage\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Get-AppxProvisionedPackage\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 28\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 28\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Get-ProvisionedAppxPackage\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Get-AppxProvisionedPackage\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:02:14.6208000Z", "eventRecordID": "115", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Optimize-ProvisionedAppxPackages\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Optimize-AppxProvisionedPackages\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 30\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 30\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Optimize-ProvisionedAppxPackages\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Optimize-AppxProvisionedPackages\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:02:14.6210689Z", "eventRecordID": "116", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Set-ProvisionedAppXDataFile\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Set-AppXProvisionedDataFile\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 32\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 32\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Set-ProvisionedAppXDataFile\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Set-AppXProvisionedDataFile\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:02:14.6215505Z", "eventRecordID": "117", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Add-AppProvisionedPackage\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Add-AppxProvisionedPackage\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 34\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 34\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Add-AppProvisionedPackage\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Add-AppxProvisionedPackage\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:02:14.6218198Z", "eventRecordID": "118", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Remove-AppProvisionedPackage\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Remove-AppxProvisionedPackage\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 36\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 36\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Remove-AppProvisionedPackage\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Remove-AppxProvisionedPackage\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:02:14.6223271Z", "eventRecordID": "119", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Get-AppProvisionedPackage\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Get-AppxProvisionedPackage\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 38\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 38\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Get-AppProvisionedPackage\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Get-AppxProvisionedPackage\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:02:14.6227305Z", "eventRecordID": "120", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Optimize-AppProvisionedPackages\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Optimize-AppxProvisionedPackages\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 40\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 40\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Optimize-AppProvisionedPackages\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Optimize-AppxProvisionedPackages\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:02:14.6230235Z", "eventRecordID": "121", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Set-AppPackageProvisionedDataFile\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Set-AppXProvisionedDataFile\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 42\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 42\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Set-AppPackageProvisionedDataFile\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Set-AppXProvisionedDataFile\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:02:14.6233489Z", "eventRecordID": "122", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Add-ProvisionedAppPackage\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Add-AppxProvisionedPackage\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 44\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 44\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Add-ProvisionedAppPackage\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Add-AppxProvisionedPackage\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:02:14.6238451Z", "eventRecordID": "123", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Remove-ProvisionedAppPackage\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Remove-AppxProvisionedPackage\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 46\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 46\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Remove-ProvisionedAppPackage\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Remove-AppxProvisionedPackage\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:02:14.6241597Z", "eventRecordID": "124", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Get-ProvisionedAppPackage\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Get-AppxProvisionedPackage\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 48\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 48\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Get-ProvisionedAppPackage\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Get-AppxProvisionedPackage\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:02:14.6244781Z", "eventRecordID": "125", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Optimize-ProvisionedAppPackages\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Optimize-AppxProvisionedPackages\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 50\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 50\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Optimize-ProvisionedAppPackages\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Optimize-AppxProvisionedPackages\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:02:14.6249028Z", "eventRecordID": "126", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Set-ProvisionedAppPackageDataFile\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Set-AppXProvisionedDataFile\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 52\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Set-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 52\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-Alias): \"Set-Alias\"\nParameterBinding(Set-Alias): name=\"Name\"; value=\"Set-ProvisionedAppPackageDataFile\"\nParameterBinding(Set-Alias): name=\"Value\"; value=\"Set-AppXProvisionedDataFile\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:02:14.6272042Z", "eventRecordID": "127", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"*\"\nParameterBinding(Export-ModuleMember): name=\"Cmdlet\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 54\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 7\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Dism\\Dism.psm1\n        Command Path = \n        Sequence Number = 54\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"*\"\nParameterBinding(Export-ModuleMember): name=\"Cmdlet\"; value=\"*\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:04:16.4550981Z", "eventRecordID": "128", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Add-WindowsCapability): \"Add-WindowsCapability\"\nParameterBinding(Add-WindowsCapability): name=\"Online\"; value=\"True\"\nParameterBinding(Add-WindowsCapability): name=\"Name\"; value=\"OpenSSH.Server~~~~0.0.1.0\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 6\n        Command Name = Add-WindowsCapability\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 56\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 6\n        Command Name = Add-WindowsCapability\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 56\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Add-WindowsCapability): \"Add-WindowsCapability\"\nParameterBinding(Add-WindowsCapability): name=\"Online\"; value=\"True\"\nParameterBinding(Add-WindowsCapability): name=\"Name\"; value=\"OpenSSH.Server~~~~0.0.1.0\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:04:16.4556852Z", "eventRecordID": "129", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Out-Default): \"Out-Default\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Microsoft.Dism.Commands.ImageObject\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 6\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 58\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 6\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 58\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Out-Default): \"Out-Default\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Microsoft.Dism.Commands.ImageObject\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "5", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:04:16.4785167Z", "eventRecordID": "130", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "VERBOSE", "message": "Creating Scriptblock text (1 of 1):\nprompt\n\nScriptBlock ID: 1b654399-bec0-4be2-ba2b-a35f7dca7384\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "1", "scriptBlockText": "prompt", "scriptBlockId": "1b654399-bec0-4be2-ba2b-a35f7dca7384"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:04:16.4801035Z", "eventRecordID": "131", "processID": "6012", "threadID": "5140", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 9\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = C:\\Program Files\\WindowsPowerShell\\Modules\\PSReadline\\2.0.0\\PSReadLine.psm1\n        Command Path = \n        Sequence Number = 60\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 95e96d56-040a-43c5-9b7c-b459d24bbb56\n        Host Application = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n        Engine Version = 5.1.19041.906\n        Runspace ID = d1a7cc59-e5d0-4b40-bf2e-0e4265f432c0\n        Pipeline ID = 9\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = C:\\Program Files\\WindowsPowerShell\\Modules\\PSReadline\\2.0.0\\PSReadLine.psm1\n        Command Path = \n        Sequence Number = 60\n        User = OFFSEC\\admmig\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "40961", "version": "1", "level": "4", "task": "4", "opcode": "1", "keywords": "0x0", "systemTime": "2021-04-22T10:04:36.3125391Z", "eventRecordID": "132", "processID": "4984", "threadID": "2592", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "PowerShell console is starting up"}, "eventdata": {}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "53504", "version": "1", "level": "4", "task": "111", "opcode": "10", "keywords": "0x0", "systemTime": "2021-04-22T10:04:36.9279623Z", "eventRecordID": "133", "processID": "4984", "threadID": "3500", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "Windows PowerShell has started an IPC listening thread on process: 4984 in AppDomain: DefaultAppDomain."}, "eventdata": {"param1": "4984", "param2": "DefaultAppDomain"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "40962", "version": "1", "level": "4", "task": "4", "opcode": "2", "keywords": "0x0", "systemTime": "2021-04-22T10:04:37.0403533Z", "eventRecordID": "134", "processID": "4984", "threadID": "2592", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "PowerShell console is ready for user input"}, "eventdata": {}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "5", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:04:37.0816290Z", "eventRecordID": "135", "processID": "4984", "threadID": "3380", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "VERBOSE", "message": "Creating Scriptblock text (1 of 1):\nWrite-Host 'Final result: 1';\n\nScriptBlock ID: d4032236-9130-47e8-8602-626a2b5e46e7\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "1", "scriptBlockText": "Write-Host 'Final result: 1';", "scriptBlockId": "d4032236-9130-47e8-8602-626a2b5e46e7"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:04:37.6635072Z", "eventRecordID": "136", "processID": "4984", "threadID": "3380", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Write-Host): \"Write-Host\"\nParameterBinding(Write-Host): name=\"Object\"; value=\"Final result: 1\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 5113fce2-3b6b-458c-84dd-cbb219bb6ba4\n        Host Application = powershell.exe -ExecutionPolicy Restricted -Command Write-Host 'Final result: 1';\n        Engine Version = 5.1.19041.906\n        Runspace ID = 60c49911-7351-41b0-bcca-3af152e5b37c\n        Pipeline ID = 1\n        Command Name = Write-Host\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 16\n        User = OFFSEC\\SYSTEM\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 5113fce2-3b6b-458c-84dd-cbb219bb6ba4\n        Host Application = powershell.exe -ExecutionPolicy Restricted -Command Write-Host 'Final result: 1';\n        Engine Version = 5.1.19041.906\n        Runspace ID = 60c49911-7351-41b0-bcca-3af152e5b37c\n        Pipeline ID = 1\n        Command Name = Write-Host\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 16\n        User = OFFSEC\\SYSTEM\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Write-Host): \"Write-Host\"\nParameterBinding(Write-Host): name=\"Object\"; value=\"Final result: 1\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4103", "version": "1", "level": "4", "task": "106", "opcode": "20", "keywords": "0x0", "systemTime": "2021-04-22T10:04:37.6637754Z", "eventRecordID": "137", "processID": "4984", "threadID": "3380", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "INFORMATION", "message": "CommandInvocation(Out-Default): \"Out-Default\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 5113fce2-3b6b-458c-84dd-cbb219bb6ba4\n        Host Application = powershell.exe -ExecutionPolicy Restricted -Command Write-Host 'Final result: 1';\n        Engine Version = 5.1.19041.906\n        Runspace ID = 60c49911-7351-41b0-bcca-3af152e5b37c\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 18\n        User = OFFSEC\\SYSTEM\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:"}, "eventdata": {"contextInfo": "Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.19041.906\n        Host ID = 5113fce2-3b6b-458c-84dd-cbb219bb6ba4\n        Host Application = powershell.exe -ExecutionPolicy Restricted -Command Write-Host 'Final result: 1';\n        Engine Version = 5.1.19041.906\n        Runspace ID = 60c49911-7351-41b0-bcca-3af152e5b37c\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 18\n        User = OFFSEC\\SYSTEM\n        Connected User = \n        Shell ID = Microsoft.PowerShell", "payload": "CommandInvocation(Out-Default): \"Out-Default\""}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-PowerShell", "providerGuid": "{a0c1853b-5c40-4b15-8766-3cf1c58f985a}", "eventID": "4104", "version": "1", "level": "5", "task": "2", "opcode": "15", "keywords": "0x0", "systemTime": "2021-04-22T10:04:37.6714883Z", "eventRecordID": "138", "processID": "4984", "threadID": "3380", "channel": "Microsoft-Windows-PowerShell/Operational", "computer": "win10-02.offsec.lan", "severityValue": "VERBOSE", "message": "Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: be03f209-2e26-4104-bb2c-0c8293570a00\nPath:"}, "eventdata": {"messageNumber": "1", "messageTotal": "1", "scriptBlockText": "$global:?", "scriptBlockId": "be03f209-2e26-4104-bb2c-0c8293570a00"}}}'''
        ]

        responses = send_multiple_logs(logs, location="stdin", log_format="json")

        # Ensure we receive a response for each log sent
        self.assertEqual(len(responses), len(logs))

        for _, response in enumerate(responses):
            self.assertEqual(response.status, LogtestStatus.RuleMatch)
            self.assertEqual(response.decoder, 'json')

            # Example: Set expected Wazuh rule ID and level when analyzing logs
            # expected_rule_id = None  # Replace with actual rule ID
            # expected_rule_level = None  # Replace with actual rule level

            # self.assertEqual(response.rule_id, expected_rule_id)
            # self.assertEqual(response.rule_level, expected_rule_level)

        # TODO: Write the expected result as test cases when the logs are analyzed by Wazuh.
        self.fail("Test not implemented yet. Define expected results.")
