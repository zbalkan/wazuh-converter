import unittest

from internal.logtest import LogtestStatus, send_multiple_logs  # type: ignore


class TestTa0004PrivilegeEscalationT1068ExploitationForPrivilegeEscalation(unittest.TestCase):

    def test_id4673_privilege_semachineaccountprivilege_called(self) -> None:
        # Logs extracted from EVTX file
        logs = [
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Security-Auditing", "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}", "eventID": "4673", "version": "0", "level": "0", "task": "13056", "opcode": "0", "keywords": "0x8020000000000000", "systemTime": "2021-12-14T14:42:48.7423696Z", "eventRecordID": "237294523", "processID": "4", "threadID": "3552", "channel": "Security", "computer": "rootdc1.offsec.lan", "severityValue": "AUDIT_SUCCESS", "message": "A privileged service was called.\n\nSubject:\n\tSecurity ID:\t\tS-1-5-21-4230534742-2542757381-3142984815-1234\n\tAccount Name:\t\thack1\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x308FB82AD\n\nService:\n\tServer:\tSecurity Account Manager\n\tService Name:\tSecurity Account Manager\n\nProcess:\n\tProcess ID:\t0x254\n\tProcess Name:\tC:\\Windows\\System32\\lsass.exe\n\nService Request Information:\n\tPrivileges:\t\tSeMachineAccountPrivilege"}, "eventdata": {"subjectUserSid": "S-1-5-21-4230534742-2542757381-3142984815-1234", "subjectUserName": "hack1", "subjectDomainName": "OFFSEC", "subjectLogonId": "0x308fb82ad", "objectServer": "Security Account Manager", "service": "Security Account Manager", "privilegeList": "SeMachineAccountPrivilege", "processId": "0x254", "processName": "C:\\Windows\\System32\\lsass.exe"}}}'''
        ]

        responses = send_multiple_logs(logs, location="stdin", log_format="json")

        # Ensure we receive a response for each log sent
        self.assertEqual(len(responses), len(logs))

        for _, response in enumerate(responses):
            self.assertEqual(response.status, LogtestStatus.RuleMatch)
            self.assertEqual(response.decoder, 'json')

            # Example: Set expected Wazuh rule ID and level when analyzing logs
            # expected_rule_id = None  # Replace with actual rule ID
            # expected_rule_level = None  # Replace with actual rule level

            # self.assertEqual(response.rule_id, expected_rule_id)
            # self.assertEqual(response.rule_level, expected_rule_level)

        # TODO: Write the expected result as test cases when the logs are analyzed by Wazuh.
        self.fail("Test not implemented yet. Define expected results.")
