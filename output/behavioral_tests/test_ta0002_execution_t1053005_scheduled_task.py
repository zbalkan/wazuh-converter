import unittest

from internal.logtest import LogtestStatus, send_multiple_logs  # type: ignore


class TestTa0002ExecutionT1053005ScheduledTask(unittest.TestCase):

    def test_id4688_4698_persistent_scheduled_task_with_system_privileges_creation(self) -> None:
        # Logs extracted from EVTX file
        logs = [
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Security-Auditing", "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}", "eventID": "4688", "version": "2", "level": "0", "task": "13312", "opcode": "0", "keywords": "0x8020000000000000", "systemTime": "2021-04-21T13:30:00.5696790Z", "eventRecordID": "352963", "processID": "4", "threadID": "3572", "channel": "Security", "computer": "srvdefender01.offsec.lan", "severityValue": "AUDIT_SUCCESS", "message": "A new process has been created.\n\nCreator Subject:\n\tSecurity ID:\t\tS-1-5-21-4230534742-2542757381-3142984815-1111\n\tAccount Name:\t\tadmmig\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x6FC89E\n\nTarget Subject:\n\tSecurity ID:\t\tS-1-0-0\n\tAccount Name:\t\t-\n\tAccount Domain:\t\t-\n\tLogon ID:\t\t0x0\n\nProcess Information:\n\tNew Process ID:\t\t0x15b4\n\tNew Process Name:\tC:\\Windows\\System32\\schtasks.exe\n\tToken Elevation Type:\t%%1937\n\tMandatory Label:\t\tS-1-16-12288\n\tCreator Process ID:\t0x17e8\n\tCreator Process Name:\tC:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n\tProcess Command Line:\t\"C:\\Windows\\system32\\schtasks.exe\" /create /sc minute /mo 1 /tn eviltask /tr C:\\tools\\shell.cmd /ru SYSTEM\n\nToken Elevation Type indicates the type of token that was assigned to the new process in accordance with User Account Control policy.\n\nType 1 is a full token with no privileges removed or groups disabled.  A full token is only used if User Account Control is disabled or if the user is the built-in Administrator account or a service account.\n\nType 2 is an elevated token with no privileges removed or groups disabled.  An elevated token is used when User Account Control is enabled and the user chooses to start the program using Run as administrator.  An elevated token is also used when an application is configured to always require administrative privilege or to always require maximum privilege, and the user is a member of the Administrators group.\n\nType 3 is a limited token with administrative privileges removed and administrative groups disabled.  The limited token is used when User Account Control is enabled, the application does not require administrative privilege, and the user does not choose to start the program using Run as administrator."}, "eventdata": {"subjectUserSid": "S-1-5-21-4230534742-2542757381-3142984815-1111", "subjectUserName": "admmig", "subjectDomainName": "OFFSEC", "subjectLogonId": "0x6fc89e", "newProcessId": "0x15b4", "newProcessName": "C:\\Windows\\System32\\schtasks.exe", "tokenElevationType": "%%1937", "processId": "0x17e8", "commandLine": "\"C:\\Windows\\system32\\schtasks.exe\" /create /sc minute /mo 1 /tn eviltask /tr C:\\tools\\shell.cmd /ru SYSTEM", "targetUserSid": "S-1-0-0", "targetLogonId": "0x0", "parentProcessName": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe", "mandatoryLabel": "S-1-16-12288"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Security-Auditing", "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}", "eventID": "4698", "version": "0", "level": "0", "task": "12804", "opcode": "0", "keywords": "0x8020000000000000", "systemTime": "2021-04-21T13:30:00.5894609Z", "eventRecordID": "352964", "processID": "584", "threadID": "616", "channel": "Security", "computer": "srvdefender01.offsec.lan", "severityValue": "AUDIT_SUCCESS", "message": "A scheduled task was created.\n\nSubject:\n\tSecurity ID:\t\tS-1-5-21-4230534742-2542757381-3142984815-1111\n\tAccount Name:\t\tadmmig\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x6FC89E\n\nTask Information:\n\tTask Name: \t\t\\eviltask\n\tTask Content: \t\t<?xml version=\"1.0\" encoding=\"UTF-16\"?>\n<Task version=\"1.2\" xmlns=\"http://schemas.microsoft.com/windows/2004/02/mit/task\">\n  <RegistrationInfo>\n    <Date>2021-04-21T13:30:00</Date>\n    <Author>OFFSEC\\admmig</Author>\n    <URI>\\eviltask</URI>\n  </RegistrationInfo>\n  <Triggers>\n    <TimeTrigger>\n      <Repetition>\n        <Interval>PT1M</Interval>\n        <StopAtDurationEnd>false</StopAtDurationEnd>\n      </Repetition>\n      <StartBoundary>2021-04-21T13:30:00</StartBoundary>\n      <Enabled>true</Enabled>\n    </TimeTrigger>\n  </Triggers>\n  <Settings>\n    <MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>\n    <DisallowStartIfOnBatteries>true</DisallowStartIfOnBatteries>\n    <StopIfGoingOnBatteries>true</StopIfGoingOnBatteries>\n    <AllowHardTerminate>true</AllowHardTerminate>\n    <StartWhenAvailable>false</StartWhenAvailable>\n    <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>\n    <IdleSettings>\n      <Duration>PT10M</Duration>\n      <WaitTimeout>PT1H</WaitTimeout>\n      <StopOnIdleEnd>true</StopOnIdleEnd>\n      <RestartOnIdle>false</RestartOnIdle>\n    </IdleSettings>\n    <AllowStartOnDemand>true</AllowStartOnDemand>\n    <Enabled>true</Enabled>\n    <Hidden>false</Hidden>\n    <RunOnlyIfIdle>false</RunOnlyIfIdle>\n    <WakeToRun>false</WakeToRun>\n    <ExecutionTimeLimit>PT72H</ExecutionTimeLimit>\n    <Priority>7</Priority>\n  </Settings>\n  <Actions Context=\"Author\">\n    <Exec>\n      <Command>C:\\tools\\shell.cmd</Command>\n    </Exec>\n  </Actions>\n  <Principals>\n    <Principal id=\"Author\">\n      <UserId>S-1-5-18</UserId>\n      <RunLevel>LeastPrivilege</RunLevel>\n    </Principal>\n  </Principals>\n</Task>"}, "eventdata": {"subjectUserSid": "S-1-5-21-4230534742-2542757381-3142984815-1111", "subjectUserName": "admmig", "subjectDomainName": "OFFSEC", "subjectLogonId": "0x6fc89e", "taskName": "\\eviltask", "taskContent": "<?xml version=\"1.0\" encoding=\"UTF-16\"?>\n<Task version=\"1.2\" xmlns=\"http://schemas.microsoft.com/windows/2004/02/mit/task\">\n  <RegistrationInfo>\n    <Date>2021-04-21T13:30:00</Date>\n    <Author>OFFSEC\\admmig</Author>\n    <URI>\\eviltask</URI>\n  </RegistrationInfo>\n  <Triggers>\n    <TimeTrigger>\n      <Repetition>\n        <Interval>PT1M</Interval>\n        <StopAtDurationEnd>false</StopAtDurationEnd>\n      </Repetition>\n      <StartBoundary>2021-04-21T13:30:00</StartBoundary>\n      <Enabled>true</Enabled>\n    </TimeTrigger>\n  </Triggers>\n  <Settings>\n    <MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>\n    <DisallowStartIfOnBatteries>true</DisallowStartIfOnBatteries>\n    <StopIfGoingOnBatteries>true</StopIfGoingOnBatteries>\n    <AllowHardTerminate>true</AllowHardTerminate>\n    <StartWhenAvailable>false</StartWhenAvailable>\n    <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>\n    <IdleSettings>\n      <Duration>PT10M</Duration>\n      <WaitTimeout>PT1H</WaitTimeout>\n      <StopOnIdleEnd>true</StopOnIdleEnd>\n      <RestartOnIdle>false</RestartOnIdle>\n    </IdleSettings>\n    <AllowStartOnDemand>true</AllowStartOnDemand>\n    <Enabled>true</Enabled>\n    <Hidden>false</Hidden>\n    <RunOnlyIfIdle>false</RunOnlyIfIdle>\n    <WakeToRun>false</WakeToRun>\n    <ExecutionTimeLimit>PT72H</ExecutionTimeLimit>\n    <Priority>7</Priority>\n  </Settings>\n  <Actions Context=\"Author\">\n    <Exec>\n      <Command>C:\\tools\\shell.cmd</Command>\n    </Exec>\n  </Actions>\n  <Principals>\n    <Principal id=\"Author\">\n      <UserId>S-1-5-18</UserId>\n      <RunLevel>LeastPrivilege</RunLevel>\n    </Principal>\n  </Principals>\n</Task>"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Security-Auditing", "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}", "eventID": "4688", "version": "2", "level": "0", "task": "13312", "opcode": "0", "keywords": "0x8020000000000000", "systemTime": "2021-04-21T13:30:03.0127677Z", "eventRecordID": "352965", "processID": "4", "threadID": "3572", "channel": "Security", "computer": "srvdefender01.offsec.lan", "severityValue": "AUDIT_SUCCESS", "message": "A new process has been created.\n\nCreator Subject:\n\tSecurity ID:\t\tS-1-5-18\n\tAccount Name:\t\tSRVDEFENDER01$\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x3E7\n\nTarget Subject:\n\tSecurity ID:\t\tS-1-0-0\n\tAccount Name:\t\t-\n\tAccount Domain:\t\t-\n\tLogon ID:\t\t0x0\n\nProcess Information:\n\tNew Process ID:\t\t0x2ac\n\tNew Process Name:\tC:\\Windows\\System32\\cscript.exe\n\tToken Elevation Type:\t%%1936\n\tMandatory Label:\t\tS-1-16-16384\n\tCreator Process ID:\t0x1638\n\tCreator Process Name:\tC:\\Program Files\\Microsoft Monitoring Agent\\Agent\\MonitoringHost.exe\n\tProcess Command Line:\t\"C:\\Windows\\system32\\cscript.exe\" /nologo \"MonitorKnowledgeDiscovery.vbs\"\n\nToken Elevation Type indicates the type of token that was assigned to the new process in accordance with User Account Control policy.\n\nType 1 is a full token with no privileges removed or groups disabled.  A full token is only used if User Account Control is disabled or if the user is the built-in Administrator account or a service account.\n\nType 2 is an elevated token with no privileges removed or groups disabled.  An elevated token is used when User Account Control is enabled and the user chooses to start the program using Run as administrator.  An elevated token is also used when an application is configured to always require administrative privilege or to always require maximum privilege, and the user is a member of the Administrators group.\n\nType 3 is a limited token with administrative privileges removed and administrative groups disabled.  The limited token is used when User Account Control is enabled, the application does not require administrative privilege, and the user does not choose to start the program using Run as administrator."}, "eventdata": {"subjectUserSid": "S-1-5-18", "subjectUserName": "SRVDEFENDER01$", "subjectDomainName": "OFFSEC", "subjectLogonId": "0x3e7", "newProcessId": "0x2ac", "newProcessName": "C:\\Windows\\System32\\cscript.exe", "tokenElevationType": "%%1936", "processId": "0x1638", "commandLine": "\"C:\\Windows\\system32\\cscript.exe\" /nologo \"MonitorKnowledgeDiscovery.vbs\"", "targetUserSid": "S-1-0-0", "targetLogonId": "0x0", "parentProcessName": "C:\\Program Files\\Microsoft Monitoring Agent\\Agent\\MonitoringHost.exe", "mandatoryLabel": "S-1-16-16384"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Security-Auditing", "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}", "eventID": "4688", "version": "2", "level": "0", "task": "13312", "opcode": "0", "keywords": "0x8020000000000000", "systemTime": "2021-04-21T13:30:03.0294228Z", "eventRecordID": "352966", "processID": "4", "threadID": "3572", "channel": "Security", "computer": "srvdefender01.offsec.lan", "severityValue": "AUDIT_SUCCESS", "message": "A new process has been created.\n\nCreator Subject:\n\tSecurity ID:\t\tS-1-5-18\n\tAccount Name:\t\tSRVDEFENDER01$\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x3E7\n\nTarget Subject:\n\tSecurity ID:\t\tS-1-0-0\n\tAccount Name:\t\t-\n\tAccount Domain:\t\t-\n\tLogon ID:\t\t0x0\n\nProcess Information:\n\tNew Process ID:\t\t0xbc8\n\tNew Process Name:\tC:\\Windows\\System32\\conhost.exe\n\tToken Elevation Type:\t%%1936\n\tMandatory Label:\t\tS-1-16-16384\n\tCreator Process ID:\t0x2ac\n\tCreator Process Name:\tC:\\Windows\\System32\\cscript.exe\n\tProcess Command Line:\t\\??\\C:\\Windows\\system32\\conhost.exe 0xffffffff -ForceV1\n\nToken Elevation Type indicates the type of token that was assigned to the new process in accordance with User Account Control policy.\n\nType 1 is a full token with no privileges removed or groups disabled.  A full token is only used if User Account Control is disabled or if the user is the built-in Administrator account or a service account.\n\nType 2 is an elevated token with no privileges removed or groups disabled.  An elevated token is used when User Account Control is enabled and the user chooses to start the program using Run as administrator.  An elevated token is also used when an application is configured to always require administrative privilege or to always require maximum privilege, and the user is a member of the Administrators group.\n\nType 3 is a limited token with administrative privileges removed and administrative groups disabled.  The limited token is used when User Account Control is enabled, the application does not require administrative privilege, and the user does not choose to start the program using Run as administrator."}, "eventdata": {"subjectUserSid": "S-1-5-18", "subjectUserName": "SRVDEFENDER01$", "subjectDomainName": "OFFSEC", "subjectLogonId": "0x3e7", "newProcessId": "0xbc8", "newProcessName": "C:\\Windows\\System32\\conhost.exe", "tokenElevationType": "%%1936", "processId": "0x2ac", "commandLine": "\\??\\C:\\Windows\\system32\\conhost.exe 0xffffffff -ForceV1", "targetUserSid": "S-1-0-0", "targetLogonId": "0x0", "parentProcessName": "C:\\Windows\\System32\\cscript.exe", "mandatoryLabel": "S-1-16-16384"}}}'''
        ]

        responses = send_multiple_logs(logs, location="stdin", log_format="json")

        # Ensure we receive a response for each log sent
        self.assertEqual(len(responses), len(logs))

        for _, response in enumerate(responses):
            self.assertEqual(response.status, LogtestStatus.RuleMatch)
            self.assertEqual(response.decoder, 'json')

            # Example: Set expected Wazuh rule ID and level when analyzing logs
            # expected_rule_id = None  # Replace with actual rule ID
            # expected_rule_level = None  # Replace with actual rule level

            # self.assertEqual(response.rule_id, expected_rule_id)
            # self.assertEqual(response.rule_level, expected_rule_level)

        # TODO: Write the expected result as test cases when the logs are analyzed by Wazuh.
        self.fail("Test not implemented yet. Define expected results.")

    def test_id4688_interactive_shell_using_at_schedule_task(self) -> None:
        # Logs extracted from EVTX file
        logs = [
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Security-Auditing", "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}", "eventID": "4688", "version": "2", "level": "0", "task": "13312", "opcode": "0", "keywords": "0x8020000000000000", "systemTime": "2021-10-01T17:30:39.0839658Z", "eventRecordID": "2165579", "processID": "4", "threadID": "7136", "channel": "Security", "computer": "fs01.offsec.lan", "severityValue": "AUDIT_SUCCESS", "message": "A new process has been created.\n\nCreator Subject:\n\tSecurity ID:\t\tS-1-5-21-4230534742-2542757381-3142984815-1111\n\tAccount Name:\t\tadmmig\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x65B0F5DB\n\nTarget Subject:\n\tSecurity ID:\t\tS-1-0-0\n\tAccount Name:\t\t-\n\tAccount Domain:\t\t-\n\tLogon ID:\t\t0x0\n\nProcess Information:\n\tNew Process ID:\t\t0x15cc\n\tNew Process Name:\tC:\\Windows\\System32\\at.exe\n\tToken Elevation Type:\t%%1937\n\tMandatory Label:\t\tS-1-16-12288\n\tCreator Process ID:\t0x7d8\n\tCreator Process Name:\tC:\\Windows\\System32\\cmd.exe\n\tProcess Command Line:\tat  13:20 /interactive cmd\n\nToken Elevation Type indicates the type of token that was assigned to the new process in accordance with User Account Control policy.\n\nType 1 is a full token with no privileges removed or groups disabled.  A full token is only used if User Account Control is disabled or if the user is the built-in Administrator account or a service account.\n\nType 2 is an elevated token with no privileges removed or groups disabled.  An elevated token is used when User Account Control is enabled and the user chooses to start the program using Run as administrator.  An elevated token is also used when an application is configured to always require administrative privilege or to always require maximum privilege, and the user is a member of the Administrators group.\n\nType 3 is a limited token with administrative privileges removed and administrative groups disabled.  The limited token is used when User Account Control is enabled, the application does not require administrative privilege, and the user does not choose to start the program using Run as administrator."}, "eventdata": {"subjectUserSid": "S-1-5-21-4230534742-2542757381-3142984815-1111", "subjectUserName": "admmig", "subjectDomainName": "OFFSEC", "subjectLogonId": "0x65b0f5db", "newProcessId": "0x15cc", "newProcessName": "C:\\Windows\\System32\\at.exe", "tokenElevationType": "%%1937", "processId": "0x7d8", "commandLine": "at  13:20 /interactive cmd", "targetUserSid": "S-1-0-0", "targetLogonId": "0x0", "parentProcessName": "C:\\Windows\\System32\\cmd.exe", "mandatoryLabel": "S-1-16-12288"}}}'''
        ]

        responses = send_multiple_logs(logs, location="stdin", log_format="json")

        # Ensure we receive a response for each log sent
        self.assertEqual(len(responses), len(logs))

        for _, response in enumerate(responses):
            self.assertEqual(response.status, LogtestStatus.RuleMatch)
            self.assertEqual(response.decoder, 'json')

            # Example: Set expected Wazuh rule ID and level when analyzing logs
            # expected_rule_id = None  # Replace with actual rule ID
            # expected_rule_level = None  # Replace with actual rule level

            # self.assertEqual(response.rule_id, expected_rule_id)
            # self.assertEqual(response.rule_level, expected_rule_level)

        # TODO: Write the expected result as test cases when the logs are analyzed by Wazuh.
        self.fail("Test not implemented yet. Define expected results.")

    def test_id4688_scheduled_task_creation(self) -> None:
        # Logs extracted from EVTX file
        logs = [
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Security-Auditing", "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}", "eventID": "4688", "version": "2", "level": "0", "task": "13312", "opcode": "0", "keywords": "0x8020000000000000", "systemTime": "2020-07-11T21:09:03.2492409Z", "eventRecordID": "2774613", "processID": "4", "threadID": "4216", "channel": "Security", "computer": "jump01.offsec.lan", "severityValue": "AUDIT_SUCCESS", "message": "A new process has been created.\n\nCreator Subject:\n\tSecurity ID:\t\tS-1-5-21-4230534742-2542757381-3142984815-1158\n\tAccount Name:\t\tlambda-user\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x1D41A5FA\n\nTarget Subject:\n\tSecurity ID:\t\tS-1-0-0\n\tAccount Name:\t\t-\n\tAccount Domain:\t\t-\n\tLogon ID:\t\t0x0\n\nProcess Information:\n\tNew Process ID:\t\t0x1e18\n\tNew Process Name:\tC:\\Windows\\System32\\schtasks.exe\n\tToken Elevation Type:\t%%1938\n\tMandatory Label:\t\tS-1-16-8192\n\tCreator Process ID:\t0xcd4\n\tCreator Process Name:\tC:\\Windows\\System32\\cmd.exe\n\tProcess Command Line:\tschtasks  /create /s fs02 /tn tasks_test_hacker2 /tr myapp.exe /sc daily /mo 10\n\nToken Elevation Type indicates the type of token that was assigned to the new process in accordance with User Account Control policy.\n\nType 1 is a full token with no privileges removed or groups disabled.  A full token is only used if User Account Control is disabled or if the user is the built-in Administrator account or a service account.\n\nType 2 is an elevated token with no privileges removed or groups disabled.  An elevated token is used when User Account Control is enabled and the user chooses to start the program using Run as administrator.  An elevated token is also used when an application is configured to always require administrative privilege or to always require maximum privilege, and the user is a member of the Administrators group.\n\nType 3 is a limited token with administrative privileges removed and administrative groups disabled.  The limited token is used when User Account Control is enabled, the application does not require administrative privilege, and the user does not choose to start the program using Run as administrator."}, "eventdata": {"subjectUserSid": "S-1-5-21-4230534742-2542757381-3142984815-1158", "subjectUserName": "lambda-user", "subjectDomainName": "OFFSEC", "subjectLogonId": "0x1d41a5fa", "newProcessId": "0x1e18", "newProcessName": "C:\\Windows\\System32\\schtasks.exe", "tokenElevationType": "%%1938", "processId": "0xcd4", "commandLine": "schtasks  /create /s fs02 /tn tasks_test_hacker2 /tr myapp.exe /sc daily /mo 10", "targetUserSid": "S-1-0-0", "targetLogonId": "0x0", "parentProcessName": "C:\\Windows\\System32\\cmd.exe", "mandatoryLabel": "S-1-16-8192"}}}'''
        ]

        responses = send_multiple_logs(logs, location="stdin", log_format="json")

        # Ensure we receive a response for each log sent
        self.assertEqual(len(responses), len(logs))

        for _, response in enumerate(responses):
            self.assertEqual(response.status, LogtestStatus.RuleMatch)
            self.assertEqual(response.decoder, 'json')

            # Example: Set expected Wazuh rule ID and level when analyzing logs
            # expected_rule_id = None  # Replace with actual rule ID
            # expected_rule_level = None  # Replace with actual rule level

            # self.assertEqual(response.rule_id, expected_rule_id)
            # self.assertEqual(response.rule_level, expected_rule_level)

        # TODO: Write the expected result as test cases when the logs are analyzed by Wazuh.
        self.fail("Test not implemented yet. Define expected results.")

    def test_id4698_4699_fast_created__deleted_task_by_atexec_susp_arg(self) -> None:
        # Logs extracted from EVTX file
        logs = [
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Security-Auditing", "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}", "eventID": "4698", "version": "0", "level": "0", "task": "12804", "opcode": "0", "keywords": "0x8020000000000000", "systemTime": "2021-06-10T21:21:26.3837263Z", "eventRecordID": "2004852", "processID": "556", "threadID": "5604", "channel": "Security", "computer": "fs01.offsec.lan", "severityValue": "AUDIT_SUCCESS", "message": "A scheduled task was created.\n\nSubject:\n\tSecurity ID:\t\tS-1-5-21-4230534742-2542757381-3142984815-1111\n\tAccount Name:\t\tadmmig\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x5A419BC\n\nTask Information:\n\tTask Name: \t\t\\bouWFQYO\n\tTask Content: \t\t<?xml version=\"1.0\" encoding=\"UTF-16\"?>\n<Task version=\"1.2\" xmlns=\"http://schemas.microsoft.com/windows/2004/02/mit/task\">\n  <Triggers>\n    <CalendarTrigger>\n      <StartBoundary>2015-07-15T20:35:13.2757294</StartBoundary>\n      <Enabled>true</Enabled>\n      <ScheduleByDay>\n        <DaysInterval>1</DaysInterval>\n      </ScheduleByDay>\n    </CalendarTrigger>\n  </Triggers>\n  <Principals>\n    <Principal id=\"LocalSystem\">\n      <UserId>S-1-5-18</UserId>\n      <RunLevel>HighestAvailable</RunLevel>\n      <LogonType>InteractiveToken</LogonType>\n    </Principal>\n  </Principals>\n  <Settings>\n    <MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>\n    <DisallowStartIfOnBatteries>false</DisallowStartIfOnBatteries>\n    <StopIfGoingOnBatteries>false</StopIfGoingOnBatteries>\n    <AllowHardTerminate>true</AllowHardTerminate>\n    <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>\n    <IdleSettings>\n      <StopOnIdleEnd>true</StopOnIdleEnd>\n      <RestartOnIdle>false</RestartOnIdle>\n    </IdleSettings>\n    <AllowStartOnDemand>true</AllowStartOnDemand>\n    <Enabled>true</Enabled>\n    <Hidden>true</Hidden>\n    <RunOnlyIfIdle>false</RunOnlyIfIdle>\n    <WakeToRun>false</WakeToRun>\n    <ExecutionTimeLimit>P3D</ExecutionTimeLimit>\n    <Priority>7</Priority>\n  </Settings>\n  <Actions Context=\"LocalSystem\">\n    <Exec>\n      <Command>cmd.exe</Command>\n      <Arguments>/C whoami &gt; %windir%\\Temp\\bouWFQYO.tmp 2&gt;&amp;1</Arguments>\n    </Exec>\n  </Actions>\n  <RegistrationInfo>\n    <URI>\\bouWFQYO</URI>\n  </RegistrationInfo>\n</Task>"}, "eventdata": {"subjectUserSid": "S-1-5-21-4230534742-2542757381-3142984815-1111", "subjectUserName": "admmig", "subjectDomainName": "OFFSEC", "subjectLogonId": "0x5a419bc", "taskName": "\\bouWFQYO", "taskContent": "<?xml version=\"1.0\" encoding=\"UTF-16\"?>\n<Task version=\"1.2\" xmlns=\"http://schemas.microsoft.com/windows/2004/02/mit/task\">\n  <Triggers>\n    <CalendarTrigger>\n      <StartBoundary>2015-07-15T20:35:13.2757294</StartBoundary>\n      <Enabled>true</Enabled>\n      <ScheduleByDay>\n        <DaysInterval>1</DaysInterval>\n      </ScheduleByDay>\n    </CalendarTrigger>\n  </Triggers>\n  <Principals>\n    <Principal id=\"LocalSystem\">\n      <UserId>S-1-5-18</UserId>\n      <RunLevel>HighestAvailable</RunLevel>\n      <LogonType>InteractiveToken</LogonType>\n    </Principal>\n  </Principals>\n  <Settings>\n    <MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>\n    <DisallowStartIfOnBatteries>false</DisallowStartIfOnBatteries>\n    <StopIfGoingOnBatteries>false</StopIfGoingOnBatteries>\n    <AllowHardTerminate>true</AllowHardTerminate>\n    <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>\n    <IdleSettings>\n      <StopOnIdleEnd>true</StopOnIdleEnd>\n      <RestartOnIdle>false</RestartOnIdle>\n    </IdleSettings>\n    <AllowStartOnDemand>true</AllowStartOnDemand>\n    <Enabled>true</Enabled>\n    <Hidden>true</Hidden>\n    <RunOnlyIfIdle>false</RunOnlyIfIdle>\n    <WakeToRun>false</WakeToRun>\n    <ExecutionTimeLimit>P3D</ExecutionTimeLimit>\n    <Priority>7</Priority>\n  </Settings>\n  <Actions Context=\"LocalSystem\">\n    <Exec>\n      <Command>cmd.exe</Command>\n      <Arguments>/C whoami &gt; %windir%\\Temp\\bouWFQYO.tmp 2&gt;&amp;1</Arguments>\n    </Exec>\n  </Actions>\n  <RegistrationInfo>\n    <URI>\\bouWFQYO</URI>\n  </RegistrationInfo>\n</Task>"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Security-Auditing", "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}", "eventID": "4699", "version": "0", "level": "0", "task": "12804", "opcode": "0", "keywords": "0x8020000000000000", "systemTime": "2021-06-10T21:21:26.4066526Z", "eventRecordID": "2004855", "processID": "556", "threadID": "5604", "channel": "Security", "computer": "fs01.offsec.lan", "severityValue": "AUDIT_SUCCESS", "message": "A scheduled task was deleted.\n\nSubject:\n\tSecurity ID:\t\tS-1-5-21-4230534742-2542757381-3142984815-1111\n\tAccount Name:\t\tadmmig\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x5A419BC\n\nTask Information:\n\tTask Name: \t\t\\bouWFQYO\n\tTask Content:"}, "eventdata": {"subjectUserSid": "S-1-5-21-4230534742-2542757381-3142984815-1111", "subjectUserName": "admmig", "subjectDomainName": "OFFSEC", "subjectLogonId": "0x5a419bc", "taskName": "\\bouWFQYO"}}}'''
        ]

        responses = send_multiple_logs(logs, location="stdin", log_format="json")

        # Ensure we receive a response for each log sent
        self.assertEqual(len(responses), len(logs))

        for _, response in enumerate(responses):
            self.assertEqual(response.status, LogtestStatus.RuleMatch)
            self.assertEqual(response.decoder, 'json')

            # Example: Set expected Wazuh rule ID and level when analyzing logs
            # expected_rule_id = None  # Replace with actual rule ID
            # expected_rule_level = None  # Replace with actual rule level

            # self.assertEqual(response.rule_id, expected_rule_id)
            # self.assertEqual(response.rule_level, expected_rule_level)

        # TODO: Write the expected result as test cases when the logs are analyzed by Wazuh.
        self.fail("Test not implemented yet. Define expected results.")

    def test_id4698_4699_fast_created__deleted_task_by_smbexec_sups_arg(self) -> None:
        # Logs extracted from EVTX file
        logs = [
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Security-Auditing", "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}", "eventID": "4698", "version": "0", "level": "0", "task": "12804", "opcode": "0", "keywords": "0x8020000000000000", "systemTime": "2020-07-11T21:38:17.3514486Z", "eventRecordID": "1230348", "processID": "464", "threadID": "724", "channel": "Security", "computer": "fs02.offsec.lan", "severityValue": "AUDIT_SUCCESS", "message": "A scheduled task was created.\n\nSubject:\n\tSecurity ID:\t\tS-1-5-21-4230534742-2542757381-3142984815-1111\n\tAccount Name:\t\tadmmig\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x3246775\n\nTask Information:\n\tTask Name: \t\t\\smbservice\n\tTask Content: \t\t<?xml version=\"1.0\" encoding=\"UTF-16\"?>\n<Task version=\"1.2\" xmlns=\"http://schemas.microsoft.com/windows/2004/02/mit/task\">\n  <RegistrationInfo>\n    <Date>2020-07-11T21:38:17</Date>\n    <Author>OFFSEC\\lambda-user</Author>\n  </RegistrationInfo>\n  <Triggers>\n    <TimeTrigger>\n      <StartBoundary>2020-07-11T15:20:00</StartBoundary>\n      <Enabled>true</Enabled>\n    </TimeTrigger>\n  </Triggers>\n  <Settings>\n    <MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>\n    <DisallowStartIfOnBatteries>true</DisallowStartIfOnBatteries>\n    <StopIfGoingOnBatteries>true</StopIfGoingOnBatteries>\n    <AllowHardTerminate>true</AllowHardTerminate>\n    <StartWhenAvailable>false</StartWhenAvailable>\n    <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>\n    <IdleSettings>\n      <Duration>PT10M</Duration>\n      <WaitTimeout>PT1H</WaitTimeout>\n      <StopOnIdleEnd>true</StopOnIdleEnd>\n      <RestartOnIdle>false</RestartOnIdle>\n    </IdleSettings>\n    <AllowStartOnDemand>true</AllowStartOnDemand>\n    <Enabled>true</Enabled>\n    <Hidden>false</Hidden>\n    <RunOnlyIfIdle>false</RunOnlyIfIdle>\n    <WakeToRun>false</WakeToRun>\n    <ExecutionTimeLimit>PT72H</ExecutionTimeLimit>\n    <Priority>7</Priority>\n  </Settings>\n  <Actions Context=\"Author\">\n    <Exec>\n      <Command>C:\\WINDOWS\\Temp\\MpCmdRun.bat</Command>\n    </Exec>\n  </Actions>\n  <Principals>\n    <Principal id=\"Author\">\n      <UserId>S-1-5-18</UserId>\n      <RunLevel>LeastPrivilege</RunLevel>\n    </Principal>\n  </Principals>\n</Task>"}, "eventdata": {"subjectUserSid": "S-1-5-21-4230534742-2542757381-3142984815-1111", "subjectUserName": "admmig", "subjectDomainName": "OFFSEC", "subjectLogonId": "0x3246775", "taskName": "\\smbservice", "taskContent": "<?xml version=\"1.0\" encoding=\"UTF-16\"?>\n<Task version=\"1.2\" xmlns=\"http://schemas.microsoft.com/windows/2004/02/mit/task\">\n  <RegistrationInfo>\n    <Date>2020-07-11T21:38:17</Date>\n    <Author>OFFSEC\\lambda-user</Author>\n  </RegistrationInfo>\n  <Triggers>\n    <TimeTrigger>\n      <StartBoundary>2020-07-11T15:20:00</StartBoundary>\n      <Enabled>true</Enabled>\n    </TimeTrigger>\n  </Triggers>\n  <Settings>\n    <MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>\n    <DisallowStartIfOnBatteries>true</DisallowStartIfOnBatteries>\n    <StopIfGoingOnBatteries>true</StopIfGoingOnBatteries>\n    <AllowHardTerminate>true</AllowHardTerminate>\n    <StartWhenAvailable>false</StartWhenAvailable>\n    <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>\n    <IdleSettings>\n      <Duration>PT10M</Duration>\n      <WaitTimeout>PT1H</WaitTimeout>\n      <StopOnIdleEnd>true</StopOnIdleEnd>\n      <RestartOnIdle>false</RestartOnIdle>\n    </IdleSettings>\n    <AllowStartOnDemand>true</AllowStartOnDemand>\n    <Enabled>true</Enabled>\n    <Hidden>false</Hidden>\n    <RunOnlyIfIdle>false</RunOnlyIfIdle>\n    <WakeToRun>false</WakeToRun>\n    <ExecutionTimeLimit>PT72H</ExecutionTimeLimit>\n    <Priority>7</Priority>\n  </Settings>\n  <Actions Context=\"Author\">\n    <Exec>\n      <Command>C:\\WINDOWS\\Temp\\MpCmdRun.bat</Command>\n    </Exec>\n  </Actions>\n  <Principals>\n    <Principal id=\"Author\">\n      <UserId>S-1-5-18</UserId>\n      <RunLevel>LeastPrivilege</RunLevel>\n    </Principal>\n  </Principals>\n</Task>"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Security-Auditing", "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}", "eventID": "4699", "version": "0", "level": "0", "task": "12804", "opcode": "0", "keywords": "0x8020000000000000", "systemTime": "2020-07-11T21:38:17.4452024Z", "eventRecordID": "1230359", "processID": "464", "threadID": "992", "channel": "Security", "computer": "fs02.offsec.lan", "severityValue": "AUDIT_SUCCESS", "message": "A scheduled task was deleted.\n\nSubject:\n\tSecurity ID:\t\tS-1-5-21-4230534742-2542757381-3142984815-1111\n\tAccount Name:\t\tadmmig\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x3246ACE\n\nTask Information:\n\tTask Name: \t\t\\smbservice\n\tTask Content: \t\t<?xml version=\"1.0\" encoding=\"UTF-16\"?>\n<Task version=\"1.2\" xmlns=\"http://schemas.microsoft.com/windows/2004/02/mit/task\">\n  <RegistrationInfo>\n    <Date>2020-07-11T21:38:17</Date>\n    <Author>OFFSEC\\lambda-user</Author>\n  </RegistrationInfo>\n  <Triggers>\n    <TimeTrigger>\n      <StartBoundary>2020-07-11T15:20:00</StartBoundary>\n      <Enabled>true</Enabled>\n    </TimeTrigger>\n  </Triggers>\n  <Settings>\n    <MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>\n    <DisallowStartIfOnBatteries>true</DisallowStartIfOnBatteries>\n    <StopIfGoingOnBatteries>true</StopIfGoingOnBatteries>\n    <AllowHardTerminate>true</AllowHardTerminate>\n    <StartWhenAvailable>false</StartWhenAvailable>\n    <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>\n    <IdleSettings>\n      <Duration>PT10M</Duration>\n      <WaitTimeout>PT1H</WaitTimeout>\n      <StopOnIdleEnd>true</StopOnIdleEnd>\n      <RestartOnIdle>false</RestartOnIdle>\n    </IdleSettings>\n    <AllowStartOnDemand>true</AllowStartOnDemand>\n    <Enabled>true</Enabled>\n    <Hidden>false</Hidden>\n    <RunOnlyIfIdle>false</RunOnlyIfIdle>\n    <WakeToRun>false</WakeToRun>\n    <ExecutionTimeLimit>PT72H</ExecutionTimeLimit>\n    <Priority>7</Priority>\n  </Settings>\n  <Actions Context=\"Author\">\n    <Exec>\n      <Command>C:\\WINDOWS\\Temp\\MpCmdRun.bat</Command>\n    </Exec>\n  </Actions>\n  <Principals>\n    <Principal id=\"Author\">\n      <UserId>S-1-5-18</UserId>\n      <RunLevel>LeastPrivilege</RunLevel>\n    </Principal>\n  </Principals>\n</Task>"}, "eventdata": {"subjectUserSid": "S-1-5-21-4230534742-2542757381-3142984815-1111", "subjectUserName": "admmig", "subjectDomainName": "OFFSEC", "subjectLogonId": "0x3246ace", "taskName": "\\smbservice", "taskContent": "<?xml version=\"1.0\" encoding=\"UTF-16\"?>\n<Task version=\"1.2\" xmlns=\"http://schemas.microsoft.com/windows/2004/02/mit/task\">\n  <RegistrationInfo>\n    <Date>2020-07-11T21:38:17</Date>\n    <Author>OFFSEC\\lambda-user</Author>\n  </RegistrationInfo>\n  <Triggers>\n    <TimeTrigger>\n      <StartBoundary>2020-07-11T15:20:00</StartBoundary>\n      <Enabled>true</Enabled>\n    </TimeTrigger>\n  </Triggers>\n  <Settings>\n    <MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>\n    <DisallowStartIfOnBatteries>true</DisallowStartIfOnBatteries>\n    <StopIfGoingOnBatteries>true</StopIfGoingOnBatteries>\n    <AllowHardTerminate>true</AllowHardTerminate>\n    <StartWhenAvailable>false</StartWhenAvailable>\n    <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>\n    <IdleSettings>\n      <Duration>PT10M</Duration>\n      <WaitTimeout>PT1H</WaitTimeout>\n      <StopOnIdleEnd>true</StopOnIdleEnd>\n      <RestartOnIdle>false</RestartOnIdle>\n    </IdleSettings>\n    <AllowStartOnDemand>true</AllowStartOnDemand>\n    <Enabled>true</Enabled>\n    <Hidden>false</Hidden>\n    <RunOnlyIfIdle>false</RunOnlyIfIdle>\n    <WakeToRun>false</WakeToRun>\n    <ExecutionTimeLimit>PT72H</ExecutionTimeLimit>\n    <Priority>7</Priority>\n  </Settings>\n  <Actions Context=\"Author\">\n    <Exec>\n      <Command>C:\\WINDOWS\\Temp\\MpCmdRun.bat</Command>\n    </Exec>\n  </Actions>\n  <Principals>\n    <Principal id=\"Author\">\n      <UserId>S-1-5-18</UserId>\n      <RunLevel>LeastPrivilege</RunLevel>\n    </Principal>\n  </Principals>\n</Task>"}}}'''
        ]

        responses = send_multiple_logs(logs, location="stdin", log_format="json")

        # Ensure we receive a response for each log sent
        self.assertEqual(len(responses), len(logs))

        for _, response in enumerate(responses):
            self.assertEqual(response.status, LogtestStatus.RuleMatch)
            self.assertEqual(response.decoder, 'json')

            # Example: Set expected Wazuh rule ID and level when analyzing logs
            # expected_rule_id = None  # Replace with actual rule ID
            # expected_rule_level = None  # Replace with actual rule level

            # self.assertEqual(response.rule_id, expected_rule_id)
            # self.assertEqual(response.rule_level, expected_rule_level)

        # TODO: Write the expected result as test cases when the logs are analyzed by Wazuh.
        self.fail("Test not implemented yet. Define expected results.")

    def test_id5145_remote_schedule_task_creation_atexec(self) -> None:
        # Logs extracted from EVTX file
        logs = [
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Security-Auditing", "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}", "eventID": "5145", "version": "0", "level": "0", "task": "12811", "opcode": "0", "keywords": "0x8020000000000000", "systemTime": "2021-06-10T21:21:26.3633777Z", "eventRecordID": "2004847", "processID": "4", "threadID": "2756", "channel": "Security", "computer": "fs01.offsec.lan", "severityValue": "AUDIT_SUCCESS", "message": "A network share object was checked to see whether client can be granted desired access.\n\t\nSubject:\n\tSecurity ID:\t\tS-1-5-21-4230534742-2542757381-3142984815-1111\n\tAccount Name:\t\tadmmig\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x5A41984\n\nNetwork Information:\t\n\tObject Type:\t\tFile\n\tSource Address:\t\t10.23.123.11\n\tSource Port:\t\t56594\n\t\nShare Information:\n\tShare Name:\t\t\\\\*\\IPC$\n\tShare Path:\t\t\n\tRelative Target Name:\tatsvc\n\nAccess Request Information:\n\tAccess Mask:\t\t0x3\n\tAccesses:\t\tReadData (or ListDirectory)\n\t\t\t\tWriteData (or AddFile)\n\t\t\t\t\nAccess Check Results:\n\t-"}, "eventdata": {"subjectUserSid": "S-1-5-21-4230534742-2542757381-3142984815-1111", "subjectUserName": "admmig", "subjectDomainName": "OFFSEC", "subjectLogonId": "0x5a41984", "objectType": "File", "ipAddress": "10.23.123.11", "ipPort": "56594", "shareName": "\\\\*\\IPC$", "relativeTargetName": "atsvc", "accessMask": "0x3", "accessList": "%%4416\n\t\t\t\t%%4417"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Security-Auditing", "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}", "eventID": "5145", "version": "0", "level": "0", "task": "12811", "opcode": "0", "keywords": "0x8020000000000000", "systemTime": "2021-06-10T21:21:26.4153492Z", "eventRecordID": "2004857", "processID": "4", "threadID": "2756", "channel": "Security", "computer": "fs01.offsec.lan", "severityValue": "AUDIT_SUCCESS", "message": "A network share object was checked to see whether client can be granted desired access.\n\t\nSubject:\n\tSecurity ID:\t\tS-1-5-21-4230534742-2542757381-3142984815-1111\n\tAccount Name:\t\tadmmig\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x5A41984\n\nNetwork Information:\t\n\tObject Type:\t\tFile\n\tSource Address:\t\t10.23.123.11\n\tSource Port:\t\t56594\n\t\nShare Information:\n\tShare Name:\t\t\\\\*\\ADMIN$\n\tShare Path:\t\t\\??\\C:\\Windows\n\tRelative Target Name:\tTemp\\bouWFQYO.tmp\n\nAccess Request Information:\n\tAccess Mask:\t\t0x1\n\tAccesses:\t\tReadData (or ListDirectory)\n\t\t\t\t\nAccess Check Results:\n\t-"}, "eventdata": {"subjectUserSid": "S-1-5-21-4230534742-2542757381-3142984815-1111", "subjectUserName": "admmig", "subjectDomainName": "OFFSEC", "subjectLogonId": "0x5a41984", "objectType": "File", "ipAddress": "10.23.123.11", "ipPort": "56594", "shareName": "\\\\*\\ADMIN$", "shareLocalPath": "\\??\\C:\\Windows", "relativeTargetName": "Temp\\bouWFQYO.tmp", "accessMask": "0x1", "accessList": "%%4416"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Security-Auditing", "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}", "eventID": "5145", "version": "0", "level": "0", "task": "12811", "opcode": "0", "keywords": "0x8020000000000000", "systemTime": "2021-06-10T21:21:29.4270514Z", "eventRecordID": "2004860", "processID": "4", "threadID": "5172", "channel": "Security", "computer": "fs01.offsec.lan", "severityValue": "AUDIT_SUCCESS", "message": "A network share object was checked to see whether client can be granted desired access.\n\t\nSubject:\n\tSecurity ID:\t\tS-1-5-21-4230534742-2542757381-3142984815-1111\n\tAccount Name:\t\tadmmig\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x5A41984\n\nNetwork Information:\t\n\tObject Type:\t\tFile\n\tSource Address:\t\t10.23.123.11\n\tSource Port:\t\t56594\n\t\nShare Information:\n\tShare Name:\t\t\\\\*\\ADMIN$\n\tShare Path:\t\t\\??\\C:\\Windows\n\tRelative Target Name:\tTemp\\bouWFQYO.tmp\n\nAccess Request Information:\n\tAccess Mask:\t\t0x1\n\tAccesses:\t\tReadData (or ListDirectory)\n\t\t\t\t\nAccess Check Results:\n\t-"}, "eventdata": {"subjectUserSid": "S-1-5-21-4230534742-2542757381-3142984815-1111", "subjectUserName": "admmig", "subjectDomainName": "OFFSEC", "subjectLogonId": "0x5a41984", "objectType": "File", "ipAddress": "10.23.123.11", "ipPort": "56594", "shareName": "\\\\*\\ADMIN$", "shareLocalPath": "\\??\\C:\\Windows", "relativeTargetName": "Temp\\bouWFQYO.tmp", "accessMask": "0x1", "accessList": "%%4416"}}}''',
            r'''{"win": {"system": {"providerName": "Microsoft-Windows-Security-Auditing", "providerGuid": "{54849625-5478-4994-a5ba-3e3b0328c30d}", "eventID": "5145", "version": "0", "level": "0", "task": "12811", "opcode": "0", "keywords": "0x8020000000000000", "systemTime": "2021-06-10T21:21:29.4415702Z", "eventRecordID": "2004862", "processID": "4", "threadID": "5172", "channel": "Security", "computer": "fs01.offsec.lan", "severityValue": "AUDIT_SUCCESS", "message": "A network share object was checked to see whether client can be granted desired access.\n\t\nSubject:\n\tSecurity ID:\t\tS-1-5-21-4230534742-2542757381-3142984815-1111\n\tAccount Name:\t\tadmmig\n\tAccount Domain:\t\tOFFSEC\n\tLogon ID:\t\t0x5A41984\n\nNetwork Information:\t\n\tObject Type:\t\tFile\n\tSource Address:\t\t10.23.123.11\n\tSource Port:\t\t56594\n\t\nShare Information:\n\tShare Name:\t\t\\\\*\\ADMIN$\n\tShare Path:\t\t\\??\\C:\\Windows\n\tRelative Target Name:\tTemp\\bouWFQYO.tmp\n\nAccess Request Information:\n\tAccess Mask:\t\t0x10080\n\tAccesses:\t\tDELETE\n\t\t\t\tReadAttributes\n\t\t\t\t\nAccess Check Results:\n\t-"}, "eventdata": {"subjectUserSid": "S-1-5-21-4230534742-2542757381-3142984815-1111", "subjectUserName": "admmig", "subjectDomainName": "OFFSEC", "subjectLogonId": "0x5a41984", "objectType": "File", "ipAddress": "10.23.123.11", "ipPort": "56594", "shareName": "\\\\*\\ADMIN$", "shareLocalPath": "\\??\\C:\\Windows", "relativeTargetName": "Temp\\bouWFQYO.tmp", "accessMask": "0x10080", "accessList": "%%1537\n\t\t\t\t%%4423"}}}'''
        ]

        responses = send_multiple_logs(logs, location="stdin", log_format="json")

        # Ensure we receive a response for each log sent
        self.assertEqual(len(responses), len(logs))

        for _, response in enumerate(responses):
            self.assertEqual(response.status, LogtestStatus.RuleMatch)
            self.assertEqual(response.decoder, 'json')

            # Example: Set expected Wazuh rule ID and level when analyzing logs
            # expected_rule_id = None  # Replace with actual rule ID
            # expected_rule_level = None  # Replace with actual rule level

            # self.assertEqual(response.rule_id, expected_rule_id)
            # self.assertEqual(response.rule_level, expected_rule_level)

        # TODO: Write the expected result as test cases when the logs are analyzed by Wazuh.
        self.fail("Test not implemented yet. Define expected results.")
